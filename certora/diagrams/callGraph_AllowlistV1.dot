digraph G {
  graph [ ratio = "auto", page = "100", compound =true, bgcolor = "#2e3e56" ];
  node [ style = "filled", fillcolor = "#edad56", color = "#edad56", penwidth =3 ];
  edge [ color = "#fcfcfc", penwidth =2, fontname = "helvetica Neue Ultra Light" ];
subgraph "clusterAllowlistV1" {
  graph [ label = "AllowlistV1", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "AllowlistV1.initAllowlistV1" [ label = "initAllowlistV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.initAllowlistV1_1" [ label = "initAllowlistV1_1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.getAllower" [ label = "getAllower", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.getDenier" [ label = "getDenier", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.isAllowed" [ label = "isAllowed", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.isDenied" [ label = "isDenied", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.hasPermission" [ label = "hasPermission", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.getPermissions" [ label = "getPermissions", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.onlyAllowed" [ label = "onlyAllowed", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.setAllower" [ label = "setAllower", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.setDenier" [ label = "setDenier", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.setAllowPermissions" [ label = "setAllowPermissions", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.setDenyPermissions" [ label = "setDenyPermissions", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1._setAdmin" [ label = "_setAdmin" ];
  "AllowlistV1.SetAllower" [ label = "SetAllower" ];
  "AllowlistV1.SetDenier" [ label = "SetDenier" ];
  "AllowlistV1.Denied" [ label = "Denied" ];
  "AllowlistV1.InvalidCount" [ label = "InvalidCount" ];
  "AllowlistV1.MismatchedArrayLengths" [ label = "MismatchedArrayLengths" ];
  "AllowlistV1.AttemptToRemoveDenyPermission" [ label = "AttemptToRemoveDenyPermission" ];
  "AllowlistV1.AttemptToSetDenyPermission" [ label = "AttemptToSetDenyPermission" ];
  "AllowlistV1.SetAllowlistPermissions" [ label = "SetAllowlistPermissions" ];
}

subgraph "clusterAllowerAddress" {
  graph [ label = "AllowerAddress", color = "#e8726d", fontcolor = "#f0f0f0", style = "rounded,dashed", bgcolor = "#3b4b63" ];
  "AllowerAddress.set" [ label = "set" ];
  "AllowerAddress.get" [ label = "get" ];
}

subgraph "clusterDenierAddress" {
  graph [ label = "DenierAddress", color = "#e8726d", fontcolor = "#f0f0f0", style = "rounded,dashed", bgcolor = "#3b4b63" ];
  "DenierAddress.set" [ label = "set" ];
  "DenierAddress.get" [ label = "get" ];
}

subgraph "clusterAllowlist" {
  graph [ label = "Allowlist", color = "#e8726d", fontcolor = "#f0f0f0", style = "rounded,dashed", bgcolor = "#3b4b63" ];
  "Allowlist.get" [ label = "get" ];
  "Allowlist.set" [ label = "set" ];
}

subgraph "clusterLibErrors" {
  graph [ label = "LibErrors", color = "#e8726d", fontcolor = "#f0f0f0", style = "rounded,dashed", bgcolor = "#3b4b63" ];
  "LibErrors.Unauthorized" [ label = "Unauthorized" ];
}

subgraph "clusterLibSanitize" {
  graph [ label = "LibSanitize", color = "#e8726d", fontcolor = "#f0f0f0", style = "rounded,dashed", bgcolor = "#3b4b63" ];
  "LibSanitize._notZeroAddress" [ label = "_notZeroAddress" ];
}

  "AllowlistV1.initAllowlistV1";
  "AllowlistV1._setAdmin";
  "AllowerAddress.set";
  "AllowlistV1.SetAllower";
  "AllowlistV1.initAllowlistV1_1";
  "DenierAddress.set";
  "AllowlistV1.SetDenier";
  "AllowlistV1.getAllower";
  "AllowerAddress.get";
  "AllowlistV1.getDenier";
  "DenierAddress.get";
  "AllowlistV1.isAllowed";
  "Allowlist.get";
  "AllowlistV1.isDenied";
  "AllowlistV1.hasPermission";
  "AllowlistV1.getPermissions";
  "AllowlistV1.onlyAllowed";
  "AllowlistV1.Denied";
  "LibErrors.Unauthorized";
  "AllowlistV1.setAllower";
  "AllowlistV1.setDenier";
  "AllowlistV1.setAllowPermissions";
  "AllowlistV1.InvalidCount";
  "AllowlistV1.MismatchedArrayLengths";
  "LibSanitize._notZeroAddress";
  "AllowlistV1.AttemptToRemoveDenyPermission";
  "AllowlistV1.AttemptToSetDenyPermission";
  "Allowlist.set";
  "AllowlistV1.SetAllowlistPermissions";
  "AllowlistV1.setDenyPermissions";
  "AllowlistV1.initAllowlistV1" -> "AllowlistV1._setAdmin" [ color = "#1bc6a6" ];
  "AllowlistV1.initAllowlistV1" -> "AllowerAddress.set" [ color = "white" ];
  "AllowlistV1.initAllowlistV1" -> "AllowlistV1.SetAllower" [ color = "#1bc6a6" ];
  "AllowlistV1.initAllowlistV1_1" -> "DenierAddress.set" [ color = "white" ];
  "AllowlistV1.initAllowlistV1_1" -> "AllowlistV1.SetDenier" [ color = "#1bc6a6" ];
  "AllowlistV1.getAllower" -> "AllowerAddress.get" [ color = "white" ];
  "AllowlistV1.getDenier" -> "DenierAddress.get" [ color = "white" ];
  "AllowlistV1.isAllowed" -> "Allowlist.get" [ color = "white" ];
  "AllowlistV1.isDenied" -> "Allowlist.get" [ color = "white" ];
  "AllowlistV1.hasPermission" -> "Allowlist.get" [ color = "white" ];
  "AllowlistV1.getPermissions" -> "Allowlist.get" [ color = "white" ];
  "AllowlistV1.onlyAllowed" -> "Allowlist.get" [ color = "white" ];
  "AllowlistV1.onlyAllowed" -> "AllowlistV1.Denied" [ color = "#1bc6a6" ];
  "AllowlistV1.onlyAllowed" -> "LibErrors.Unauthorized" [ color = "white" ];
  "AllowlistV1.setAllower" -> "AllowerAddress.set" [ color = "white" ];
  "AllowlistV1.setAllower" -> "AllowlistV1.SetAllower" [ color = "#1bc6a6" ];
  "AllowlistV1.setDenier" -> "DenierAddress.set" [ color = "white" ];
  "AllowlistV1.setDenier" -> "AllowlistV1.SetDenier" [ color = "#1bc6a6" ];
  "AllowlistV1.setAllowPermissions" -> "AllowerAddress.get" [ color = "white" ];
  "AllowlistV1.setAllowPermissions" -> "LibErrors.Unauthorized" [ color = "white" ];
  "AllowlistV1.setAllowPermissions" -> "AllowlistV1.InvalidCount" [ color = "#1bc6a6" ];
  "AllowlistV1.setAllowPermissions" -> "AllowlistV1.MismatchedArrayLengths" [ color = "#1bc6a6" ];
  "AllowlistV1.setAllowPermissions" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "AllowlistV1.setAllowPermissions" -> "Allowlist.get" [ color = "white" ];
  "AllowlistV1.setAllowPermissions" -> "AllowlistV1.AttemptToRemoveDenyPermission" [ color = "#1bc6a6" ];
  "AllowlistV1.setAllowPermissions" -> "AllowlistV1.AttemptToSetDenyPermission" [ color = "#1bc6a6" ];
  "AllowlistV1.setAllowPermissions" -> "Allowlist.set" [ color = "white" ];
  "AllowlistV1.setAllowPermissions" -> "AllowlistV1.SetAllowlistPermissions" [ color = "#1bc6a6" ];
  "AllowlistV1.setDenyPermissions" -> "DenierAddress.get" [ color = "white" ];
  "AllowlistV1.setDenyPermissions" -> "LibErrors.Unauthorized" [ color = "white" ];
  "AllowlistV1.setDenyPermissions" -> "AllowlistV1.InvalidCount" [ color = "#1bc6a6" ];
  "AllowlistV1.setDenyPermissions" -> "AllowlistV1.MismatchedArrayLengths" [ color = "#1bc6a6" ];
  "AllowlistV1.setDenyPermissions" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "AllowlistV1.setDenyPermissions" -> "Allowlist.set" [ color = "white" ];
  "AllowlistV1.setDenyPermissions" -> "Allowlist.set" [ color = "white" ];
  "AllowlistV1.setDenyPermissions" -> "AllowlistV1.SetAllowlistPermissions" [ color = "#1bc6a6" ];


rankdir=LR
node [shape=plaintext]
subgraph cluster_01 { 
label = "Legend";
key [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td align="right" port="i1">Internal Call</td></tr>
  <tr><td align="right" port="i2">External Call</td></tr>
  <tr><td align="right" port="i3">Defined Contract</td></tr>
  <tr><td align="right" port="i4">Undefined Contract</td></tr>
  </table>>]
key2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i3" bgcolor="#445773">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i4">
    <table border="1" cellborder="0" cellspacing="0" cellpadding="7" color="#e8726d">
      <tr>
       <td></td>
      </tr>
     </table>
  </td></tr>
  </table>>]
key:i1:e -> key2:i1:w [color="#1bc6a6"]
key:i2:e -> key2:i2:w [color="white"]
}
}
