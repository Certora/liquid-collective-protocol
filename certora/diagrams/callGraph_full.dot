digraph G {
  graph [ ratio = "auto", page = "100", compound =true, bgcolor = "#2e3e56" ];
  node [ style = "filled", fillcolor = "#edad56", color = "#edad56", penwidth =3 ];
  edge [ color = "#fcfcfc", penwidth =2, fontname = "helvetica Neue Ultra Light" ];
subgraph "clusterIRedeemManagerV1" {
  graph [ label = "IRedeemManagerV1  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IRedeemManagerV1.initializeRedeemManagerV1" [ label = "initializeRedeemManagerV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRedeemManagerV1.getRiver" [ label = "getRiver", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRedeemManagerV1.getRedeemRequestCount" [ label = "getRedeemRequestCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRedeemManagerV1.getRedeemRequestDetails" [ label = "getRedeemRequestDetails", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRedeemManagerV1.getWithdrawalEventCount" [ label = "getWithdrawalEventCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRedeemManagerV1.getWithdrawalEventDetails" [ label = "getWithdrawalEventDetails", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRedeemManagerV1.getBufferedExceedingEth" [ label = "getBufferedExceedingEth", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRedeemManagerV1.getRedeemDemand" [ label = "getRedeemDemand" ];
  "IRedeemManagerV1.resolveRedeemRequests" [ label = "resolveRedeemRequests", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRedeemManagerV1.requestRedeem" [ label = "requestRedeem", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRedeemManagerV1.claimRedeemRequests" [ label = "claimRedeemRequests", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRedeemManagerV1.reportWithdraw" [ label = "reportWithdraw", color = "brown", fillcolor = "#ffbdb9" ];
  "IRedeemManagerV1.pullExceedingEth" [ label = "pullExceedingEth", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
}

subgraph "clusterIRiverV1" {
  graph [ label = "IRiverV1  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IRiverV1.initRiverV1" [ label = "initRiverV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.initRiverV1_1" [ label = "initRiverV1_1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.initRiverV1_2" [ label = "initRiverV1_2", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.getGlobalFee" [ label = "getGlobalFee", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.getAllowlist" [ label = "getAllowlist" ];
  "IRiverV1.getCollector" [ label = "getCollector", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.getELFeeRecipient" [ label = "getELFeeRecipient", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.getCoverageFund" [ label = "getCoverageFund", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.getRedeemManager" [ label = "getRedeemManager", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.getOperatorsRegistry" [ label = "getOperatorsRegistry", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.getMetadataURI" [ label = "getMetadataURI", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.getDailyCommittableLimits" [ label = "getDailyCommittableLimits", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.resolveRedeemRequests" [ label = "resolveRedeemRequests", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.setDailyCommittableLimits" [ label = "setDailyCommittableLimits", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.getBalanceToRedeem" [ label = "getBalanceToRedeem", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.requestRedeem" [ label = "requestRedeem", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.claimRedeemRequests" [ label = "claimRedeemRequests", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.setGlobalFee" [ label = "setGlobalFee", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.setAllowlist" [ label = "setAllowlist", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.setCollector" [ label = "setCollector", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.setELFeeRecipient" [ label = "setELFeeRecipient", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.setCoverageFund" [ label = "setCoverageFund", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.setMetadataURI" [ label = "setMetadataURI", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.sendELFees" [ label = "sendELFees", color = "brown", fillcolor = "#ffbdb9" ];
  "IRiverV1.sendCLFunds" [ label = "sendCLFunds", color = "brown", fillcolor = "#ffbdb9" ];
  "IRiverV1.sendCoverageFunds" [ label = "sendCoverageFunds", color = "brown", fillcolor = "#ffbdb9" ];
  "IRiverV1.sendRedeemManagerExceedingFunds" [ label = "sendRedeemManagerExceedingFunds", color = "brown", fillcolor = "#ffbdb9" ];
  "IRiverV1.isValidEpoch" [ label = "isValidEpoch" ];
  "IRiverV1.setConsensusLayerData" [ label = "setConsensusLayerData" ];
  "IRiverV1.transferFrom" [ label = "transferFrom" ];
  "IRiverV1.underlyingBalanceFromShares" [ label = "underlyingBalanceFromShares" ];
  "IRiverV1.transfer" [ label = "transfer" ];
}

subgraph "clusterIOperatorsRegistryV1" {
  graph [ label = "IOperatorsRegistryV1  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IOperatorsRegistryV1.initOperatorsRegistryV1" [ label = "initOperatorsRegistryV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.initOperatorsRegistryV1_1" [ label = "initOperatorsRegistryV1_1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.getRiver" [ label = "getRiver", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.getOperator" [ label = "getOperator", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.getOperatorCount" [ label = "getOperatorCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.getOperatorStoppedValidatorCount" [ label = "getOperatorStoppedValidatorCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.getTotalStoppedValidatorCount" [ label = "getTotalStoppedValidatorCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.getTotalValidatorExitsRequested" [ label = "getTotalValidatorExitsRequested", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.getCurrentValidatorExitsDemand" [ label = "getCurrentValidatorExitsDemand", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.getStoppedAndRequestedExitCounts" [ label = "getStoppedAndRequestedExitCounts" ];
  "IOperatorsRegistryV1.getStoppedValidatorCountPerOperator" [ label = "getStoppedValidatorCountPerOperator", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.getValidator" [ label = "getValidator", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.listActiveOperators" [ label = "listActiveOperators", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.reportStoppedValidatorCounts" [ label = "reportStoppedValidatorCounts", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.addOperator" [ label = "addOperator", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.setOperatorAddress" [ label = "setOperatorAddress", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.setOperatorName" [ label = "setOperatorName", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.setOperatorStatus" [ label = "setOperatorStatus", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.setOperatorLimits" [ label = "setOperatorLimits", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.addValidators" [ label = "addValidators", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.removeValidators" [ label = "removeValidators", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.pickNextValidatorsToDeposit" [ label = "pickNextValidatorsToDeposit", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.requestValidatorExits" [ label = "requestValidatorExits", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.demandValidatorExits" [ label = "demandValidatorExits" ];
}

subgraph "clusterIAdministrable" {
  graph [ label = "IAdministrable  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IAdministrable.getAdmin" [ label = "getAdmin", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IAdministrable.getPendingAdmin" [ label = "getPendingAdmin", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IAdministrable.proposeAdmin" [ label = "proposeAdmin", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IAdministrable.acceptAdmin" [ label = "acceptAdmin", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
}

subgraph "clusterIWLSETHV1" {
  graph [ label = "IWLSETHV1  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IWLSETHV1.initWLSETHV1" [ label = "initWLSETHV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IWLSETHV1.name" [ label = "name", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IWLSETHV1.symbol" [ label = "symbol", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IWLSETHV1.decimals" [ label = "decimals", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IWLSETHV1.totalSupply" [ label = "totalSupply", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IWLSETHV1.balanceOf" [ label = "balanceOf", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IWLSETHV1.sharesOf" [ label = "sharesOf", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IWLSETHV1.allowance" [ label = "allowance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IWLSETHV1.transfer" [ label = "transfer", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IWLSETHV1.transferFrom" [ label = "transferFrom", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IWLSETHV1.approve" [ label = "approve", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IWLSETHV1.increaseAllowance" [ label = "increaseAllowance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IWLSETHV1.decreaseAllowance" [ label = "decreaseAllowance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IWLSETHV1.mint" [ label = "mint", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IWLSETHV1.burn" [ label = "burn", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
}

subgraph "clusterIFirewall" {
  graph [ label = "IFirewall  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IFirewall.executor" [ label = "executor", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IFirewall.destination" [ label = "destination", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IFirewall.executorCanCall" [ label = "executorCanCall", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IFirewall.setExecutor" [ label = "setExecutor", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IFirewall.allowExecutor" [ label = "allowExecutor", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IFirewall.<Fallback>" [ label = "<Fallback>", color = "brown", fillcolor = "#ffbdb9" ];
  "IFirewall.<Receive Ether>" [ label = "<Receive Ether>", color = "brown", fillcolor = "#ffbdb9" ];
}

subgraph "clusterIERC20VestableVotesUpgradeableV1" {
  graph [ label = "IERC20VestableVotesUpgradeableV1  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IERC20VestableVotesUpgradeableV1.getVestingSchedule" [ label = "getVestingSchedule", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IERC20VestableVotesUpgradeableV1.isGlobalUnlockedScheduleIgnored" [ label = "isGlobalUnlockedScheduleIgnored", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IERC20VestableVotesUpgradeableV1.getVestingScheduleCount" [ label = "getVestingScheduleCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IERC20VestableVotesUpgradeableV1.vestingEscrow" [ label = "vestingEscrow", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IERC20VestableVotesUpgradeableV1.computeVestingReleasableAmount" [ label = "computeVestingReleasableAmount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IERC20VestableVotesUpgradeableV1.computeVestingVestedAmount" [ label = "computeVestingVestedAmount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IERC20VestableVotesUpgradeableV1.createVestingSchedule" [ label = "createVestingSchedule", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IERC20VestableVotesUpgradeableV1.revokeVestingSchedule" [ label = "revokeVestingSchedule", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IERC20VestableVotesUpgradeableV1.releaseVestingSchedule" [ label = "releaseVestingSchedule", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IERC20VestableVotesUpgradeableV1.delegateVestingEscrow" [ label = "delegateVestingEscrow", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
}

subgraph "clusterIConsensusLayerDepositManagerV1" {
  graph [ label = "IConsensusLayerDepositManagerV1  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IConsensusLayerDepositManagerV1.getBalanceToDeposit" [ label = "getBalanceToDeposit", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IConsensusLayerDepositManagerV1.getCommittedBalance" [ label = "getCommittedBalance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IConsensusLayerDepositManagerV1.getWithdrawalCredentials" [ label = "getWithdrawalCredentials", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IConsensusLayerDepositManagerV1.getDepositedValidatorCount" [ label = "getDepositedValidatorCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IConsensusLayerDepositManagerV1.depositToConsensusLayer" [ label = "depositToConsensusLayer", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
}

subgraph "clusterIOracleManagerV1" {
  graph [ label = "IOracleManagerV1  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IOracleManagerV1.getOracle" [ label = "getOracle", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleManagerV1.getCLValidatorTotalBalance" [ label = "getCLValidatorTotalBalance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleManagerV1.getCLValidatorCount" [ label = "getCLValidatorCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleManagerV1.isValidEpoch" [ label = "isValidEpoch", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleManagerV1.getTime" [ label = "getTime", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleManagerV1.getExpectedEpochId" [ label = "getExpectedEpochId", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleManagerV1.getLastCompletedEpochId" [ label = "getLastCompletedEpochId", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleManagerV1.getCurrentEpochId" [ label = "getCurrentEpochId", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleManagerV1.getCLSpec" [ label = "getCLSpec", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleManagerV1.getCurrentFrame" [ label = "getCurrentFrame", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleManagerV1.getFrameFirstEpochId" [ label = "getFrameFirstEpochId", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleManagerV1.getReportBounds" [ label = "getReportBounds", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleManagerV1.getLastConsensusLayerReport" [ label = "getLastConsensusLayerReport", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleManagerV1.setOracle" [ label = "setOracle", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleManagerV1.setCLSpec" [ label = "setCLSpec", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleManagerV1.setReportBounds" [ label = "setReportBounds", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleManagerV1.setConsensusLayerData" [ label = "setConsensusLayerData", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
}

subgraph "clusterIUserDepositManagerV1" {
  graph [ label = "IUserDepositManagerV1  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IUserDepositManagerV1.deposit" [ label = "deposit", color = "brown", fillcolor = "#ffbdb9" ];
  "IUserDepositManagerV1.depositAndTransfer" [ label = "depositAndTransfer", color = "brown", fillcolor = "#ffbdb9" ];
  "IUserDepositManagerV1.<Receive Ether>" [ label = "<Receive Ether>", color = "brown", fillcolor = "#ffbdb9" ];
  "IUserDepositManagerV1.<Fallback>" [ label = "<Fallback>", color = "brown", fillcolor = "#ffbdb9" ];
}

subgraph "clusterISharesManagerV1" {
  graph [ label = "ISharesManagerV1  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "ISharesManagerV1.name" [ label = "name", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ISharesManagerV1.symbol" [ label = "symbol", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ISharesManagerV1.decimals" [ label = "decimals", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ISharesManagerV1.totalSupply" [ label = "totalSupply", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ISharesManagerV1.totalUnderlyingSupply" [ label = "totalUnderlyingSupply", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ISharesManagerV1.balanceOf" [ label = "balanceOf", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ISharesManagerV1.balanceOfUnderlying" [ label = "balanceOfUnderlying", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ISharesManagerV1.underlyingBalanceFromShares" [ label = "underlyingBalanceFromShares", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ISharesManagerV1.sharesFromUnderlyingBalance" [ label = "sharesFromUnderlyingBalance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ISharesManagerV1.allowance" [ label = "allowance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ISharesManagerV1.transfer" [ label = "transfer", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ISharesManagerV1.transferFrom" [ label = "transferFrom", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ISharesManagerV1.approve" [ label = "approve", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ISharesManagerV1.increaseAllowance" [ label = "increaseAllowance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ISharesManagerV1.decreaseAllowance" [ label = "decreaseAllowance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
}

subgraph "clusterIELFeeRecipientV1" {
  graph [ label = "IELFeeRecipientV1  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IELFeeRecipientV1.initELFeeRecipientV1" [ label = "initELFeeRecipientV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IELFeeRecipientV1.pullELFees" [ label = "pullELFees", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IELFeeRecipientV1.<Receive Ether>" [ label = "<Receive Ether>", color = "brown", fillcolor = "#ffbdb9" ];
  "IELFeeRecipientV1.<Fallback>" [ label = "<Fallback>", color = "brown", fillcolor = "#ffbdb9" ];
}

subgraph "clusterIOracleV1" {
  graph [ label = "IOracleV1  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IOracleV1.initOracleV1" [ label = "initOracleV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleV1.initOracleV1_1" [ label = "initOracleV1_1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleV1.getRiver" [ label = "getRiver", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleV1.getMemberReportStatus" [ label = "getMemberReportStatus", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleV1.getGlobalReportStatus" [ label = "getGlobalReportStatus", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleV1.getReportVariantsCount" [ label = "getReportVariantsCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleV1.getReportVariantDetails" [ label = "getReportVariantDetails", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleV1.getQuorum" [ label = "getQuorum", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleV1.getOracleMembers" [ label = "getOracleMembers", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleV1.isMember" [ label = "isMember", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleV1.getLastReportedEpochId" [ label = "getLastReportedEpochId", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleV1.addMember" [ label = "addMember", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleV1.removeMember" [ label = "removeMember", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleV1.setMember" [ label = "setMember", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleV1.setQuorum" [ label = "setQuorum", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOracleV1.reportConsensusLayerData" [ label = "reportConsensusLayerData", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
}

subgraph "clusterIDepositContract" {
  graph [ label = "IDepositContract  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IDepositContract.deposit" [ label = "deposit", color = "brown", fillcolor = "#ffbdb9" ];
}

subgraph "clusterICoverageFundV1" {
  graph [ label = "ICoverageFundV1  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "ICoverageFundV1.initCoverageFundV1" [ label = "initCoverageFundV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ICoverageFundV1.pullCoverageFunds" [ label = "pullCoverageFunds", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ICoverageFundV1.donate" [ label = "donate", color = "brown", fillcolor = "#ffbdb9" ];
  "ICoverageFundV1.<Receive Ether>" [ label = "<Receive Ether>", color = "brown", fillcolor = "#ffbdb9" ];
  "ICoverageFundV1.<Fallback>" [ label = "<Fallback>", color = "brown", fillcolor = "#ffbdb9" ];
}

subgraph "clusterIWithdrawV1" {
  graph [ label = "IWithdrawV1  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IWithdrawV1.initializeWithdrawV1" [ label = "initializeWithdrawV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IWithdrawV1.getCredentials" [ label = "getCredentials", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IWithdrawV1.getRiver" [ label = "getRiver", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IWithdrawV1.pullEth" [ label = "pullEth", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
}

subgraph "clusterITLCV1" {
  graph [ label = "ITLCV1  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "ITLCV1.initTLCV1" [ label = "initTLCV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ITLCV1.migrateVestingSchedules" [ label = "migrateVestingSchedules", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
}

subgraph "clusterIAllowlistV1" {
  graph [ label = "IAllowlistV1  (iface)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IAllowlistV1.initAllowlistV1" [ label = "initAllowlistV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IAllowlistV1.initAllowlistV1_1" [ label = "initAllowlistV1_1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IAllowlistV1.getAllower" [ label = "getAllower", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IAllowlistV1.getDenier" [ label = "getDenier", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IAllowlistV1.isAllowed" [ label = "isAllowed", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IAllowlistV1.isDenied" [ label = "isDenied" ];
  "IAllowlistV1.hasPermission" [ label = "hasPermission", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IAllowlistV1.getPermissions" [ label = "getPermissions", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IAllowlistV1.onlyAllowed" [ label = "onlyAllowed" ];
  "IAllowlistV1.setAllower" [ label = "setAllower", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IAllowlistV1.setDenier" [ label = "setDenier", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IAllowlistV1.setAllowPermissions" [ label = "setAllowPermissions", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IAllowlistV1.setDenyPermissions" [ label = "setDenyPermissions", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
}

subgraph "clusterTUPProxy" {
  graph [ label = "TUPProxy", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "TUPProxy.<Constructor>" [ label = "<Constructor>", color = "brown", fillcolor = "#FF9797" ];
  "TUPProxy.paused" [ label = "paused", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "TUPProxy.pause" [ label = "pause", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "TUPProxy.unpause" [ label = "unpause", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "TUPProxy._beforeFallback" [ label = "_beforeFallback", color = "#f2c383", fillcolor = "#f2c383" ];
  "TUPProxy.CallWhenPaused" [ label = "CallWhenPaused" ];
}

subgraph "clusterRedeemManagerV1" {
  graph [ label = "RedeemManagerV1", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "RedeemManagerV1.onlyRiver" [ label = "onlyRiver", color = "#1bc6a6", shape =doubleoctagon ];
  "RedeemManagerV1.onlyRedeemerOrRiver" [ label = "onlyRedeemerOrRiver", color = "#1bc6a6", shape =doubleoctagon ];
  "RedeemManagerV1.onlyRedeemer" [ label = "onlyRedeemer", color = "#1bc6a6", shape =doubleoctagon ];
  "RedeemManagerV1.initializeRedeemManagerV1" [ label = "initializeRedeemManagerV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RedeemManagerV1.getRiver" [ label = "getRiver", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RedeemManagerV1.getRedeemRequestCount" [ label = "getRedeemRequestCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RedeemManagerV1.getRedeemRequestDetails" [ label = "getRedeemRequestDetails", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RedeemManagerV1.getWithdrawalEventCount" [ label = "getWithdrawalEventCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RedeemManagerV1.getWithdrawalEventDetails" [ label = "getWithdrawalEventDetails", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RedeemManagerV1.getBufferedExceedingEth" [ label = "getBufferedExceedingEth", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RedeemManagerV1.getRedeemDemand" [ label = "getRedeemDemand", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RedeemManagerV1.resolveRedeemRequests" [ label = "resolveRedeemRequests", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RedeemManagerV1.requestRedeem" [ label = "requestRedeem", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RedeemManagerV1.claimRedeemRequests" [ label = "claimRedeemRequests", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RedeemManagerV1.reportWithdraw" [ label = "reportWithdraw", color = "brown", fillcolor = "#ffbdb9" ];
  "RedeemManagerV1.pullExceedingEth" [ label = "pullExceedingEth", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RedeemManagerV1._castedRiver" [ label = "_castedRiver" ];
  "RedeemManagerV1._isMatch" [ label = "_isMatch" ];
  "RedeemManagerV1._performDichotomicResolution" [ label = "_performDichotomicResolution", color = "#f2c383", fillcolor = "#f2c383" ];
  "RedeemManagerV1._resolveRedeemRequestId" [ label = "_resolveRedeemRequestId" ];
  "RedeemManagerV1._requestRedeem" [ label = "_requestRedeem" ];
  "RedeemManagerV1._saveRedeemRequest" [ label = "_saveRedeemRequest", color = "#f2c383", fillcolor = "#f2c383" ];
  "RedeemManagerV1._claimRedeemRequest" [ label = "_claimRedeemRequest", color = "#f2c383", fillcolor = "#f2c383" ];
  "RedeemManagerV1._claimRedeemRequests" [ label = "_claimRedeemRequests" ];
  "RedeemManagerV1._setRedeemDemand" [ label = "_setRedeemDemand" ];
  "RedeemManagerV1.type" [ label = "type" ];
  "RedeemManagerV1.WithdrawalExceedsRedeemDemand" [ label = "WithdrawalExceedsRedeemDemand" ];
  "RedeemManagerV1.payable" [ label = "payable" ];
  "RedeemManagerV1.InvalidZeroAmount" [ label = "InvalidZeroAmount" ];
  "RedeemManagerV1.TransferError" [ label = "TransferError" ];
  "RedeemManagerV1.IncompatibleArrayLengths" [ label = "IncompatibleArrayLengths" ];
  "RedeemManagerV1.RedeemRequestOutOfBounds" [ label = "RedeemRequestOutOfBounds" ];
  "RedeemManagerV1.WithdrawalEventOutOfBounds" [ label = "WithdrawalEventOutOfBounds" ];
  "RedeemManagerV1.RedeemRequestAlreadyClaimed" [ label = "RedeemRequestAlreadyClaimed" ];
  "RedeemManagerV1.DoesNotMatch" [ label = "DoesNotMatch" ];
  "RedeemManagerV1.ClaimRedeemFailed" [ label = "ClaimRedeemFailed" ];
}

subgraph "clusterRiverV1" {
  graph [ label = "RiverV1", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "RiverV1.initRiverV1" [ label = "initRiverV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.initRiverV1_1" [ label = "initRiverV1_1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.initRiverV1_2" [ label = "initRiverV1_2", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.getGlobalFee" [ label = "getGlobalFee", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IRiverV1.getAllowlist" [ label = "getAllowlist", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.getCollector" [ label = "getCollector", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.getELFeeRecipient" [ label = "getELFeeRecipient", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.getCoverageFund" [ label = "getCoverageFund", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.getRedeemManager" [ label = "getRedeemManager", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.getMetadataURI" [ label = "getMetadataURI", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.getDailyCommittableLimits" [ label = "getDailyCommittableLimits", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.setDailyCommittableLimits" [ label = "setDailyCommittableLimits", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.getBalanceToRedeem" [ label = "getBalanceToRedeem", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.resolveRedeemRequests" [ label = "resolveRedeemRequests", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.requestRedeem" [ label = "requestRedeem", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.claimRedeemRequests" [ label = "claimRedeemRequests", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.setGlobalFee" [ label = "setGlobalFee", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.setAllowlist" [ label = "setAllowlist", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.setCollector" [ label = "setCollector", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.setELFeeRecipient" [ label = "setELFeeRecipient", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.setCoverageFund" [ label = "setCoverageFund", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.setMetadataURI" [ label = "setMetadataURI", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.getOperatorsRegistry" [ label = "getOperatorsRegistry", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "RiverV1.sendELFees" [ label = "sendELFees", color = "brown", fillcolor = "#ffbdb9" ];
  "RiverV1.sendCLFunds" [ label = "sendCLFunds", color = "brown", fillcolor = "#ffbdb9" ];
  "RiverV1.sendCoverageFunds" [ label = "sendCoverageFunds", color = "brown", fillcolor = "#ffbdb9" ];
  "RiverV1.sendRedeemManagerExceedingFunds" [ label = "sendRedeemManagerExceedingFunds", color = "brown", fillcolor = "#ffbdb9" ];
  "RiverV1._getRiverAdmin" [ label = "_getRiverAdmin", color = "#f2c383", fillcolor = "#f2c383" ];
  "RiverV1._onTransfer" [ label = "_onTransfer", color = "#f2c383", fillcolor = "#f2c383" ];
  "RiverV1._onDeposit" [ label = "_onDeposit", color = "#f2c383", fillcolor = "#f2c383" ];
  "RiverV1._getNextValidators" [ label = "_getNextValidators", color = "#f2c383", fillcolor = "#f2c383" ];
  "RiverV1._pullELFees" [ label = "_pullELFees", color = "#f2c383", fillcolor = "#f2c383" ];
  "RiverV1._pullCoverageFunds" [ label = "_pullCoverageFunds", color = "#f2c383", fillcolor = "#f2c383" ];
  "RiverV1._onEarnings" [ label = "_onEarnings", color = "#f2c383", fillcolor = "#f2c383" ];
  "RiverV1._assetBalance" [ label = "_assetBalance" ];
  "RiverV1._setDailyCommittableLimits" [ label = "_setDailyCommittableLimits" ];
  "RiverV1._setBalanceToDeposit" [ label = "_setBalanceToDeposit" ];
  "RiverV1._setBalanceToRedeem" [ label = "_setBalanceToRedeem", color = "#f2c383", fillcolor = "#f2c383" ];
  "RiverV1._setCommittedBalance" [ label = "_setCommittedBalance" ];
  "RiverV1._pullCLFunds" [ label = "_pullCLFunds", color = "#f2c383", fillcolor = "#f2c383" ];
  "RiverV1._pullRedeemManagerExceedingEth" [ label = "_pullRedeemManagerExceedingEth", color = "#f2c383", fillcolor = "#f2c383" ];
  "RiverV1._reportWithdrawToRedeemManager" [ label = "_reportWithdrawToRedeemManager", color = "#f2c383", fillcolor = "#f2c383" ];
  "RiverV1._requestExitsBasedOnRedeemDemandAfterRebalancings" [ label = "_requestExitsBasedOnRedeemDemandAfterRebalancings", color = "#f2c383", fillcolor = "#f2c383" ];
  "RiverV1._skimExcessBalanceToRedeem" [ label = "_skimExcessBalanceToRedeem", color = "#f2c383", fillcolor = "#f2c383" ];
  "RiverV1._commitBalanceToDeposit" [ label = "_commitBalanceToDeposit", color = "#f2c383", fillcolor = "#f2c383" ];
  "RiverV1._setAdmin" [ label = "_setAdmin" ];
  "RiverV1.initOracleManagerV1_1" [ label = "initOracleManagerV1_1" ];
  "RiverV1._approve" [ label = "_approve" ];
  "RiverV1.type" [ label = "type" ];
  "RiverV1._transfer" [ label = "_transfer" ];
  "RiverV1.Denied" [ label = "Denied" ];
  "RiverV1.payable" [ label = "payable" ];
  "RiverV1._totalSupply" [ label = "_totalSupply" ];
  "RiverV1.ZeroMintedShares" [ label = "ZeroMintedShares" ];
  "RiverV1._mintRawShares" [ label = "_mintRawShares" ];
  "RiverV1.InvalidPulledClFundsAmount" [ label = "InvalidPulledClFundsAmount" ];
  "RiverV1._balanceFromShares" [ label = "_balanceFromShares" ];
  "RiverV1._sharesFromBalance" [ label = "_sharesFromBalance" ];
  "RiverV1._burnRawShares" [ label = "_burnRawShares" ];
}

subgraph "clusterAdministrable" {
  graph [ label = "Administrable", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "Administrable._getAdmin" [ label = "_getAdmin", color = "#f2c383", fillcolor = "#f2c383" ];
  "Administrable.onlyAdmin" [ label = "onlyAdmin", color = "#1bc6a6", shape =doubleoctagon ];
  "Administrable.onlyPendingAdmin" [ label = "onlyPendingAdmin", color = "#1bc6a6", shape =doubleoctagon ];
  "Administrable.getAdmin" [ label = "getAdmin", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "Administrable.getPendingAdmin" [ label = "getPendingAdmin", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "Administrable.proposeAdmin" [ label = "proposeAdmin", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "Administrable.acceptAdmin" [ label = "acceptAdmin", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "Administrable._setAdmin" [ label = "_setAdmin" ];
  "Administrable._setPendingAdmin" [ label = "_setPendingAdmin" ];
}

subgraph "clusterTlcMigration" {
  graph [ label = "TlcMigration", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "TlcMigration.migrate" [ label = "migrate", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "TlcMigration.CliffTooLong" [ label = "CliffTooLong" ];
  "TlcMigration.WrongEnd" [ label = "WrongEnd" ];
  "TlcMigration.WrongUnlockDate" [ label = "WrongUnlockDate" ];
}

subgraph "clusterOracleV1" {
  graph [ label = "OracleV1", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "OracleV1.onlyAdminOrMember" [ label = "onlyAdminOrMember", color = "#1bc6a6", shape =doubleoctagon ];
  "OracleV1.initOracleV1" [ label = "initOracleV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleV1.initOracleV1_1" [ label = "initOracleV1_1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleV1.getRiver" [ label = "getRiver", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleV1.getMemberReportStatus" [ label = "getMemberReportStatus", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleV1.getGlobalReportStatus" [ label = "getGlobalReportStatus", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleV1.getReportVariantsCount" [ label = "getReportVariantsCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleV1.getReportVariantDetails" [ label = "getReportVariantDetails", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleV1.getQuorum" [ label = "getQuorum", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleV1.getOracleMembers" [ label = "getOracleMembers", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleV1.isMember" [ label = "isMember", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleV1.getLastReportedEpochId" [ label = "getLastReportedEpochId", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleV1.addMember" [ label = "addMember", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleV1.removeMember" [ label = "removeMember", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleV1.setMember" [ label = "setMember", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleV1.setQuorum" [ label = "setQuorum", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleV1.reportConsensusLayerData" [ label = "reportConsensusLayerData", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleV1._clearReportsAndSetQuorum" [ label = "_clearReportsAndSetQuorum" ];
  "OracleV1._reportChecksum" [ label = "_reportChecksum" ];
  "OracleV1._clearReports" [ label = "_clearReports" ];
  "OracleV1._getReportVariantIndexAndVotes" [ label = "_getReportVariantIndexAndVotes" ];
  "OracleV1._river" [ label = "_river", color = "#f2c383", fillcolor = "#f2c383" ];
  "OracleV1.ReportIndexOutOfBounds" [ label = "ReportIndexOutOfBounds" ];
  "OracleV1.AddressAlreadyInUse" [ label = "AddressAlreadyInUse" ];
  "OracleV1.EpochTooOld" [ label = "EpochTooOld" ];
  "OracleV1.payable" [ label = "payable" ];
  "OracleV1.InvalidEpoch" [ label = "InvalidEpoch" ];
  "OracleV1.AlreadyReported" [ label = "AlreadyReported" ];
}

subgraph "clusterWithdrawV1" {
  graph [ label = "WithdrawV1", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "WithdrawV1.onlyRiver" [ label = "onlyRiver", color = "#1bc6a6", shape =doubleoctagon ];
  "WithdrawV1.initializeWithdrawV1" [ label = "initializeWithdrawV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WithdrawV1.getCredentials" [ label = "getCredentials", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WithdrawV1.getRiver" [ label = "getRiver", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WithdrawV1.pullEth" [ label = "pullEth", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WithdrawV1._setRiver" [ label = "_setRiver" ];
  "WithdrawV1.payable" [ label = "payable" ];
}

subgraph "clusterAllowlistV1" {
  graph [ label = "AllowlistV1", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "AllowlistV1.initAllowlistV1" [ label = "initAllowlistV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.initAllowlistV1_1" [ label = "initAllowlistV1_1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.getAllower" [ label = "getAllower", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.getDenier" [ label = "getDenier", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.isAllowed" [ label = "isAllowed", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IAllowlistV1.isDenied" [ label = "isDenied", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.hasPermission" [ label = "hasPermission", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.getPermissions" [ label = "getPermissions", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IAllowlistV1.onlyAllowed" [ label = "onlyAllowed", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.setAllower" [ label = "setAllower", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.setDenier" [ label = "setDenier", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.setAllowPermissions" [ label = "setAllowPermissions", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.setDenyPermissions" [ label = "setDenyPermissions", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "AllowlistV1.Denied" [ label = "Denied" ];
  "AllowlistV1.InvalidCount" [ label = "InvalidCount" ];
  "AllowlistV1.MismatchedArrayLengths" [ label = "MismatchedArrayLengths" ];
  "AllowlistV1.AttemptToRemoveDenyPermission" [ label = "AttemptToRemoveDenyPermission" ];
  "AllowlistV1.AttemptToSetDenyPermission" [ label = "AttemptToSetDenyPermission" ];
}

subgraph "clusterCoverageFundV1" {
  graph [ label = "CoverageFundV1", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "CoverageFundV1.initCoverageFundV1" [ label = "initCoverageFundV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "CoverageFundV1.pullCoverageFunds" [ label = "pullCoverageFunds", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "CoverageFundV1.donate" [ label = "donate", color = "brown", fillcolor = "#ffbdb9" ];
  "CoverageFundV1.<Receive Ether>" [ label = "<Receive Ether>", color = "brown", fillcolor = "#ffbdb9" ];
  "CoverageFundV1.<Fallback>" [ label = "<Fallback>", color = "brown", fillcolor = "#ffbdb9" ];
  "CoverageFundV1.payable" [ label = "payable" ];
  "CoverageFundV1.EmptyDonation" [ label = "EmptyDonation" ];
  "CoverageFundV1.InvalidCall" [ label = "InvalidCall" ];
}

subgraph "clusterFirewall" {
  graph [ label = "Firewall", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "Firewall.<Constructor>" [ label = "<Constructor>", color = "#FF9797", fillcolor = "#FF9797" ];
  "Firewall.onlyAdminOrExecutor" [ label = "onlyAdminOrExecutor", color = "#1bc6a6", shape =doubleoctagon ];
  "Firewall.setExecutor" [ label = "setExecutor", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "Firewall.allowExecutor" [ label = "allowExecutor", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "Firewall.<Fallback>" [ label = "<Fallback>", color = "brown", fillcolor = "#ffbdb9" ];
  "Firewall.<Receive Ether>" [ label = "<Receive Ether>", color = "brown", fillcolor = "#ffbdb9" ];
  "Firewall._checkCallerRole" [ label = "_checkCallerRole", color = "#f2c383", fillcolor = "#f2c383" ];
  "Firewall._forward" [ label = "_forward" ];
  "Firewall._fallback" [ label = "_fallback" ];
}

subgraph "clusterWLSETHV1" {
  graph [ label = "WLSETHV1", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "WLSETHV1.isNotNull" [ label = "isNotNull", color = "#1bc6a6", shape =doubleoctagon ];
  "WLSETHV1.hasFunds" [ label = "hasFunds", color = "#1bc6a6", shape =doubleoctagon ];
  "WLSETHV1.initWLSETHV1" [ label = "initWLSETHV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WLSETHV1.name" [ label = "name", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WLSETHV1.symbol" [ label = "symbol", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WLSETHV1.decimals" [ label = "decimals", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WLSETHV1.totalSupply" [ label = "totalSupply", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WLSETHV1.balanceOf" [ label = "balanceOf", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WLSETHV1.sharesOf" [ label = "sharesOf", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WLSETHV1.allowance" [ label = "allowance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WLSETHV1.transfer" [ label = "transfer", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WLSETHV1.transferFrom" [ label = "transferFrom", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WLSETHV1.approve" [ label = "approve", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WLSETHV1.increaseAllowance" [ label = "increaseAllowance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WLSETHV1.decreaseAllowance" [ label = "decreaseAllowance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WLSETHV1.mint" [ label = "mint", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WLSETHV1.burn" [ label = "burn", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "WLSETHV1._spendAllowance" [ label = "_spendAllowance" ];
  "WLSETHV1._approve" [ label = "_approve" ];
  "WLSETHV1._balanceOf" [ label = "_balanceOf" ];
  "WLSETHV1._transfer" [ label = "_transfer" ];
  "WLSETHV1.NullTransfer" [ label = "NullTransfer" ];
  "WLSETHV1.BalanceTooLow" [ label = "BalanceTooLow" ];
  "WLSETHV1.payable" [ label = "payable" ];
  "WLSETHV1.UnauthorizedTransfer" [ label = "UnauthorizedTransfer" ];
  "WLSETHV1.TokenTransferError" [ label = "TokenTransferError" ];
  "WLSETHV1.AllowanceTooLow" [ label = "AllowanceTooLow" ];
  "WLSETHV1.type" [ label = "type" ];
}

subgraph "clusterELFeeRecipientV1" {
  graph [ label = "ELFeeRecipientV1", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "ELFeeRecipientV1.initELFeeRecipientV1" [ label = "initELFeeRecipientV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ELFeeRecipientV1.pullELFees" [ label = "pullELFees", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ELFeeRecipientV1.<Receive Ether>" [ label = "<Receive Ether>", color = "brown", fillcolor = "#ffbdb9" ];
  "ELFeeRecipientV1.<Fallback>" [ label = "<Fallback>", color = "brown", fillcolor = "#ffbdb9" ];
  "ELFeeRecipientV1.payable" [ label = "payable" ];
  "ELFeeRecipientV1.InvalidCall" [ label = "InvalidCall" ];
}

subgraph "clusterOperatorsRegistryV1" {
  graph [ label = "OperatorsRegistryV1", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "OperatorsRegistryV1.initOperatorsRegistryV1" [ label = "initOperatorsRegistryV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1._migrateOperators_V1_1" [ label = "_migrateOperators_V1_1", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsRegistryV1.forceFundedValidatorKeysEventEmission" [ label = "forceFundedValidatorKeysEventEmission", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.initOperatorsRegistryV1_1" [ label = "initOperatorsRegistryV1_1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.onlyRiver" [ label = "onlyRiver", color = "#1bc6a6", shape =doubleoctagon ];
  "OperatorsRegistryV1.onlyOperatorOrAdmin" [ label = "onlyOperatorOrAdmin", color = "#1bc6a6", shape =doubleoctagon ];
  "OperatorsRegistryV1.getRiver" [ label = "getRiver", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.getOperator" [ label = "getOperator", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.getOperatorStoppedValidatorCount" [ label = "getOperatorStoppedValidatorCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.getTotalStoppedValidatorCount" [ label = "getTotalStoppedValidatorCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.getTotalValidatorExitsRequested" [ label = "getTotalValidatorExitsRequested", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.getCurrentValidatorExitsDemand" [ label = "getCurrentValidatorExitsDemand", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.getStoppedAndRequestedExitCounts" [ label = "getStoppedAndRequestedExitCounts", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.getOperatorCount" [ label = "getOperatorCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.getStoppedValidatorCountPerOperator" [ label = "getStoppedValidatorCountPerOperator", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.getValidator" [ label = "getValidator", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.listActiveOperators" [ label = "listActiveOperators", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.reportStoppedValidatorCounts" [ label = "reportStoppedValidatorCounts", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.addOperator" [ label = "addOperator", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.setOperatorAddress" [ label = "setOperatorAddress", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.setOperatorName" [ label = "setOperatorName", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.setOperatorStatus" [ label = "setOperatorStatus", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.setOperatorLimits" [ label = "setOperatorLimits", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.addValidators" [ label = "addValidators", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.removeValidators" [ label = "removeValidators", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.pickNextValidatorsToDeposit" [ label = "pickNextValidatorsToDeposit", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1.requestValidatorExits" [ label = "requestValidatorExits", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "IOperatorsRegistryV1.demandValidatorExits" [ label = "demandValidatorExits", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OperatorsRegistryV1._getTotalStoppedValidatorCount" [ label = "_getTotalStoppedValidatorCount" ];
  "OperatorsRegistryV1._setCurrentValidatorExitsDemand" [ label = "_setCurrentValidatorExitsDemand" ];
  "OperatorsRegistryV1._setStoppedValidatorCounts" [ label = "_setStoppedValidatorCounts" ];
  "OperatorsRegistryV1._concatenateByteArrays" [ label = "_concatenateByteArrays" ];
  "OperatorsRegistryV1._hasFundableKeys" [ label = "_hasFundableKeys" ];
  "OperatorsRegistryV1._getStoppedValidatorsCount" [ label = "_getStoppedValidatorsCount" ];
  "OperatorsRegistryV1._getActiveValidatorCountForDeposits" [ label = "_getActiveValidatorCountForDeposits", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsRegistryV1._pickNextValidatorsToDepositFromActiveOperators" [ label = "_pickNextValidatorsToDepositFromActiveOperators" ];
  "OperatorsRegistryV1._getActiveValidatorCountForExitRequests" [ label = "_getActiveValidatorCountForExitRequests" ];
  "OperatorsRegistryV1._pickNextValidatorsToExitFromActiveOperators" [ label = "_pickNextValidatorsToExitFromActiveOperators" ];
  "OperatorsRegistryV1._setTotalValidatorExitsRequested" [ label = "_setTotalValidatorExitsRequested" ];
  "OperatorsRegistryV1.type" [ label = "type" ];
  "OperatorsRegistryV1.FundedKeyEventMigrationComplete" [ label = "FundedKeyEventMigrationComplete" ];
  "OperatorsRegistryV1.InactiveOperator" [ label = "InactiveOperator" ];
  "OperatorsRegistryV1.InvalidArrayLengths" [ label = "InvalidArrayLengths" ];
  "OperatorsRegistryV1.InvalidEmptyArray" [ label = "InvalidEmptyArray" ];
  "OperatorsRegistryV1.UnorderedOperatorList" [ label = "UnorderedOperatorList" ];
  "OperatorsRegistryV1.OperatorLimitTooHigh" [ label = "OperatorLimitTooHigh" ];
  "OperatorsRegistryV1.OperatorLimitTooLow" [ label = "OperatorLimitTooLow" ];
  "OperatorsRegistryV1.InvalidKeyCount" [ label = "InvalidKeyCount" ];
  "OperatorsRegistryV1.InvalidKeysLength" [ label = "InvalidKeysLength" ];
  "OperatorsRegistryV1.InvalidIndexOutOfBounds" [ label = "InvalidIndexOutOfBounds" ];
  "OperatorsRegistryV1.InvalidFundedKeyDeletionAttempt" [ label = "InvalidFundedKeyDeletionAttempt" ];
  "OperatorsRegistryV1.InvalidUnsortedIndexes" [ label = "InvalidUnsortedIndexes" ];
  "OperatorsRegistryV1.NoExitRequestsToPerform" [ label = "NoExitRequestsToPerform" ];
  "OperatorsRegistryV1.InvalidEmptyStoppedValidatorCountsArray" [ label = "InvalidEmptyStoppedValidatorCountsArray" ];
  "OperatorsRegistryV1.StoppedValidatorCountsTooHigh" [ label = "StoppedValidatorCountsTooHigh" ];
  "OperatorsRegistryV1.StoppedValidatorCountArrayShrinking" [ label = "StoppedValidatorCountArrayShrinking" ];
  "OperatorsRegistryV1.StoppedValidatorCountsDecreased" [ label = "StoppedValidatorCountsDecreased" ];
  "OperatorsRegistryV1.StoppedValidatorCountAboveFundedCount" [ label = "StoppedValidatorCountAboveFundedCount" ];
  "OperatorsRegistryV1.InvalidStoppedValidatorCountsSum" [ label = "InvalidStoppedValidatorCountsSum" ];
}

subgraph "clusterTLCV1" {
  graph [ label = "TLCV1", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "TLCV1.<Constructor>" [ label = "<Constructor>", color = "#FF9797", fillcolor = "#FF9797" ];
  "TLCV1.initTLCV1" [ label = "initTLCV1", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "TLCV1.migrateVestingSchedules" [ label = "migrateVestingSchedules", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "TLCV1._disableInitializers" [ label = "_disableInitializers" ];
  "TLCV1.__ERC20Permit_init" [ label = "__ERC20Permit_init" ];
  "TLCV1.__ERC20_init" [ label = "__ERC20_init" ];
  "TLCV1._mint" [ label = "_mint" ];
}

subgraph "clusterInitializable" {
  graph [ label = "Initializable", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "Initializable.<Constructor>" [ label = "<Constructor>", color = "#FF9797", fillcolor = "#FF9797" ];
  "Initializable.init" [ label = "init", color = "#1bc6a6", shape =doubleoctagon ];
  "Initializable.type" [ label = "type" ];
  "Initializable.InvalidInitialization" [ label = "InvalidInitialization" ];
}

subgraph "clusterBalanceOf" {
  graph [ label = "BalanceOf  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "BalanceOf.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "BalanceOf.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterOperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex" {
  graph [ label = "OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterOperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex" {
  graph [ label = "OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterSharesManagerV1" {
  graph [ label = "SharesManagerV1", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "SharesManagerV1._mintShares" [ label = "_mintShares", color = "#f2c383", fillcolor = "#f2c383" ];
  "SharesManagerV1._onTransfer" [ label = "_onTransfer" ];
  "SharesManagerV1._assetBalance" [ label = "_assetBalance" ];
  "SharesManagerV1.transferAllowed" [ label = "transferAllowed", color = "#1bc6a6", shape =doubleoctagon ];
  "SharesManagerV1.isNotZero" [ label = "isNotZero", color = "#1bc6a6", shape =doubleoctagon ];
  "SharesManagerV1.hasFunds" [ label = "hasFunds", color = "#1bc6a6", shape =doubleoctagon ];
  "SharesManagerV1.name" [ label = "name", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "SharesManagerV1.symbol" [ label = "symbol", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "SharesManagerV1.decimals" [ label = "decimals", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "SharesManagerV1.totalSupply" [ label = "totalSupply", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "SharesManagerV1.totalUnderlyingSupply" [ label = "totalUnderlyingSupply", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "SharesManagerV1.balanceOf" [ label = "balanceOf", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "SharesManagerV1.balanceOfUnderlying" [ label = "balanceOfUnderlying", color = "#FF9797", fillcolor = "#FF9797" ];
  "SharesManagerV1.underlyingBalanceFromShares" [ label = "underlyingBalanceFromShares", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "SharesManagerV1.sharesFromUnderlyingBalance" [ label = "sharesFromUnderlyingBalance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "SharesManagerV1.allowance" [ label = "allowance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "SharesManagerV1.transfer" [ label = "transfer", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "SharesManagerV1.transferFrom" [ label = "transferFrom", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "SharesManagerV1.approve" [ label = "approve", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "SharesManagerV1.increaseAllowance" [ label = "increaseAllowance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "SharesManagerV1.decreaseAllowance" [ label = "decreaseAllowance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "SharesManagerV1._spendAllowance" [ label = "_spendAllowance" ];
  "SharesManagerV1._approve" [ label = "_approve" ];
  "SharesManagerV1._totalSupply" [ label = "_totalSupply" ];
  "SharesManagerV1._transfer" [ label = "_transfer" ];
  "SharesManagerV1._balanceFromShares" [ label = "_balanceFromShares" ];
  "SharesManagerV1._sharesFromBalance" [ label = "_sharesFromBalance" ];
  "SharesManagerV1._balanceOf" [ label = "_balanceOf" ];
  "SharesManagerV1._mintRawShares" [ label = "_mintRawShares" ];
  "SharesManagerV1._burnRawShares" [ label = "_burnRawShares", color = "#f2c383", fillcolor = "#f2c383" ];
  "SharesManagerV1._setTotalSupply" [ label = "_setTotalSupply" ];
  "SharesManagerV1.NullTransfer" [ label = "NullTransfer" ];
  "SharesManagerV1.BalanceTooLow" [ label = "BalanceTooLow" ];
  "SharesManagerV1.UnauthorizedTransfer" [ label = "UnauthorizedTransfer" ];
  "SharesManagerV1.AllowanceTooLow" [ label = "AllowanceTooLow" ];
  "SharesManagerV1.type" [ label = "type" ];
  "SharesManagerV1.Approval" [ label = "Approval" ];
  "SharesManagerV1.Transfer" [ label = "Transfer" ];
}

subgraph "clusterConsensusLayerDepositManagerV1" {
  graph [ label = "ConsensusLayerDepositManagerV1", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "ConsensusLayerDepositManagerV1.initConsensusLayerDepositManagerV1" [ label = "initConsensusLayerDepositManagerV1", color = "#f2c383", fillcolor = "#f2c383" ];
  "ConsensusLayerDepositManagerV1._getRiverAdmin" [ label = "_getRiverAdmin", color = "#f2c383", fillcolor = "#f2c383" ];
  "ConsensusLayerDepositManagerV1._setCommittedBalance" [ label = "_setCommittedBalance" ];
  "ConsensusLayerDepositManagerV1._getNextValidators" [ label = "_getNextValidators" ];
  "ConsensusLayerDepositManagerV1.getCommittedBalance" [ label = "getCommittedBalance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ConsensusLayerDepositManagerV1.getBalanceToDeposit" [ label = "getBalanceToDeposit", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ConsensusLayerDepositManagerV1.getWithdrawalCredentials" [ label = "getWithdrawalCredentials", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ConsensusLayerDepositManagerV1.getDepositedValidatorCount" [ label = "getDepositedValidatorCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ConsensusLayerDepositManagerV1.depositToConsensusLayer" [ label = "depositToConsensusLayer", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ConsensusLayerDepositManagerV1._depositValidator" [ label = "_depositValidator" ];
  "ConsensusLayerDepositManagerV1.NotEnoughFunds" [ label = "NotEnoughFunds" ];
  "ConsensusLayerDepositManagerV1.NoAvailableValidatorKeys" [ label = "NoAvailableValidatorKeys" ];
  "ConsensusLayerDepositManagerV1.InvalidPublicKeyCount" [ label = "InvalidPublicKeyCount" ];
  "ConsensusLayerDepositManagerV1.InvalidWithdrawalCredentials" [ label = "InvalidWithdrawalCredentials" ];
  "ConsensusLayerDepositManagerV1.InconsistentPublicKeys" [ label = "InconsistentPublicKeys" ];
  "ConsensusLayerDepositManagerV1.InconsistentSignatures" [ label = "InconsistentSignatures" ];
  "ConsensusLayerDepositManagerV1.ErrorOnDeposit" [ label = "ErrorOnDeposit" ];
}

subgraph "clusterERC20VestableVotesUpgradeableV1" {
  graph [ label = "ERC20VestableVotesUpgradeableV1", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "ERC20VestableVotesUpgradeableV1.migrateVestingSchedulesFromV1ToV2" [ label = "migrateVestingSchedulesFromV1ToV2", color = "#f2c383", fillcolor = "#f2c383" ];
  "ERC20VestableVotesUpgradeableV1.__ERC20VestableVotes_init" [ label = "__ERC20VestableVotes_init", color = "#f2c383", fillcolor = "#f2c383" ];
  "ERC20VestableVotesUpgradeableV1.__ERC20VestableVotes_init_unchained" [ label = "__ERC20VestableVotes_init_unchained", color = "#f2c383", fillcolor = "#f2c383" ];
  "ERC20VestableVotesUpgradeableV1.getVestingSchedule" [ label = "getVestingSchedule", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ERC20VestableVotesUpgradeableV1.isGlobalUnlockedScheduleIgnored" [ label = "isGlobalUnlockedScheduleIgnored", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ERC20VestableVotesUpgradeableV1.getVestingScheduleCount" [ label = "getVestingScheduleCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ERC20VestableVotesUpgradeableV1.vestingEscrow" [ label = "vestingEscrow", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ERC20VestableVotesUpgradeableV1.computeVestingReleasableAmount" [ label = "computeVestingReleasableAmount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ERC20VestableVotesUpgradeableV1.computeVestingVestedAmount" [ label = "computeVestingVestedAmount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ERC20VestableVotesUpgradeableV1.createVestingSchedule" [ label = "createVestingSchedule", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ERC20VestableVotesUpgradeableV1.revokeVestingSchedule" [ label = "revokeVestingSchedule", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ERC20VestableVotesUpgradeableV1.releaseVestingSchedule" [ label = "releaseVestingSchedule", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ERC20VestableVotesUpgradeableV1.delegateVestingEscrow" [ label = "delegateVestingEscrow", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule" [ label = "_createVestingSchedule" ];
  "ERC20VestableVotesUpgradeableV1._revokeVestingSchedule" [ label = "_revokeVestingSchedule" ];
  "ERC20VestableVotesUpgradeableV1._releaseVestingSchedule" [ label = "_releaseVestingSchedule" ];
  "ERC20VestableVotesUpgradeableV1._delegateVestingEscrow" [ label = "_delegateVestingEscrow" ];
  "ERC20VestableVotesUpgradeableV1._deterministicVestingEscrow" [ label = "_deterministicVestingEscrow" ];
  "ERC20VestableVotesUpgradeableV1._computeVestingReleasableAmount" [ label = "_computeVestingReleasableAmount" ];
  "ERC20VestableVotesUpgradeableV1._computeVestedAmount" [ label = "_computeVestedAmount" ];
  "ERC20VestableVotesUpgradeableV1._computeGlobalUnlocked" [ label = "_computeGlobalUnlocked" ];
  "ERC20VestableVotesUpgradeableV1._getCurrentTime" [ label = "_getCurrentTime" ];
  "ERC20VestableVotesUpgradeableV1.balanceOf" [ label = "balanceOf" ];
  "ERC20VestableVotesUpgradeableV1.UnsufficientVestingScheduleCreatorBalance" [ label = "UnsufficientVestingScheduleCreatorBalance" ];
  "ERC20VestableVotesUpgradeableV1.InvalidVestingScheduleParameter" [ label = "InvalidVestingScheduleParameter" ];
  "ERC20VestableVotesUpgradeableV1._transfer" [ label = "_transfer" ];
  "ERC20VestableVotesUpgradeableV1._delegate" [ label = "_delegate" ];
  "ERC20VestableVotesUpgradeableV1.VestingScheduleNotRevocableInPast" [ label = "VestingScheduleNotRevocableInPast" ];
  "ERC20VestableVotesUpgradeableV1.VestingScheduleNotRevocable" [ label = "VestingScheduleNotRevocable" ];
  "ERC20VestableVotesUpgradeableV1.InvalidRevokedVestingScheduleEnd" [ label = "InvalidRevokedVestingScheduleEnd" ];
  "ERC20VestableVotesUpgradeableV1.ZeroReleasableAmount" [ label = "ZeroReleasableAmount" ];
  "ERC20VestableVotesUpgradeableV1.delegates" [ label = "delegates" ];
  "ERC20VestableVotesUpgradeableV1.VestingScheduleIsLocked" [ label = "VestingScheduleIsLocked" ];
  "ERC20VestableVotesUpgradeableV1.GlobalUnlockUnderlfow" [ label = "GlobalUnlockUnderlfow" ];
}

subgraph "clusterUserDepositManagerV1" {
  graph [ label = "UserDepositManagerV1", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "UserDepositManagerV1._onDeposit" [ label = "_onDeposit" ];
  "UserDepositManagerV1._setBalanceToDeposit" [ label = "_setBalanceToDeposit" ];
  "UserDepositManagerV1.deposit" [ label = "deposit", color = "brown", fillcolor = "#ffbdb9" ];
  "UserDepositManagerV1.depositAndTransfer" [ label = "depositAndTransfer", color = "brown", fillcolor = "#ffbdb9" ];
  "UserDepositManagerV1.<Receive Ether>" [ label = "<Receive Ether>", color = "brown", fillcolor = "#ffbdb9" ];
  "UserDepositManagerV1.<Fallback>" [ label = "<Fallback>", color = "brown", fillcolor = "#ffbdb9" ];
  "UserDepositManagerV1._deposit" [ label = "_deposit" ];
  "UserDepositManagerV1.EmptyDeposit" [ label = "EmptyDeposit" ];
}

subgraph "clusterOracleManagerV1" {
  graph [ label = "OracleManagerV1", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "OracleManagerV1.initOracleManagerV1" [ label = "initOracleManagerV1", color = "#f2c383", fillcolor = "#f2c383" ];
  "OracleManagerV1._onEarnings" [ label = "_onEarnings" ];
  "OracleManagerV1._pullELFees" [ label = "_pullELFees" ];
  "OracleManagerV1._pullCoverageFunds" [ label = "_pullCoverageFunds" ];
  "OracleManagerV1._getRiverAdmin" [ label = "_getRiverAdmin" ];
  "OracleManagerV1._assetBalance" [ label = "_assetBalance" ];
  "OracleManagerV1._pullCLFunds" [ label = "_pullCLFunds" ];
  "OracleManagerV1._pullRedeemManagerExceedingEth" [ label = "_pullRedeemManagerExceedingEth" ];
  "OracleManagerV1._reportWithdrawToRedeemManager" [ label = "_reportWithdrawToRedeemManager" ];
  "OracleManagerV1._requestExitsBasedOnRedeemDemandAfterRebalancings" [ label = "_requestExitsBasedOnRedeemDemandAfterRebalancings" ];
  "OracleManagerV1._skimExcessBalanceToRedeem" [ label = "_skimExcessBalanceToRedeem" ];
  "OracleManagerV1._commitBalanceToDeposit" [ label = "_commitBalanceToDeposit" ];
  "OracleManagerV1.onlyAdmin_OMV1" [ label = "onlyAdmin_OMV1", color = "#1bc6a6", shape =doubleoctagon ];
  "OracleManagerV1.initOracleManagerV1_1" [ label = "initOracleManagerV1_1", color = "#f2c383", fillcolor = "#f2c383" ];
  "OracleManagerV1.getOracle" [ label = "getOracle", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleManagerV1.getCLValidatorTotalBalance" [ label = "getCLValidatorTotalBalance", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleManagerV1.getCLValidatorCount" [ label = "getCLValidatorCount", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleManagerV1.getExpectedEpochId" [ label = "getExpectedEpochId", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleManagerV1.isValidEpoch" [ label = "isValidEpoch", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleManagerV1.getTime" [ label = "getTime", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleManagerV1.getLastCompletedEpochId" [ label = "getLastCompletedEpochId", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleManagerV1.getCurrentEpochId" [ label = "getCurrentEpochId", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleManagerV1.getCLSpec" [ label = "getCLSpec", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleManagerV1.getCurrentFrame" [ label = "getCurrentFrame", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleManagerV1.getFrameFirstEpochId" [ label = "getFrameFirstEpochId", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleManagerV1.getReportBounds" [ label = "getReportBounds", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleManagerV1.getLastConsensusLayerReport" [ label = "getLastConsensusLayerReport", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleManagerV1.setOracle" [ label = "setOracle", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleManagerV1.setCLSpec" [ label = "setCLSpec", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleManagerV1.setReportBounds" [ label = "setReportBounds", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleManagerV1.setConsensusLayerData" [ label = "setConsensusLayerData", color = "#ffbdb9", fillcolor = "#ffbdb9" ];
  "OracleManagerV1._currentEpoch" [ label = "_currentEpoch" ];
  "OracleManagerV1._isValidEpoch" [ label = "_isValidEpoch" ];
  "OracleManagerV1._maxIncrease" [ label = "_maxIncrease" ];
  "OracleManagerV1._maxDecrease" [ label = "_maxDecrease" ];
  "OracleManagerV1._timeBetweenEpochs" [ label = "_timeBetweenEpochs" ];
  "OracleManagerV1.InvalidEpoch" [ label = "InvalidEpoch" ];
  "OracleManagerV1.InvalidDecreasingValidatorsExitedBalance" [ label = "InvalidDecreasingValidatorsExitedBalance" ];
  "OracleManagerV1.InvalidDecreasingValidatorsSkimmedBalance" [ label = "InvalidDecreasingValidatorsSkimmedBalance" ];
  "OracleManagerV1.InvalidValidatorCountReport" [ label = "InvalidValidatorCountReport" ];
  "OracleManagerV1.TotalValidatorBalanceIncreaseOutOfBound" [ label = "TotalValidatorBalanceIncreaseOutOfBound" ];
  "OracleManagerV1.TotalValidatorBalanceDecreaseOutOfBound" [ label = "TotalValidatorBalanceDecreaseOutOfBound" ];
}

subgraph "clusterLibUint256" {
  graph [ label = "LibUint256  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "LibUint256.min" [ label = "min", color = "#f2c383", fillcolor = "#f2c383" ];
  "LibUint256.ceil" [ label = "ceil", color = "#f2c383", fillcolor = "#f2c383" ];
  "LibUint256.max" [ label = "max", color = "#f2c383", fillcolor = "#f2c383" ];
  "LibUint256.toLittleEndian64" [ label = "toLittleEndian64", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterLibBytes" {
  graph [ label = "LibBytes  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "LibBytes.slice" [ label = "slice", color = "#f2c383", fillcolor = "#f2c383" ];
  "LibBytes.SliceOverflow" [ label = "SliceOverflow" ];
  "LibBytes.SliceOutOfBounds" [ label = "SliceOutOfBounds" ];
}

subgraph "clusterLibUnstructuredStorage" {
  graph [ label = "LibUnstructuredStorage  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "LibUnstructuredStorage.getStorageUint256" [ label = "getStorageUint256", color = "#f2c383", fillcolor = "#f2c383" ];
  "LibUnstructuredStorage.setStorageUint256" [ label = "setStorageUint256", color = "#f2c383", fillcolor = "#f2c383" ];
  "LibUnstructuredStorage.getStorageBool" [ label = "getStorageBool", color = "#f2c383", fillcolor = "#f2c383" ];
  "LibUnstructuredStorage.getStorageAddress" [ label = "getStorageAddress" ];
  "LibUnstructuredStorage.getStorageBytes32" [ label = "getStorageBytes32" ];
  "LibUnstructuredStorage.setStorageBool" [ label = "setStorageBool", color = "#f2c383", fillcolor = "#f2c383" ];
  "LibUnstructuredStorage.setStorageAddress" [ label = "setStorageAddress" ];
  "LibUnstructuredStorage.setStorageBytes32" [ label = "setStorageBytes32" ];
}

subgraph "clusterLibAdministrable" {
  graph [ label = "LibAdministrable  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "LibAdministrable._getAdmin" [ label = "_getAdmin", color = "#f2c383", fillcolor = "#f2c383" ];
  "LibAdministrable._getPendingAdmin" [ label = "_getPendingAdmin", color = "#f2c383", fillcolor = "#f2c383" ];
  "LibAdministrable._setAdmin" [ label = "_setAdmin", color = "#f2c383", fillcolor = "#f2c383" ];
  "LibAdministrable._setPendingAdmin" [ label = "_setPendingAdmin", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterLibErrors" {
  graph [ label = "LibErrors  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "LibErrors.Unauthorized" [ label = "Unauthorized" ];
  "LibErrors.InvalidCall" [ label = "InvalidCall" ];
  "LibErrors.InvalidArgument" [ label = "InvalidArgument" ];
  "LibErrors.InvalidZeroAddress" [ label = "InvalidZeroAddress" ];
  "LibErrors.InvalidEmptyString" [ label = "InvalidEmptyString" ];
  "LibErrors.InvalidFee" [ label = "InvalidFee" ];
}

subgraph "clusterLibBasisPoints" {
  graph [ label = "LibBasisPoints  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
}

subgraph "clusterBalanceForCoverage" {
  graph [ label = "BalanceForCoverage  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "BalanceForCoverage.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "BalanceForCoverage.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterLibAllowlistMasks" {
  graph [ label = "LibAllowlistMasks  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
}

subgraph "clusterLibSanitize" {
  graph [ label = "LibSanitize  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "LibSanitize._notZeroAddress" [ label = "_notZeroAddress", color = "#f2c383", fillcolor = "#f2c383" ];
  "LibSanitize._notEmptyString" [ label = "_notEmptyString", color = "#f2c383", fillcolor = "#f2c383" ];
  "LibSanitize._validFee" [ label = "_validFee", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterWithdrawalStack" {
  graph [ label = "WithdrawalStack  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "WithdrawalStack.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "WithdrawalStack.WithdrawalEvent" [ label = "WithdrawalEvent" ];
}

subgraph "clusterRedeemQueue" {
  graph [ label = "RedeemQueue  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "RedeemQueue.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "RedeemQueue.RedeemRequest" [ label = "RedeemRequest" ];
}

subgraph "clusterRedeemDemand" {
  graph [ label = "RedeemDemand  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "RedeemDemand.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "RedeemDemand.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterBufferedExceedingEth" {
  graph [ label = "BufferedExceedingEth  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "BufferedExceedingEth.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "BufferedExceedingEth.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterAllowerAddress" {
  graph [ label = "AllowerAddress  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "AllowerAddress.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "AllowerAddress.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterDenierAddress" {
  graph [ label = "DenierAddress  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "DenierAddress.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "DenierAddress.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterAllowlist" {
  graph [ label = "Allowlist  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "Allowlist.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "Allowlist.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterOperatorsV1" {
  graph [ label = "OperatorsV1  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "OperatorsV1.getCount" [ label = "getCount", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsV1.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsV1.getAllActive" [ label = "getAllActive", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsV1.getAllFundable" [ label = "getAllFundable", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsV1.push" [ label = "push", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsV1.setKeys" [ label = "setKeys", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsV1._hasFundableKeys" [ label = "_hasFundableKeys" ];
  "OperatorsV1.OperatorNotFound" [ label = "OperatorNotFound" ];
}

subgraph "clusterOperatorsV2" {
  graph [ label = "OperatorsV2  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "OperatorsV2.Operator" [ label = "Operator" ];
  "OperatorsV2.getCount" [ label = "getCount", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsV2.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsV2.getStoppedValidators" [ label = "getStoppedValidators", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsV2.getAllActive" [ label = "getAllActive", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsV2.setKeys" [ label = "setKeys", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsV2.getAll" [ label = "getAll", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsV2.setRawStoppedValidators" [ label = "setRawStoppedValidators", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsV2._getStoppedValidatorCountAtIndex" [ label = "_getStoppedValidatorCountAtIndex", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsV2.getAllFundable" [ label = "getAllFundable", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsV2.getAllExitable" [ label = "getAllExitable", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsV2.push" [ label = "push", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsV2._hasFundableKeys" [ label = "_hasFundableKeys" ];
  "OperatorsV2._hasExitableKeys" [ label = "_hasExitableKeys" ];
  "OperatorsV2.OperatorNotFound" [ label = "OperatorNotFound" ];
}

subgraph "clusterCurrentValidatorExitsDemand" {
  graph [ label = "CurrentValidatorExitsDemand  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "CurrentValidatorExitsDemand.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "CurrentValidatorExitsDemand.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterTotalValidatorExitsRequested" {
  graph [ label = "TotalValidatorExitsRequested  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "TotalValidatorExitsRequested.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "TotalValidatorExitsRequested.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterValidatorKeys" {
  graph [ label = "ValidatorKeys  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "ValidatorKeys.getKeys" [ label = "getKeys", color = "#f2c383", fillcolor = "#f2c383" ];
  "ValidatorKeys.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "ValidatorKeys.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "ValidatorKeys.getRaw" [ label = "getRaw", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterApprovalsPerOwner" {
  graph [ label = "ApprovalsPerOwner  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "ApprovalsPerOwner.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "ApprovalsPerOwner.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterAdministratorAddress" {
  graph [ label = "AdministratorAddress  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "AdministratorAddress.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "AdministratorAddress.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterVersion" {
  graph [ label = "Version  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "Version.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "Version.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterRiverAddress" {
  graph [ label = "RiverAddress  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "RiverAddress.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "RiverAddress.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterPendingAdministratorAddress" {
  graph [ label = "PendingAdministratorAddress  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "PendingAdministratorAddress.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "PendingAdministratorAddress.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterReportsVariants" {
  graph [ label = "ReportsVariants  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "ReportsVariants.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "ReportsVariants.ReportVariantDetails" [ label = "ReportVariantDetails" ];
  "ReportsVariants.clear" [ label = "clear", color = "#f2c383", fillcolor = "#f2c383" ];
  "ReportsVariants.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "ReportsVariants.push" [ label = "push", color = "#f2c383", fillcolor = "#f2c383" ];
  "ReportsVariants.indexOfReport" [ label = "indexOfReport", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterELFeeRecipientAddress" {
  graph [ label = "ELFeeRecipientAddress  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "ELFeeRecipientAddress.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "ELFeeRecipientAddress.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterSharesPerOwner" {
  graph [ label = "SharesPerOwner  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "SharesPerOwner.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "SharesPerOwner.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterLastOracleRoundId" {
  graph [ label = "LastOracleRoundId  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "LastOracleRoundId.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "LastOracleRoundId.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterBalanceToDeposit" {
  graph [ label = "BalanceToDeposit  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "BalanceToDeposit.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "BalanceToDeposit.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterLastConsensusLayerReport" {
  graph [ label = "LastConsensusLayerReport  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "LastConsensusLayerReport.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "LastConsensusLayerReport.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterOracleAddress" {
  graph [ label = "OracleAddress  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "OracleAddress.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "OracleAddress.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterRedeemManagerAddress" {
  graph [ label = "RedeemManagerAddress  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "RedeemManagerAddress.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "RedeemManagerAddress.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterGlobalFee" {
  graph [ label = "GlobalFee  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "GlobalFee.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "GlobalFee.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterCLValidatorCount" {
  graph [ label = "CLValidatorCount  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "CLValidatorCount.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "CLValidatorCount.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterCommittedBalance" {
  graph [ label = "CommittedBalance  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "CommittedBalance.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "CommittedBalance.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterCoverageFundAddress" {
  graph [ label = "CoverageFundAddress  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "CoverageFundAddress.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "CoverageFundAddress.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterCLValidatorTotalBalance" {
  graph [ label = "CLValidatorTotalBalance  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "CLValidatorTotalBalance.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "CLValidatorTotalBalance.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterMetadataURI" {
  graph [ label = "MetadataURI  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "MetadataURI.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "MetadataURI.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterDailyCommittableLimits" {
  graph [ label = "DailyCommittableLimits  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "DailyCommittableLimits.DailyCommittableLimitsStruct" [ label = "DailyCommittableLimitsStruct" ];
  "DailyCommittableLimits.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "DailyCommittableLimits.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterCollectorAddress" {
  graph [ label = "CollectorAddress  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "CollectorAddress.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "CollectorAddress.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterAllowlistAddress" {
  graph [ label = "AllowlistAddress  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "AllowlistAddress.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "AllowlistAddress.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterLastEpochId" {
  graph [ label = "LastEpochId  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "LastEpochId.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "LastEpochId.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterReportBounds" {
  graph [ label = "ReportBounds  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "ReportBounds.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "ReportBounds.ReportBoundsStruct" [ label = "ReportBoundsStruct" ];
  "ReportBounds.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterCLSpec" {
  graph [ label = "CLSpec  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "CLSpec.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "CLSpec.CLSpecStruct" [ label = "CLSpecStruct" ];
  "CLSpec.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterWithdrawalCredentials" {
  graph [ label = "WithdrawalCredentials  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "WithdrawalCredentials.getAddress" [ label = "getAddress", color = "#f2c383", fillcolor = "#f2c383" ];
  "WithdrawalCredentials.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "WithdrawalCredentials.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterDepositedValidatorCount" {
  graph [ label = "DepositedValidatorCount  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "DepositedValidatorCount.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "DepositedValidatorCount.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterOperatorsRegistryAddress" {
  graph [ label = "OperatorsRegistryAddress  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "OperatorsRegistryAddress.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "OperatorsRegistryAddress.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterReportsPositions" {
  graph [ label = "ReportsPositions  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "ReportsPositions.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "ReportsPositions.getRaw" [ label = "getRaw", color = "#f2c383", fillcolor = "#f2c383" ];
  "ReportsPositions.register" [ label = "register", color = "#f2c383", fillcolor = "#f2c383" ];
  "ReportsPositions.clear" [ label = "clear", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterDepositContractAddress" {
  graph [ label = "DepositContractAddress  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "DepositContractAddress.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "DepositContractAddress.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterShares" {
  graph [ label = "Shares  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "Shares.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "Shares.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterBalanceToRedeem" {
  graph [ label = "BalanceToRedeem  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "BalanceToRedeem.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "BalanceToRedeem.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterIgnoreGlobalUnlockSchedule" {
  graph [ label = "IgnoreGlobalUnlockSchedule  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "IgnoreGlobalUnlockSchedule.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "IgnoreGlobalUnlockSchedule.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterQuorum" {
  graph [ label = "Quorum  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "Quorum.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "Quorum.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterOracleMembers" {
  graph [ label = "OracleMembers  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "OracleMembers.indexOf" [ label = "indexOf", color = "#f2c383", fillcolor = "#f2c383" ];
  "OracleMembers.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "OracleMembers.deleteItem" [ label = "deleteItem", color = "#f2c383", fillcolor = "#f2c383" ];
  "OracleMembers.set" [ label = "set", color = "#f2c383", fillcolor = "#f2c383" ];
  "OracleMembers.push" [ label = "push", color = "#f2c383", fillcolor = "#f2c383" ];
}

subgraph "clusterVestingSchedulesV1" {
  graph [ label = "VestingSchedulesV1  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "VestingSchedulesV1.getCount" [ label = "getCount", color = "#f2c383", fillcolor = "#f2c383" ];
  "VestingSchedulesV1.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "VestingSchedulesV1.push" [ label = "push", color = "#f2c383", fillcolor = "#f2c383" ];
  "VestingSchedulesV1.VestingScheduleNotFound" [ label = "VestingScheduleNotFound" ];
}

subgraph "clusterVestingSchedulesV2" {
  graph [ label = "VestingSchedulesV2  (lib)", color = "#445773", fontcolor = "#f0f0f0", style = "rounded", bgcolor = "#445773" ];
  "VestingSchedulesV2.get" [ label = "get", color = "#f2c383", fillcolor = "#f2c383" ];
  "VestingSchedulesV2.getCount" [ label = "getCount", color = "#f2c383", fillcolor = "#f2c383" ];
  "VestingSchedulesV2.migrateVestingScheduleFromV1" [ label = "migrateVestingScheduleFromV1", color = "#f2c383", fillcolor = "#f2c383" ];
  "VestingSchedulesV2.VestingSchedule" [ label = "VestingSchedule" ];
  "VestingSchedulesV2.push" [ label = "push" ];
  "VestingSchedulesV2.VestingScheduleNotFound" [ label = "VestingScheduleNotFound" ];
}

subgraph "clusterStorageSlot" {
  graph [ label = "StorageSlot", color = "#e8726d", fontcolor = "#f0f0f0", style = "rounded,dashed", bgcolor = "#3b4b63" ];
  "StorageSlot.getBooleanSlot" [ label = "getBooleanSlot" ];
}

subgraph "clusterTransparentUpgradeableProxy" {
  graph [ label = "TransparentUpgradeableProxy", color = "#e8726d", fontcolor = "#f0f0f0", style = "rounded,dashed", bgcolor = "#3b4b63" ];
  "TransparentUpgradeableProxy._beforeFallback" [ label = "_beforeFallback" ];
}

subgraph "clusterbytes" {
  graph [ label = "bytes", color = "#e8726d", fontcolor = "#f0f0f0", style = "rounded,dashed", bgcolor = "#3b4b63" ];
  "bytes.concat" [ label = "concat" ];
}

  "TUPProxy.paused";
  "StorageSlot.getBooleanSlot";
  "TUPProxy.pause";
  "TUPProxy.unpause";
  "TUPProxy._beforeFallback";
  "TransparentUpgradeableProxy._beforeFallback";
  "TUPProxy.CallWhenPaused";
  "RedeemManagerV1.onlyRiver";
  "RiverAddress.get";
  "LibErrors.Unauthorized";
  "RedeemManagerV1.onlyRedeemerOrRiver";
  "RedeemManagerV1._castedRiver";
  "IRiverV1.getAllowlist";
  "RedeemManagerV1.onlyRedeemer";
  "RedeemManagerV1.initializeRedeemManagerV1";
  "RiverAddress.set";
  "RedeemManagerV1.getRiver";
  "RedeemManagerV1.getRedeemRequestCount";
  "RedeemQueue.get";
  "RedeemManagerV1.getRedeemRequestDetails";
  "RedeemManagerV1.getWithdrawalEventCount";
  "WithdrawalStack.get";
  "RedeemManagerV1.getWithdrawalEventDetails";
  "RedeemManagerV1.getBufferedExceedingEth";
  "BufferedExceedingEth.get";
  "RedeemManagerV1.getRedeemDemand";
  "RedeemDemand.get";
  "RedeemManagerV1.resolveRedeemRequests";
  "RedeemManagerV1._resolveRedeemRequestId";
  "RedeemManagerV1.requestRedeem";
  "RedeemManagerV1._requestRedeem";
  "RedeemManagerV1.claimRedeemRequests";
  "RedeemManagerV1._claimRedeemRequests";
  "RedeemManagerV1.type";
  "RedeemManagerV1.reportWithdraw";
  "RedeemManagerV1.WithdrawalExceedsRedeemDemand";
  "WithdrawalStack.WithdrawalEvent";
  "RedeemManagerV1._setRedeemDemand";
  "RedeemManagerV1.pullExceedingEth";
  "LibUint256.min";
  "BufferedExceedingEth.set";
  "RedeemManagerV1.payable";
  "RedeemManagerV1._performDichotomicResolution";
  "RedeemManagerV1._isMatch";
  "LibSanitize._notZeroAddress";
  "RedeemManagerV1.InvalidZeroAmount";
  "RedeemManagerV1.TransferError";
  "RedeemQueue.RedeemRequest";
  "RedeemManagerV1._saveRedeemRequest";
  "RedeemManagerV1._claimRedeemRequest";
  "RedeemManagerV1.IncompatibleArrayLengths";
  "RedeemManagerV1.RedeemRequestOutOfBounds";
  "RedeemManagerV1.WithdrawalEventOutOfBounds";
  "RedeemManagerV1.RedeemRequestAlreadyClaimed";
  "RedeemManagerV1.DoesNotMatch";
  "RedeemManagerV1.ClaimRedeemFailed";
  "RedeemDemand.set";
  "RiverV1.initRiverV1";
  "RiverV1._setAdmin";
  "CollectorAddress.set";
  "GlobalFee.set";
  "ELFeeRecipientAddress.set";
  "AllowlistAddress.set";
  "OperatorsRegistryAddress.set";
  "ConsensusLayerDepositManagerV1.initConsensusLayerDepositManagerV1";
  "OracleManagerV1.initOracleManagerV1";
  "RiverV1.initRiverV1_1";
  "RedeemManagerAddress.set";
  "RiverV1._setDailyCommittableLimits";
  "DailyCommittableLimits.DailyCommittableLimitsStruct";
  "RiverV1.initOracleManagerV1_1";
  "RiverV1._approve";
  "RiverV1.type";
  "RiverV1.initRiverV1_2";
  "CommittedBalance.get";
  "RiverV1._setCommittedBalance";
  "RiverV1._setBalanceToDeposit";
  "BalanceToDeposit.get";
  "RiverV1.getGlobalFee";
  "GlobalFee.get";
  "AllowlistAddress.get";
  "RiverV1.getCollector";
  "CollectorAddress.get";
  "RiverV1.getELFeeRecipient";
  "ELFeeRecipientAddress.get";
  "RiverV1.getCoverageFund";
  "CoverageFundAddress.get";
  "RiverV1.getRedeemManager";
  "RedeemManagerAddress.get";
  "RiverV1.getMetadataURI";
  "MetadataURI.get";
  "RiverV1.getDailyCommittableLimits";
  "DailyCommittableLimits.get";
  "RiverV1.setDailyCommittableLimits";
  "RiverV1.getBalanceToRedeem";
  "BalanceToRedeem.get";
  "RiverV1.resolveRedeemRequests";
  "RiverV1.requestRedeem";
  "RiverV1._transfer";
  "RiverV1.claimRedeemRequests";
  "RiverV1.setGlobalFee";
  "RiverV1.setAllowlist";
  "RiverV1.setCollector";
  "RiverV1.setELFeeRecipient";
  "RiverV1.setCoverageFund";
  "CoverageFundAddress.set";
  "RiverV1.setMetadataURI";
  "LibSanitize._notEmptyString";
  "MetadataURI.set";
  "RiverV1.getOperatorsRegistry";
  "OperatorsRegistryAddress.get";
  "RiverV1.sendELFees";
  "RiverV1.sendCLFunds";
  "WithdrawalCredentials.getAddress";
  "RiverV1.sendCoverageFunds";
  "RiverV1.sendRedeemManagerExceedingFunds";
  "RiverV1._getRiverAdmin";
  "Administrable._getAdmin";
  "RiverV1._onTransfer";
  "IAllowlistV1.isDenied";
  "RiverV1.Denied";
  "RiverV1._onDeposit";
  "SharesManagerV1._mintShares";
  "IAllowlistV1.onlyAllowed";
  "RiverV1._getNextValidators";
  "RiverV1._pullELFees";
  "RiverV1.payable";
  "RiverV1._pullCoverageFunds";
  "RiverV1._onEarnings";
  "RiverV1._totalSupply";
  "RiverV1.ZeroMintedShares";
  "RiverV1._assetBalance";
  "RiverV1._mintRawShares";
  "LastConsensusLayerReport.get";
  "DepositedValidatorCount.get";
  "DailyCommittableLimits.set";
  "BalanceToDeposit.set";
  "RiverV1._setBalanceToRedeem";
  "BalanceToRedeem.set";
  "CommittedBalance.set";
  "RiverV1._pullCLFunds";
  "RiverV1.InvalidPulledClFundsAmount";
  "RiverV1._pullRedeemManagerExceedingEth";
  "RiverV1._reportWithdrawToRedeemManager";
  "IRedeemManagerV1.getRedeemDemand";
  "RiverV1._balanceFromShares";
  "RiverV1._sharesFromBalance";
  "RiverV1._burnRawShares";
  "RiverV1._requestExitsBasedOnRedeemDemandAfterRebalancings";
  "IOperatorsRegistryV1.getStoppedAndRequestedExitCounts";
  "LibUint256.ceil";
  "IOperatorsRegistryV1.demandValidatorExits";
  "RiverV1._skimExcessBalanceToRedeem";
  "RiverV1._commitBalanceToDeposit";
  "LibUint256.max";
  "Administrable.onlyAdmin";
  "LibAdministrable._getAdmin";
  "Administrable.onlyPendingAdmin";
  "LibAdministrable._getPendingAdmin";
  "Administrable.getAdmin";
  "Administrable.getPendingAdmin";
  "Administrable.proposeAdmin";
  "Administrable._setPendingAdmin";
  "Administrable.acceptAdmin";
  "Administrable._setAdmin";
  "LibAdministrable._setAdmin";
  "LibAdministrable._setPendingAdmin";
  "TlcMigration.migrate";
  "VestingSchedulesV2.get";
  "IgnoreGlobalUnlockSchedule.set";
  "TlcMigration.CliffTooLong";
  "TlcMigration.WrongEnd";
  "TlcMigration.WrongUnlockDate";
  "OracleV1.onlyAdminOrMember";
  "OracleV1.initOracleV1";
  "CLSpec.set";
  "CLSpec.CLSpecStruct";
  "ReportBounds.set";
  "ReportBounds.ReportBoundsStruct";
  "Quorum.set";
  "OracleV1.initOracleV1_1";
  "OracleV1._clearReports";
  "OracleV1.getRiver";
  "OracleV1.getMemberReportStatus";
  "OracleMembers.indexOf";
  "ReportsPositions.get";
  "OracleV1.getGlobalReportStatus";
  "ReportsPositions.getRaw";
  "OracleV1.getReportVariantsCount";
  "ReportsVariants.get";
  "OracleV1.getReportVariantDetails";
  "OracleV1.ReportIndexOutOfBounds";
  "OracleV1.getQuorum";
  "Quorum.get";
  "OracleV1.getOracleMembers";
  "OracleMembers.get";
  "OracleV1.isMember";
  "OracleV1.getLastReportedEpochId";
  "LastEpochId.get";
  "OracleV1.addMember";
  "OracleV1.AddressAlreadyInUse";
  "OracleV1._clearReportsAndSetQuorum";
  "OracleV1.removeMember";
  "LibErrors.InvalidCall";
  "OracleMembers.deleteItem";
  "OracleV1.setMember";
  "OracleMembers.set";
  "OracleV1.setQuorum";
  "LibErrors.InvalidArgument";
  "OracleV1.reportConsensusLayerData";
  "OracleV1.EpochTooOld";
  "OracleV1.payable";
  "IRiverV1.isValidEpoch";
  "OracleV1.InvalidEpoch";
  "LastEpochId.set";
  "OracleV1.AlreadyReported";
  "ReportsPositions.register";
  "OracleV1._reportChecksum";
  "OracleV1._getReportVariantIndexAndVotes";
  "IRiverV1.setConsensusLayerData";
  "ReportsVariants.ReportVariantDetails";
  "ReportsVariants.clear";
  "ReportsPositions.clear";
  "OracleV1._river";
  "WithdrawV1.onlyRiver";
  "WithdrawV1.initializeWithdrawV1";
  "WithdrawV1._setRiver";
  "WithdrawV1.getRiver";
  "WithdrawV1.pullEth";
  "WithdrawV1.payable";
  "AllowlistV1.initAllowlistV1";
  "AllowerAddress.set";
  "AllowlistV1.initAllowlistV1_1";
  "DenierAddress.set";
  "AllowlistV1.getAllower";
  "AllowerAddress.get";
  "AllowlistV1.getDenier";
  "DenierAddress.get";
  "AllowlistV1.isAllowed";
  "Allowlist.get";
  "AllowlistV1.hasPermission";
  "AllowlistV1.getPermissions";
  "AllowlistV1.Denied";
  "AllowlistV1.setAllower";
  "AllowlistV1.setDenier";
  "AllowlistV1.setAllowPermissions";
  "AllowlistV1.InvalidCount";
  "AllowlistV1.MismatchedArrayLengths";
  "AllowlistV1.AttemptToRemoveDenyPermission";
  "AllowlistV1.AttemptToSetDenyPermission";
  "Allowlist.set";
  "AllowlistV1.setDenyPermissions";
  "CoverageFundV1.initCoverageFundV1";
  "CoverageFundV1.pullCoverageFunds";
  "BalanceForCoverage.get";
  "BalanceForCoverage.set";
  "CoverageFundV1.payable";
  "CoverageFundV1.donate";
  "CoverageFundV1.EmptyDonation";
  "CoverageFundV1.<Receive Ether>";
  "CoverageFundV1.InvalidCall";
  "CoverageFundV1.<Fallback>";
  "Firewall.<Constructor>";
  "Firewall.onlyAdminOrExecutor";
  "Firewall.setExecutor";
  "Firewall.<Fallback>";
  "Firewall._fallback";
  "Firewall.<Receive Ether>";
  "Firewall._checkCallerRole";
  "Firewall._forward";
  "WLSETHV1.isNotNull";
  "WLSETHV1.NullTransfer";
  "WLSETHV1.hasFunds";
  "WLSETHV1._balanceOf";
  "WLSETHV1.BalanceTooLow";
  "WLSETHV1.initWLSETHV1";
  "WLSETHV1.totalSupply";
  "WLSETHV1.payable";
  "WLSETHV1.balanceOf";
  "WLSETHV1.sharesOf";
  "BalanceOf.get";
  "WLSETHV1.allowance";
  "ApprovalsPerOwner.get";
  "WLSETHV1.transfer";
  "WLSETHV1.UnauthorizedTransfer";
  "WLSETHV1._transfer";
  "WLSETHV1.transferFrom";
  "WLSETHV1._spendAllowance";
  "WLSETHV1.approve";
  "WLSETHV1._approve";
  "WLSETHV1.increaseAllowance";
  "WLSETHV1.decreaseAllowance";
  "WLSETHV1.mint";
  "BalanceOf.set";
  "IRiverV1.transferFrom";
  "WLSETHV1.TokenTransferError";
  "IRiverV1.underlyingBalanceFromShares";
  "WLSETHV1.burn";
  "IRiverV1.transfer";
  "WLSETHV1.AllowanceTooLow";
  "WLSETHV1.type";
  "ApprovalsPerOwner.set";
  "ELFeeRecipientV1.initELFeeRecipientV1";
  "ELFeeRecipientV1.pullELFees";
  "ELFeeRecipientV1.payable";
  "ELFeeRecipientV1.<Fallback>";
  "ELFeeRecipientV1.InvalidCall";
  "OperatorsRegistryV1.initOperatorsRegistryV1";
  "OperatorsRegistryV1._migrateOperators_V1_1";
  "OperatorsV1.getCount";
  "OperatorsV1.get";
  "OperatorsV2.Operator";
  "OperatorsRegistryV1.forceFundedValidatorKeysEventEmission";
  "OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.get";
  "OperatorsRegistryV1.type";
  "OperatorsRegistryV1.FundedKeyEventMigrationComplete";
  "OperatorsV2.getCount";
  "OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.set";
  "OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.get";
  "OperatorsV2.get";
  "ValidatorKeys.getKeys";
  "OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.set";
  "OperatorsRegistryV1.initOperatorsRegistryV1_1";
  "OperatorsRegistryV1.onlyRiver";
  "OperatorsRegistryV1.onlyOperatorOrAdmin";
  "OperatorsRegistryV1.InactiveOperator";
  "OperatorsRegistryV1.getRiver";
  "OperatorsRegistryV1.getOperator";
  "OperatorsRegistryV1.getOperatorStoppedValidatorCount";
  "OperatorsRegistryV1._getStoppedValidatorsCount";
  "OperatorsRegistryV1.getTotalStoppedValidatorCount";
  "OperatorsRegistryV1._getTotalStoppedValidatorCount";
  "OperatorsRegistryV1.getTotalValidatorExitsRequested";
  "TotalValidatorExitsRequested.get";
  "OperatorsRegistryV1.getCurrentValidatorExitsDemand";
  "CurrentValidatorExitsDemand.get";
  "OperatorsRegistryV1.getOperatorCount";
  "OperatorsRegistryV1.getStoppedValidatorCountPerOperator";
  "OperatorsV2.getStoppedValidators";
  "OperatorsRegistryV1.getValidator";
  "ValidatorKeys.get";
  "OperatorsRegistryV1.listActiveOperators";
  "OperatorsV2.getAllActive";
  "OperatorsRegistryV1.reportStoppedValidatorCounts";
  "OperatorsRegistryV1._setStoppedValidatorCounts";
  "OperatorsRegistryV1.addOperator";
  "OperatorsRegistryV1.setOperatorAddress";
  "OperatorsRegistryV1.setOperatorName";
  "OperatorsRegistryV1.setOperatorStatus";
  "OperatorsRegistryV1.setOperatorLimits";
  "OperatorsRegistryV1.InvalidArrayLengths";
  "OperatorsRegistryV1.InvalidEmptyArray";
  "OperatorsRegistryV1.UnorderedOperatorList";
  "OperatorsRegistryV1.OperatorLimitTooHigh";
  "OperatorsRegistryV1.OperatorLimitTooLow";
  "OperatorsRegistryV1.addValidators";
  "OperatorsRegistryV1.InvalidKeyCount";
  "OperatorsRegistryV1.InvalidKeysLength";
  "LibBytes.slice";
  "ValidatorKeys.set";
  "OperatorsV2.setKeys";
  "OperatorsRegistryV1.removeValidators";
  "OperatorsRegistryV1.InvalidIndexOutOfBounds";
  "OperatorsRegistryV1.InvalidFundedKeyDeletionAttempt";
  "OperatorsRegistryV1.InvalidUnsortedIndexes";
  "ValidatorKeys.getRaw";
  "OperatorsRegistryV1.pickNextValidatorsToDeposit";
  "OperatorsRegistryV1._pickNextValidatorsToDepositFromActiveOperators";
  "OperatorsRegistryV1.requestValidatorExits";
  "OperatorsRegistryV1.NoExitRequestsToPerform";
  "OperatorsRegistryV1._pickNextValidatorsToExitFromActiveOperators";
  "OperatorsRegistryV1._setCurrentValidatorExitsDemand";
  "CurrentValidatorExitsDemand.set";
  "OperatorsRegistryV1.InvalidEmptyStoppedValidatorCountsArray";
  "OperatorsV2.getAll";
  "OperatorsRegistryV1.StoppedValidatorCountsTooHigh";
  "OperatorsRegistryV1.StoppedValidatorCountArrayShrinking";
  "OperatorsRegistryV1.StoppedValidatorCountsDecreased";
  "OperatorsRegistryV1.StoppedValidatorCountAboveFundedCount";
  "OperatorsRegistryV1._setTotalValidatorExitsRequested";
  "OperatorsRegistryV1.InvalidStoppedValidatorCountsSum";
  "OperatorsV2.setRawStoppedValidators";
  "OperatorsV2._getStoppedValidatorCountAtIndex";
  "OperatorsRegistryV1._getActiveValidatorCountForDeposits";
  "OperatorsV2.getAllFundable";
  "OperatorsRegistryV1._hasFundableKeys";
  "OperatorsRegistryV1._concatenateByteArrays";
  "OperatorsV2.getAllExitable";
  "OperatorsRegistryV1._getActiveValidatorCountForExitRequests";
  "TotalValidatorExitsRequested.set";
  "TLCV1.<Constructor>";
  "TLCV1._disableInitializers";
  "TLCV1.initTLCV1";
  "TLCV1.__ERC20Permit_init";
  "TLCV1.__ERC20_init";
  "TLCV1._mint";
  "TLCV1.migrateVestingSchedules";
  "ERC20VestableVotesUpgradeableV1.migrateVestingSchedulesFromV1ToV2";
  "Initializable.<Constructor>";
  "Version.set";
  "Initializable.type";
  "Initializable.init";
  "Version.get";
  "Initializable.InvalidInitialization";
  "LibUnstructuredStorage.getStorageUint256";
  "LibUnstructuredStorage.setStorageUint256";
  "SharesManagerV1.transferAllowed";
  "SharesManagerV1._onTransfer";
  "SharesManagerV1.isNotZero";
  "SharesManagerV1.NullTransfer";
  "SharesManagerV1.hasFunds";
  "SharesManagerV1._balanceOf";
  "SharesManagerV1.BalanceTooLow";
  "SharesManagerV1.totalSupply";
  "SharesManagerV1._totalSupply";
  "SharesManagerV1.totalUnderlyingSupply";
  "SharesManagerV1._assetBalance";
  "SharesManagerV1.balanceOf";
  "SharesManagerV1.balanceOfUnderlying";
  "SharesManagerV1._balanceFromShares";
  "SharesPerOwner.get";
  "SharesManagerV1.underlyingBalanceFromShares";
  "SharesManagerV1.sharesFromUnderlyingBalance";
  "SharesManagerV1._sharesFromBalance";
  "SharesManagerV1.allowance";
  "SharesManagerV1.transfer";
  "SharesManagerV1.UnauthorizedTransfer";
  "SharesManagerV1._transfer";
  "SharesManagerV1.transferFrom";
  "SharesManagerV1._spendAllowance";
  "SharesManagerV1.approve";
  "SharesManagerV1._approve";
  "SharesManagerV1.increaseAllowance";
  "SharesManagerV1.decreaseAllowance";
  "SharesManagerV1.AllowanceTooLow";
  "SharesManagerV1.type";
  "SharesManagerV1.Approval";
  "Shares.get";
  "SharesPerOwner.set";
  "SharesManagerV1.Transfer";
  "SharesManagerV1._mintRawShares";
  "SharesManagerV1._setTotalSupply";
  "SharesManagerV1._burnRawShares";
  "Shares.set";
  "DepositContractAddress.set";
  "WithdrawalCredentials.set";
  "ConsensusLayerDepositManagerV1.getCommittedBalance";
  "ConsensusLayerDepositManagerV1.getBalanceToDeposit";
  "ConsensusLayerDepositManagerV1.getWithdrawalCredentials";
  "WithdrawalCredentials.get";
  "ConsensusLayerDepositManagerV1.getDepositedValidatorCount";
  "ConsensusLayerDepositManagerV1.depositToConsensusLayer";
  "ConsensusLayerDepositManagerV1.NotEnoughFunds";
  "ConsensusLayerDepositManagerV1._getNextValidators";
  "ConsensusLayerDepositManagerV1.NoAvailableValidatorKeys";
  "ConsensusLayerDepositManagerV1.InvalidPublicKeyCount";
  "ConsensusLayerDepositManagerV1.InvalidWithdrawalCredentials";
  "ConsensusLayerDepositManagerV1._depositValidator";
  "ConsensusLayerDepositManagerV1._setCommittedBalance";
  "DepositedValidatorCount.set";
  "ConsensusLayerDepositManagerV1.InconsistentPublicKeys";
  "ConsensusLayerDepositManagerV1.InconsistentSignatures";
  "bytes.concat";
  "LibUint256.toLittleEndian64";
  "DepositContractAddress.get";
  "ConsensusLayerDepositManagerV1.ErrorOnDeposit";
  "VestingSchedulesV2.getCount";
  "VestingSchedulesV1.getCount";
  "VestingSchedulesV1.get";
  "ERC20VestableVotesUpgradeableV1.balanceOf";
  "ERC20VestableVotesUpgradeableV1._deterministicVestingEscrow";
  "VestingSchedulesV2.migrateVestingScheduleFromV1";
  "ERC20VestableVotesUpgradeableV1.getVestingSchedule";
  "ERC20VestableVotesUpgradeableV1.isGlobalUnlockedScheduleIgnored";
  "IgnoreGlobalUnlockSchedule.get";
  "ERC20VestableVotesUpgradeableV1.getVestingScheduleCount";
  "ERC20VestableVotesUpgradeableV1.vestingEscrow";
  "ERC20VestableVotesUpgradeableV1.computeVestingReleasableAmount";
  "ERC20VestableVotesUpgradeableV1._computeVestingReleasableAmount";
  "ERC20VestableVotesUpgradeableV1.computeVestingVestedAmount";
  "ERC20VestableVotesUpgradeableV1._computeVestedAmount";
  "ERC20VestableVotesUpgradeableV1._getCurrentTime";
  "ERC20VestableVotesUpgradeableV1.createVestingSchedule";
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule";
  "ERC20VestableVotesUpgradeableV1.revokeVestingSchedule";
  "ERC20VestableVotesUpgradeableV1._revokeVestingSchedule";
  "ERC20VestableVotesUpgradeableV1.releaseVestingSchedule";
  "ERC20VestableVotesUpgradeableV1._releaseVestingSchedule";
  "ERC20VestableVotesUpgradeableV1.delegateVestingEscrow";
  "ERC20VestableVotesUpgradeableV1._delegateVestingEscrow";
  "ERC20VestableVotesUpgradeableV1.UnsufficientVestingScheduleCreatorBalance";
  "ERC20VestableVotesUpgradeableV1.InvalidVestingScheduleParameter";
  "VestingSchedulesV2.VestingSchedule";
  "ERC20VestableVotesUpgradeableV1._transfer";
  "ERC20VestableVotesUpgradeableV1._delegate";
  "ERC20VestableVotesUpgradeableV1.VestingScheduleNotRevocableInPast";
  "ERC20VestableVotesUpgradeableV1.VestingScheduleNotRevocable";
  "ERC20VestableVotesUpgradeableV1.InvalidRevokedVestingScheduleEnd";
  "ERC20VestableVotesUpgradeableV1.ZeroReleasableAmount";
  "ERC20VestableVotesUpgradeableV1.delegates";
  "ERC20VestableVotesUpgradeableV1.VestingScheduleIsLocked";
  "ERC20VestableVotesUpgradeableV1._computeGlobalUnlocked";
  "ERC20VestableVotesUpgradeableV1.GlobalUnlockUnderlfow";
  "UserDepositManagerV1.deposit";
  "UserDepositManagerV1._deposit";
  "UserDepositManagerV1.depositAndTransfer";
  "UserDepositManagerV1.<Receive Ether>";
  "UserDepositManagerV1.<Fallback>";
  "UserDepositManagerV1.EmptyDeposit";
  "UserDepositManagerV1._setBalanceToDeposit";
  "UserDepositManagerV1._onDeposit";
  "OracleManagerV1.onlyAdmin_OMV1";
  "OracleManagerV1._getRiverAdmin";
  "OracleAddress.set";
  "OracleManagerV1.initOracleManagerV1_1";
  "LastOracleRoundId.get";
  "CLValidatorTotalBalance.get";
  "CLValidatorCount.get";
  "LastConsensusLayerReport.set";
  "OracleManagerV1.getOracle";
  "OracleAddress.get";
  "OracleManagerV1.getCLValidatorTotalBalance";
  "OracleManagerV1.getCLValidatorCount";
  "OracleManagerV1.getExpectedEpochId";
  "CLSpec.get";
  "OracleManagerV1._currentEpoch";
  "OracleManagerV1.isValidEpoch";
  "OracleManagerV1._isValidEpoch";
  "OracleManagerV1.getLastCompletedEpochId";
  "OracleManagerV1.getCurrentEpochId";
  "OracleManagerV1.getCLSpec";
  "OracleManagerV1.getCurrentFrame";
  "OracleManagerV1.getFrameFirstEpochId";
  "OracleManagerV1.getReportBounds";
  "ReportBounds.get";
  "OracleManagerV1.getLastConsensusLayerReport";
  "OracleManagerV1.setOracle";
  "OracleManagerV1.setCLSpec";
  "OracleManagerV1.setReportBounds";
  "OracleManagerV1.setConsensusLayerData";
  "OracleManagerV1.InvalidEpoch";
  "OracleManagerV1.InvalidDecreasingValidatorsExitedBalance";
  "OracleManagerV1.InvalidDecreasingValidatorsSkimmedBalance";
  "OracleManagerV1.InvalidValidatorCountReport";
  "OracleManagerV1._timeBetweenEpochs";
  "OracleManagerV1._assetBalance";
  "OracleManagerV1._pullCLFunds";
  "OracleManagerV1._maxIncrease";
  "OracleManagerV1.TotalValidatorBalanceIncreaseOutOfBound";
  "OracleManagerV1._maxDecrease";
  "OracleManagerV1.TotalValidatorBalanceDecreaseOutOfBound";
  "OracleManagerV1._pullELFees";
  "OracleManagerV1._pullRedeemManagerExceedingEth";
  "OracleManagerV1._pullCoverageFunds";
  "OracleManagerV1._onEarnings";
  "OracleManagerV1._requestExitsBasedOnRedeemDemandAfterRebalancings";
  "OracleManagerV1._reportWithdrawToRedeemManager";
  "OracleManagerV1._skimExcessBalanceToRedeem";
  "OracleManagerV1._commitBalanceToDeposit";
  "LibBytes.SliceOverflow";
  "LibBytes.SliceOutOfBounds";
  "AdministratorAddress.get";
  "PendingAdministratorAddress.get";
  "AdministratorAddress.set";
  "PendingAdministratorAddress.set";
  "LibErrors.InvalidZeroAddress";
  "LibErrors.InvalidEmptyString";
  "LibSanitize._validFee";
  "LibErrors.InvalidFee";
  "LibUnstructuredStorage.getStorageAddress";
  "LibUnstructuredStorage.setStorageAddress";
  "OperatorsV1.OperatorNotFound";
  "OperatorsV1.getAllFundable";
  "OperatorsV1._hasFundableKeys";
  "OperatorsV1.push";
  "OperatorsV1.setKeys";
  "OperatorsV2.OperatorNotFound";
  "OperatorsV2._hasFundableKeys";
  "OperatorsV2._hasExitableKeys";
  "OperatorsV2.push";
  "LibUnstructuredStorage.getStorageBytes32";
  "LastOracleRoundId.set";
  "LibUnstructuredStorage.setStorageBytes32";
  "CLValidatorCount.set";
  "CLValidatorTotalBalance.set";
  "OracleMembers.push";
  "VestingSchedulesV1.VestingScheduleNotFound";
  "VestingSchedulesV2.VestingScheduleNotFound";
  "VestingSchedulesV2.push";
  "TUPProxy.paused" -> "StorageSlot.getBooleanSlot" [ color = "white" ];
  "TUPProxy.pause" -> "StorageSlot.getBooleanSlot" [ color = "white" ];
  "TUPProxy.unpause" -> "StorageSlot.getBooleanSlot" [ color = "white" ];
  "TUPProxy._beforeFallback" -> "StorageSlot.getBooleanSlot" [ color = "white" ];
  "TUPProxy._beforeFallback" -> "TransparentUpgradeableProxy._beforeFallback" [ color = "white" ];
  "TUPProxy._beforeFallback" -> "TUPProxy.CallWhenPaused" [ color = "#1bc6a6" ];
  "RedeemManagerV1.onlyRiver" -> "RiverAddress.get" [ color = "white" ];
  "RedeemManagerV1.onlyRiver" -> "LibErrors.Unauthorized" [ color = "white" ];
  "RedeemManagerV1.onlyRedeemerOrRiver" -> "RedeemManagerV1._castedRiver" [ color = "#1bc6a6" ];
  "RedeemManagerV1.onlyRedeemerOrRiver" -> "IRiverV1.getAllowlist" [ color = "white" ];
  "RedeemManagerV1.onlyRedeemer" -> "RedeemManagerV1._castedRiver" [ color = "#1bc6a6" ];
  "RedeemManagerV1.onlyRedeemer" -> "IRiverV1.getAllowlist" [ color = "white" ];
  "RedeemManagerV1.initializeRedeemManagerV1" -> "RiverAddress.set" [ color = "white" ];
  "RedeemManagerV1.getRiver" -> "RiverAddress.get" [ color = "white" ];
  "RedeemManagerV1.getRedeemRequestCount" -> "RedeemQueue.get" [ color = "white" ];
  "RedeemManagerV1.getRedeemRequestDetails" -> "RedeemQueue.get" [ color = "white" ];
  "RedeemManagerV1.getWithdrawalEventCount" -> "WithdrawalStack.get" [ color = "white" ];
  "RedeemManagerV1.getWithdrawalEventDetails" -> "WithdrawalStack.get" [ color = "white" ];
  "RedeemManagerV1.getBufferedExceedingEth" -> "BufferedExceedingEth.get" [ color = "white" ];
  "RedeemManagerV1.getRedeemDemand" -> "RedeemDemand.get" [ color = "white" ];
  "RedeemManagerV1.resolveRedeemRequests" -> "WithdrawalStack.get" [ color = "white" ];
  "RedeemManagerV1.resolveRedeemRequests" -> "RedeemManagerV1._resolveRedeemRequestId" [ color = "#1bc6a6" ];
  "RedeemManagerV1.requestRedeem" -> "RedeemManagerV1._requestRedeem" [ color = "#1bc6a6" ];
  "RedeemManagerV1.requestRedeem" -> "RedeemManagerV1._requestRedeem" [ color = "#1bc6a6" ];
  "RedeemManagerV1.claimRedeemRequests" -> "RedeemManagerV1._claimRedeemRequests" [ color = "#1bc6a6" ];
  "RedeemManagerV1.claimRedeemRequests" -> "RedeemManagerV1._claimRedeemRequests" [ color = "#1bc6a6" ];
  "RedeemManagerV1.claimRedeemRequests" -> "RedeemManagerV1.type" [ color = "#1bc6a6" ];
  "RedeemManagerV1.reportWithdraw" -> "RedeemDemand.get" [ color = "white" ];
  "RedeemManagerV1.reportWithdraw" -> "RedeemManagerV1.WithdrawalExceedsRedeemDemand" [ color = "#1bc6a6" ];
  "RedeemManagerV1.reportWithdraw" -> "WithdrawalStack.get" [ color = "white" ];
  "RedeemManagerV1.reportWithdraw" -> "WithdrawalStack.WithdrawalEvent" [ color = "white" ];
  "RedeemManagerV1.reportWithdraw" -> "RedeemManagerV1._setRedeemDemand" [ color = "#1bc6a6" ];
  "RedeemManagerV1.pullExceedingEth" -> "LibUint256.min" [ color = "white" ];
  "RedeemManagerV1.pullExceedingEth" -> "BufferedExceedingEth.get" [ color = "white" ];
  "RedeemManagerV1.pullExceedingEth" -> "BufferedExceedingEth.set" [ color = "white" ];
  "RedeemManagerV1.pullExceedingEth" -> "BufferedExceedingEth.get" [ color = "white" ];
  "RedeemManagerV1.pullExceedingEth" -> "RedeemManagerV1._castedRiver" [ color = "#1bc6a6" ];
  "RedeemManagerV1._castedRiver" -> "RedeemManagerV1.payable" [ color = "#1bc6a6" ];
  "RedeemManagerV1._castedRiver" -> "RiverAddress.get" [ color = "white" ];
  "RedeemManagerV1._performDichotomicResolution" -> "WithdrawalStack.get" [ color = "white" ];
  "RedeemManagerV1._performDichotomicResolution" -> "WithdrawalStack.get" [ color = "white" ];
  "RedeemManagerV1._performDichotomicResolution" -> "RedeemManagerV1._isMatch" [ color = "#1bc6a6" ];
  "RedeemManagerV1._performDichotomicResolution" -> "RedeemManagerV1._isMatch" [ color = "#1bc6a6" ];
  "RedeemManagerV1._performDichotomicResolution" -> "RedeemManagerV1._isMatch" [ color = "#1bc6a6" ];
  "RedeemManagerV1._resolveRedeemRequestId" -> "RedeemQueue.get" [ color = "white" ];
  "RedeemManagerV1._resolveRedeemRequestId" -> "WithdrawalStack.get" [ color = "white" ];
  "RedeemManagerV1._resolveRedeemRequestId" -> "RedeemManagerV1._performDichotomicResolution" [ color = "#1bc6a6" ];
  "RedeemManagerV1._requestRedeem" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "RedeemManagerV1._requestRedeem" -> "RedeemManagerV1.InvalidZeroAmount" [ color = "#1bc6a6" ];
  "RedeemManagerV1._requestRedeem" -> "RedeemManagerV1._castedRiver" [ color = "#1bc6a6" ];
  "RedeemManagerV1._requestRedeem" -> "RedeemManagerV1.TransferError" [ color = "#1bc6a6" ];
  "RedeemManagerV1._requestRedeem" -> "RedeemQueue.get" [ color = "white" ];
  "RedeemManagerV1._requestRedeem" -> "RedeemManagerV1._castedRiver" [ color = "#1bc6a6" ];
  "RedeemManagerV1._requestRedeem" -> "RedeemQueue.RedeemRequest" [ color = "white" ];
  "RedeemManagerV1._requestRedeem" -> "RedeemManagerV1._setRedeemDemand" [ color = "#1bc6a6" ];
  "RedeemManagerV1._requestRedeem" -> "RedeemDemand.get" [ color = "white" ];
  "RedeemManagerV1._saveRedeemRequest" -> "RedeemQueue.get" [ color = "white" ];
  "RedeemManagerV1._claimRedeemRequest" -> "LibUint256.min" [ color = "white" ];
  "RedeemManagerV1._claimRedeemRequest" -> "BufferedExceedingEth.set" [ color = "white" ];
  "RedeemManagerV1._claimRedeemRequest" -> "BufferedExceedingEth.get" [ color = "white" ];
  "RedeemManagerV1._claimRedeemRequest" -> "WithdrawalStack.get" [ color = "white" ];
  "RedeemManagerV1._claimRedeemRequest" -> "RedeemManagerV1._claimRedeemRequest" [ color = "#1bc6a6" ];
  "RedeemManagerV1._claimRedeemRequest" -> "RedeemManagerV1._saveRedeemRequest" [ color = "#1bc6a6" ];
  "RedeemManagerV1._claimRedeemRequests" -> "RedeemManagerV1.IncompatibleArrayLengths" [ color = "#1bc6a6" ];
  "RedeemManagerV1._claimRedeemRequests" -> "RedeemQueue.get" [ color = "white" ];
  "RedeemManagerV1._claimRedeemRequests" -> "WithdrawalStack.get" [ color = "white" ];
  "RedeemManagerV1._claimRedeemRequests" -> "RedeemManagerV1.RedeemRequestOutOfBounds" [ color = "#1bc6a6" ];
  "RedeemManagerV1._claimRedeemRequests" -> "RedeemManagerV1.WithdrawalEventOutOfBounds" [ color = "#1bc6a6" ];
  "RedeemManagerV1._claimRedeemRequests" -> "RedeemManagerV1.RedeemRequestAlreadyClaimed" [ color = "#1bc6a6" ];
  "RedeemManagerV1._claimRedeemRequests" -> "RedeemManagerV1._isMatch" [ color = "#1bc6a6" ];
  "RedeemManagerV1._claimRedeemRequests" -> "RedeemManagerV1.DoesNotMatch" [ color = "#1bc6a6" ];
  "RedeemManagerV1._claimRedeemRequests" -> "RedeemManagerV1._claimRedeemRequest" [ color = "#1bc6a6" ];
  "RedeemManagerV1._claimRedeemRequests" -> "RedeemManagerV1.ClaimRedeemFailed" [ color = "#1bc6a6" ];
  "RedeemManagerV1._setRedeemDemand" -> "RedeemDemand.get" [ color = "white" ];
  "RedeemManagerV1._setRedeemDemand" -> "RedeemDemand.set" [ color = "white" ];
  "RiverV1.initRiverV1" -> "RiverV1._setAdmin" [ color = "#1bc6a6" ];
  "RiverV1.initRiverV1" -> "CollectorAddress.set" [ color = "white" ];
  "RiverV1.initRiverV1" -> "GlobalFee.set" [ color = "white" ];
  "RiverV1.initRiverV1" -> "ELFeeRecipientAddress.set" [ color = "white" ];
  "RiverV1.initRiverV1" -> "AllowlistAddress.set" [ color = "white" ];
  "RiverV1.initRiverV1" -> "OperatorsRegistryAddress.set" [ color = "white" ];
  "RiverV1.initRiverV1" -> "ConsensusLayerDepositManagerV1.initConsensusLayerDepositManagerV1" [ color = "white" ];
  "RiverV1.initRiverV1" -> "OracleManagerV1.initOracleManagerV1" [ color = "white" ];
  "RiverV1.initRiverV1_1" -> "RedeemManagerAddress.set" [ color = "white" ];
  "RiverV1.initRiverV1_1" -> "RiverV1._setDailyCommittableLimits" [ color = "#1bc6a6" ];
  "RiverV1.initRiverV1_1" -> "DailyCommittableLimits.DailyCommittableLimitsStruct" [ color = "white" ];
  "RiverV1.initRiverV1_1" -> "RiverV1.initOracleManagerV1_1" [ color = "#1bc6a6" ];
  "RiverV1.initRiverV1_1" -> "RiverV1._approve" [ color = "#1bc6a6" ];
  "RiverV1.initRiverV1_1" -> "RiverV1.type" [ color = "#1bc6a6" ];
  "RiverV1.initRiverV1_2" -> "CommittedBalance.get" [ color = "white" ];
  "RiverV1.initRiverV1_2" -> "RiverV1._setCommittedBalance" [ color = "#1bc6a6" ];
  "RiverV1.initRiverV1_2" -> "CommittedBalance.get" [ color = "white" ];
  "RiverV1.initRiverV1_2" -> "RiverV1._setBalanceToDeposit" [ color = "#1bc6a6" ];
  "RiverV1.initRiverV1_2" -> "BalanceToDeposit.get" [ color = "white" ];
  "RiverV1.getGlobalFee" -> "GlobalFee.get" [ color = "white" ];
  "IRiverV1.getAllowlist" -> "AllowlistAddress.get" [ color = "white" ];
  "RiverV1.getCollector" -> "CollectorAddress.get" [ color = "white" ];
  "RiverV1.getELFeeRecipient" -> "ELFeeRecipientAddress.get" [ color = "white" ];
  "RiverV1.getCoverageFund" -> "CoverageFundAddress.get" [ color = "white" ];
  "RiverV1.getRedeemManager" -> "RedeemManagerAddress.get" [ color = "white" ];
  "RiverV1.getMetadataURI" -> "MetadataURI.get" [ color = "white" ];
  "RiverV1.getDailyCommittableLimits" -> "DailyCommittableLimits.get" [ color = "white" ];
  "RiverV1.setDailyCommittableLimits" -> "RiverV1._setDailyCommittableLimits" [ color = "#1bc6a6" ];
  "RiverV1.getBalanceToRedeem" -> "BalanceToRedeem.get" [ color = "white" ];
  "RiverV1.resolveRedeemRequests" -> "RedeemManagerAddress.get" [ color = "white" ];
  "RiverV1.requestRedeem" -> "AllowlistAddress.get" [ color = "white" ];
  "RiverV1.requestRedeem" -> "RiverV1._transfer" [ color = "#1bc6a6" ];
  "RiverV1.requestRedeem" -> "RedeemManagerAddress.get" [ color = "white" ];
  "RiverV1.claimRedeemRequests" -> "RedeemManagerAddress.get" [ color = "white" ];
  "RiverV1.claimRedeemRequests" -> "RiverV1.type" [ color = "#1bc6a6" ];
  "RiverV1.setGlobalFee" -> "GlobalFee.set" [ color = "white" ];
  "RiverV1.setAllowlist" -> "AllowlistAddress.set" [ color = "white" ];
  "RiverV1.setCollector" -> "CollectorAddress.set" [ color = "white" ];
  "RiverV1.setELFeeRecipient" -> "ELFeeRecipientAddress.set" [ color = "white" ];
  "RiverV1.setCoverageFund" -> "CoverageFundAddress.set" [ color = "white" ];
  "RiverV1.setMetadataURI" -> "LibSanitize._notEmptyString" [ color = "white" ];
  "RiverV1.setMetadataURI" -> "MetadataURI.set" [ color = "white" ];
  "RiverV1.getOperatorsRegistry" -> "OperatorsRegistryAddress.get" [ color = "white" ];
  "RiverV1.sendELFees" -> "ELFeeRecipientAddress.get" [ color = "white" ];
  "RiverV1.sendELFees" -> "LibErrors.Unauthorized" [ color = "white" ];
  "RiverV1.sendCLFunds" -> "WithdrawalCredentials.getAddress" [ color = "white" ];
  "RiverV1.sendCLFunds" -> "LibErrors.Unauthorized" [ color = "white" ];
  "RiverV1.sendCoverageFunds" -> "CoverageFundAddress.get" [ color = "white" ];
  "RiverV1.sendCoverageFunds" -> "LibErrors.Unauthorized" [ color = "white" ];
  "RiverV1.sendRedeemManagerExceedingFunds" -> "RedeemManagerAddress.get" [ color = "white" ];
  "RiverV1.sendRedeemManagerExceedingFunds" -> "LibErrors.Unauthorized" [ color = "white" ];
  "RiverV1._getRiverAdmin" -> "Administrable._getAdmin" [ color = "white" ];
  "RiverV1._onTransfer" -> "AllowlistAddress.get" [ color = "white" ];
  "RiverV1._onTransfer" -> "IAllowlistV1.isDenied" [ color = "white" ];
  "RiverV1._onTransfer" -> "RiverV1.Denied" [ color = "#1bc6a6" ];
  "RiverV1._onTransfer" -> "IAllowlistV1.isDenied" [ color = "white" ];
  "RiverV1._onTransfer" -> "RiverV1.Denied" [ color = "#1bc6a6" ];
  "RiverV1._onDeposit" -> "SharesManagerV1._mintShares" [ color = "white" ];
  "RiverV1._onDeposit" -> "AllowlistAddress.get" [ color = "white" ];
  "RiverV1._onDeposit" -> "IAllowlistV1.onlyAllowed" [ color = "white" ];
  "RiverV1._onDeposit" -> "IAllowlistV1.onlyAllowed" [ color = "white" ];
  "RiverV1._onDeposit" -> "IAllowlistV1.isDenied" [ color = "white" ];
  "RiverV1._onDeposit" -> "RiverV1.Denied" [ color = "#1bc6a6" ];
  "RiverV1._onDeposit" -> "RiverV1._transfer" [ color = "#1bc6a6" ];
  "RiverV1._getNextValidators" -> "OperatorsRegistryAddress.get" [ color = "white" ];
  "RiverV1._pullELFees" -> "ELFeeRecipientAddress.get" [ color = "white" ];
  "RiverV1._pullELFees" -> "RiverV1.payable" [ color = "#1bc6a6" ];
  "RiverV1._pullELFees" -> "RiverV1._setBalanceToDeposit" [ color = "#1bc6a6" ];
  "RiverV1._pullELFees" -> "BalanceToDeposit.get" [ color = "white" ];
  "RiverV1._pullCoverageFunds" -> "CoverageFundAddress.get" [ color = "white" ];
  "RiverV1._pullCoverageFunds" -> "RiverV1.payable" [ color = "#1bc6a6" ];
  "RiverV1._pullCoverageFunds" -> "RiverV1._setBalanceToDeposit" [ color = "#1bc6a6" ];
  "RiverV1._pullCoverageFunds" -> "BalanceToDeposit.get" [ color = "white" ];
  "RiverV1._onEarnings" -> "RiverV1._totalSupply" [ color = "#1bc6a6" ];
  "RiverV1._onEarnings" -> "RiverV1.ZeroMintedShares" [ color = "#1bc6a6" ];
  "RiverV1._onEarnings" -> "RiverV1._assetBalance" [ color = "#1bc6a6" ];
  "RiverV1._onEarnings" -> "GlobalFee.get" [ color = "white" ];
  "RiverV1._onEarnings" -> "CollectorAddress.get" [ color = "white" ];
  "RiverV1._onEarnings" -> "RiverV1._mintRawShares" [ color = "#1bc6a6" ];
  "RiverV1._onEarnings" -> "RiverV1._totalSupply" [ color = "#1bc6a6" ];
  "RiverV1._assetBalance" -> "LastConsensusLayerReport.get" [ color = "white" ];
  "RiverV1._assetBalance" -> "DepositedValidatorCount.get" [ color = "white" ];
  "RiverV1._assetBalance" -> "BalanceToDeposit.get" [ color = "white" ];
  "RiverV1._assetBalance" -> "CommittedBalance.get" [ color = "white" ];
  "RiverV1._assetBalance" -> "BalanceToRedeem.get" [ color = "white" ];
  "RiverV1._assetBalance" -> "BalanceToDeposit.get" [ color = "white" ];
  "RiverV1._assetBalance" -> "CommittedBalance.get" [ color = "white" ];
  "RiverV1._assetBalance" -> "BalanceToRedeem.get" [ color = "white" ];
  "RiverV1._setDailyCommittableLimits" -> "DailyCommittableLimits.set" [ color = "white" ];
  "RiverV1._setBalanceToDeposit" -> "BalanceToDeposit.get" [ color = "white" ];
  "RiverV1._setBalanceToDeposit" -> "BalanceToDeposit.set" [ color = "white" ];
  "RiverV1._setBalanceToRedeem" -> "BalanceToRedeem.get" [ color = "white" ];
  "RiverV1._setBalanceToRedeem" -> "BalanceToRedeem.set" [ color = "white" ];
  "RiverV1._setCommittedBalance" -> "CommittedBalance.get" [ color = "white" ];
  "RiverV1._setCommittedBalance" -> "CommittedBalance.set" [ color = "white" ];
  "RiverV1._pullCLFunds" -> "WithdrawalCredentials.getAddress" [ color = "white" ];
  "RiverV1._pullCLFunds" -> "RiverV1.InvalidPulledClFundsAmount" [ color = "#1bc6a6" ];
  "RiverV1._pullCLFunds" -> "RiverV1._setBalanceToDeposit" [ color = "#1bc6a6" ];
  "RiverV1._pullCLFunds" -> "BalanceToDeposit.get" [ color = "white" ];
  "RiverV1._pullCLFunds" -> "RiverV1._setBalanceToRedeem" [ color = "#1bc6a6" ];
  "RiverV1._pullCLFunds" -> "BalanceToRedeem.get" [ color = "white" ];
  "RiverV1._pullRedeemManagerExceedingEth" -> "RedeemManagerAddress.get" [ color = "white" ];
  "RiverV1._pullRedeemManagerExceedingEth" -> "RiverV1._setBalanceToDeposit" [ color = "#1bc6a6" ];
  "RiverV1._pullRedeemManagerExceedingEth" -> "BalanceToDeposit.get" [ color = "white" ];
  "RiverV1._reportWithdrawToRedeemManager" -> "RedeemManagerAddress.get" [ color = "white" ];
  "RiverV1._reportWithdrawToRedeemManager" -> "RiverV1._assetBalance" [ color = "#1bc6a6" ];
  "RiverV1._reportWithdrawToRedeemManager" -> "RiverV1._totalSupply" [ color = "#1bc6a6" ];
  "RiverV1._reportWithdrawToRedeemManager" -> "IRedeemManagerV1.getRedeemDemand" [ color = "white" ];
  "RiverV1._reportWithdrawToRedeemManager" -> "RiverV1._balanceFromShares" [ color = "#1bc6a6" ];
  "RiverV1._reportWithdrawToRedeemManager" -> "BalanceToRedeem.get" [ color = "white" ];
  "RiverV1._reportWithdrawToRedeemManager" -> "RiverV1._sharesFromBalance" [ color = "#1bc6a6" ];
  "RiverV1._reportWithdrawToRedeemManager" -> "RiverV1._setBalanceToRedeem" [ color = "#1bc6a6" ];
  "RiverV1._reportWithdrawToRedeemManager" -> "RiverV1._burnRawShares" [ color = "#1bc6a6" ];
  "RiverV1._requestExitsBasedOnRedeemDemandAfterRebalancings" -> "OperatorsRegistryAddress.get" [ color = "white" ];
  "RiverV1._requestExitsBasedOnRedeemDemandAfterRebalancings" -> "DepositedValidatorCount.get" [ color = "white" ];
  "RiverV1._requestExitsBasedOnRedeemDemandAfterRebalancings" -> "RiverV1._totalSupply" [ color = "#1bc6a6" ];
  "RiverV1._requestExitsBasedOnRedeemDemandAfterRebalancings" -> "BalanceToRedeem.get" [ color = "white" ];
  "RiverV1._requestExitsBasedOnRedeemDemandAfterRebalancings" -> "BalanceToDeposit.get" [ color = "white" ];
  "RiverV1._requestExitsBasedOnRedeemDemandAfterRebalancings" -> "RiverV1._balanceFromShares" [ color = "#1bc6a6" ];
  "RiverV1._requestExitsBasedOnRedeemDemandAfterRebalancings" -> "RedeemManagerAddress.get" [ color = "white" ];
  "RiverV1._requestExitsBasedOnRedeemDemandAfterRebalancings" -> "LibUint256.min" [ color = "white" ];
  "RiverV1._requestExitsBasedOnRedeemDemandAfterRebalancings" -> "RiverV1._setBalanceToRedeem" [ color = "#1bc6a6" ];
  "RiverV1._requestExitsBasedOnRedeemDemandAfterRebalancings" -> "RiverV1._setBalanceToDeposit" [ color = "#1bc6a6" ];
  "RiverV1._requestExitsBasedOnRedeemDemandAfterRebalancings" -> "OperatorsRegistryAddress.get" [ color = "white" ];
  "RiverV1._requestExitsBasedOnRedeemDemandAfterRebalancings" -> "IOperatorsRegistryV1.getStoppedAndRequestedExitCounts" [ color = "white" ];
  "RiverV1._requestExitsBasedOnRedeemDemandAfterRebalancings" -> "LibUint256.ceil" [ color = "white" ];
  "RiverV1._requestExitsBasedOnRedeemDemandAfterRebalancings" -> "IOperatorsRegistryV1.demandValidatorExits" [ color = "white" ];
  "RiverV1._requestExitsBasedOnRedeemDemandAfterRebalancings" -> "DepositedValidatorCount.get" [ color = "white" ];
  "RiverV1._skimExcessBalanceToRedeem" -> "BalanceToRedeem.get" [ color = "white" ];
  "RiverV1._skimExcessBalanceToRedeem" -> "RiverV1._setBalanceToDeposit" [ color = "#1bc6a6" ];
  "RiverV1._skimExcessBalanceToRedeem" -> "BalanceToDeposit.get" [ color = "white" ];
  "RiverV1._skimExcessBalanceToRedeem" -> "RiverV1._setBalanceToRedeem" [ color = "#1bc6a6" ];
  "RiverV1._commitBalanceToDeposit" -> "RiverV1._assetBalance" [ color = "#1bc6a6" ];
  "RiverV1._commitBalanceToDeposit" -> "BalanceToDeposit.get" [ color = "white" ];
  "RiverV1._commitBalanceToDeposit" -> "DailyCommittableLimits.get" [ color = "white" ];
  "RiverV1._commitBalanceToDeposit" -> "LibUint256.max" [ color = "white" ];
  "RiverV1._commitBalanceToDeposit" -> "LibUint256.min" [ color = "white" ];
  "RiverV1._commitBalanceToDeposit" -> "RiverV1._setCommittedBalance" [ color = "#1bc6a6" ];
  "RiverV1._commitBalanceToDeposit" -> "CommittedBalance.get" [ color = "white" ];
  "RiverV1._commitBalanceToDeposit" -> "RiverV1._setBalanceToDeposit" [ color = "#1bc6a6" ];
  "Administrable.onlyAdmin" -> "LibAdministrable._getAdmin" [ color = "white" ];
  "Administrable.onlyAdmin" -> "LibErrors.Unauthorized" [ color = "white" ];
  "Administrable.onlyPendingAdmin" -> "LibAdministrable._getPendingAdmin" [ color = "white" ];
  "Administrable.onlyPendingAdmin" -> "LibErrors.Unauthorized" [ color = "white" ];
  "Administrable.getAdmin" -> "LibAdministrable._getAdmin" [ color = "white" ];
  "Administrable.getPendingAdmin" -> "LibAdministrable._getPendingAdmin" [ color = "white" ];
  "Administrable.proposeAdmin" -> "Administrable._setPendingAdmin" [ color = "#1bc6a6" ];
  "Administrable.acceptAdmin" -> "Administrable._setAdmin" [ color = "#1bc6a6" ];
  "Administrable.acceptAdmin" -> "LibAdministrable._getPendingAdmin" [ color = "white" ];
  "Administrable.acceptAdmin" -> "Administrable._setPendingAdmin" [ color = "#1bc6a6" ];
  "Administrable._setAdmin" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "Administrable._setAdmin" -> "LibAdministrable._setAdmin" [ color = "white" ];
  "Administrable._setPendingAdmin" -> "LibAdministrable._setPendingAdmin" [ color = "white" ];
  "Administrable._getAdmin" -> "LibAdministrable._getAdmin" [ color = "white" ];
  "TlcMigration.migrate" -> "VestingSchedulesV2.get" [ color = "white" ];
  "TlcMigration.migrate" -> "IgnoreGlobalUnlockSchedule.set" [ color = "white" ];
  "TlcMigration.migrate" -> "TlcMigration.CliffTooLong" [ color = "#1bc6a6" ];
  "TlcMigration.migrate" -> "TlcMigration.WrongEnd" [ color = "#1bc6a6" ];
  "TlcMigration.migrate" -> "TlcMigration.WrongUnlockDate" [ color = "#1bc6a6" ];
  "OracleV1.onlyAdminOrMember" -> "Administrable._getAdmin" [ color = "#1bc6a6" ];
  "OracleV1.onlyAdminOrMember" -> "LibErrors.Unauthorized" [ color = "white" ];
  "OracleV1.initOracleV1" -> "Administrable._setAdmin" [ color = "#1bc6a6" ];
  "OracleV1.initOracleV1" -> "RiverAddress.set" [ color = "white" ];
  "OracleV1.initOracleV1" -> "CLSpec.set" [ color = "white" ];
  "OracleV1.initOracleV1" -> "CLSpec.CLSpecStruct" [ color = "white" ];
  "OracleV1.initOracleV1" -> "ReportBounds.set" [ color = "white" ];
  "OracleV1.initOracleV1" -> "ReportBounds.ReportBoundsStruct" [ color = "white" ];
  "OracleV1.initOracleV1" -> "Quorum.set" [ color = "white" ];
  "OracleV1.initOracleV1_1" -> "OracleV1._clearReports" [ color = "#1bc6a6" ];
  "OracleV1.getRiver" -> "RiverAddress.get" [ color = "white" ];
  "OracleV1.getMemberReportStatus" -> "OracleMembers.indexOf" [ color = "white" ];
  "OracleV1.getMemberReportStatus" -> "ReportsPositions.get" [ color = "white" ];
  "OracleV1.getGlobalReportStatus" -> "ReportsPositions.getRaw" [ color = "white" ];
  "OracleV1.getReportVariantsCount" -> "ReportsVariants.get" [ color = "white" ];
  "OracleV1.getReportVariantDetails" -> "ReportsVariants.get" [ color = "white" ];
  "OracleV1.getReportVariantDetails" -> "OracleV1.ReportIndexOutOfBounds" [ color = "#1bc6a6" ];
  "OracleV1.getReportVariantDetails" -> "ReportsVariants.get" [ color = "white" ];
  "OracleV1.getReportVariantDetails" -> "ReportsVariants.get" [ color = "white" ];
  "OracleV1.getQuorum" -> "Quorum.get" [ color = "white" ];
  "OracleV1.getOracleMembers" -> "OracleMembers.get" [ color = "white" ];
  "OracleV1.isMember" -> "OracleMembers.indexOf" [ color = "white" ];
  "OracleV1.getLastReportedEpochId" -> "LastEpochId.get" [ color = "white" ];
  "OracleV1.addMember" -> "OracleMembers.indexOf" [ color = "white" ];
  "OracleV1.addMember" -> "OracleV1.AddressAlreadyInUse" [ color = "#1bc6a6" ];
  "OracleV1.addMember" -> "Quorum.get" [ color = "white" ];
  "OracleV1.addMember" -> "OracleV1._clearReportsAndSetQuorum" [ color = "#1bc6a6" ];
  "OracleV1.removeMember" -> "OracleMembers.indexOf" [ color = "white" ];
  "OracleV1.removeMember" -> "LibErrors.InvalidCall" [ color = "white" ];
  "OracleV1.removeMember" -> "OracleMembers.deleteItem" [ color = "white" ];
  "OracleV1.removeMember" -> "Quorum.get" [ color = "white" ];
  "OracleV1.removeMember" -> "OracleV1._clearReportsAndSetQuorum" [ color = "#1bc6a6" ];
  "OracleV1.setMember" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "OracleV1.setMember" -> "OracleMembers.indexOf" [ color = "white" ];
  "OracleV1.setMember" -> "OracleV1.AddressAlreadyInUse" [ color = "#1bc6a6" ];
  "OracleV1.setMember" -> "OracleMembers.indexOf" [ color = "white" ];
  "OracleV1.setMember" -> "LibErrors.InvalidCall" [ color = "white" ];
  "OracleV1.setMember" -> "OracleMembers.set" [ color = "white" ];
  "OracleV1.setQuorum" -> "Quorum.get" [ color = "white" ];
  "OracleV1.setQuorum" -> "LibErrors.InvalidArgument" [ color = "white" ];
  "OracleV1.setQuorum" -> "OracleV1._clearReportsAndSetQuorum" [ color = "#1bc6a6" ];
  "OracleV1.reportConsensusLayerData" -> "OracleMembers.indexOf" [ color = "white" ];
  "OracleV1.reportConsensusLayerData" -> "LibErrors.Unauthorized" [ color = "white" ];
  "OracleV1.reportConsensusLayerData" -> "LastEpochId.get" [ color = "white" ];
  "OracleV1.reportConsensusLayerData" -> "OracleV1.EpochTooOld" [ color = "#1bc6a6" ];
  "OracleV1.reportConsensusLayerData" -> "LastEpochId.get" [ color = "white" ];
  "OracleV1.reportConsensusLayerData" -> "OracleV1.payable" [ color = "#1bc6a6" ];
  "OracleV1.reportConsensusLayerData" -> "RiverAddress.get" [ color = "white" ];
  "OracleV1.reportConsensusLayerData" -> "IRiverV1.isValidEpoch" [ color = "white" ];
  "OracleV1.reportConsensusLayerData" -> "OracleV1.InvalidEpoch" [ color = "#1bc6a6" ];
  "OracleV1.reportConsensusLayerData" -> "OracleV1._clearReports" [ color = "#1bc6a6" ];
  "OracleV1.reportConsensusLayerData" -> "LastEpochId.set" [ color = "white" ];
  "OracleV1.reportConsensusLayerData" -> "ReportsPositions.get" [ color = "white" ];
  "OracleV1.reportConsensusLayerData" -> "OracleV1.AlreadyReported" [ color = "#1bc6a6" ];
  "OracleV1.reportConsensusLayerData" -> "ReportsPositions.register" [ color = "white" ];
  "OracleV1.reportConsensusLayerData" -> "OracleV1._reportChecksum" [ color = "#1bc6a6" ];
  "OracleV1.reportConsensusLayerData" -> "OracleV1._getReportVariantIndexAndVotes" [ color = "#1bc6a6" ];
  "OracleV1.reportConsensusLayerData" -> "Quorum.get" [ color = "white" ];
  "OracleV1.reportConsensusLayerData" -> "OracleV1._clearReports" [ color = "#1bc6a6" ];
  "OracleV1.reportConsensusLayerData" -> "LastEpochId.set" [ color = "white" ];
  "OracleV1.reportConsensusLayerData" -> "IRiverV1.setConsensusLayerData" [ color = "white" ];
  "OracleV1.reportConsensusLayerData" -> "ReportsVariants.ReportVariantDetails" [ color = "white" ];
  "OracleV1.reportConsensusLayerData" -> "ReportsVariants.get" [ color = "white" ];
  "OracleV1._clearReportsAndSetQuorum" -> "OracleMembers.get" [ color = "white" ];
  "OracleV1._clearReportsAndSetQuorum" -> "LibErrors.InvalidArgument" [ color = "white" ];
  "OracleV1._clearReportsAndSetQuorum" -> "OracleV1._clearReports" [ color = "#1bc6a6" ];
  "OracleV1._clearReportsAndSetQuorum" -> "Quorum.set" [ color = "white" ];
  "OracleV1._clearReports" -> "ReportsVariants.clear" [ color = "white" ];
  "OracleV1._clearReports" -> "ReportsPositions.clear" [ color = "white" ];
  "OracleV1._getReportVariantIndexAndVotes" -> "ReportsVariants.get" [ color = "white" ];
  "OracleV1._getReportVariantIndexAndVotes" -> "ReportsVariants.get" [ color = "white" ];
  "OracleV1._getReportVariantIndexAndVotes" -> "ReportsVariants.get" [ color = "white" ];
  "OracleV1._river" -> "OracleV1.payable" [ color = "#1bc6a6" ];
  "OracleV1._river" -> "RiverAddress.get" [ color = "white" ];
  "WithdrawV1.onlyRiver" -> "RiverAddress.get" [ color = "white" ];
  "WithdrawV1.onlyRiver" -> "LibErrors.Unauthorized" [ color = "white" ];
  "WithdrawV1.initializeWithdrawV1" -> "WithdrawV1._setRiver" [ color = "#1bc6a6" ];
  "WithdrawV1.getRiver" -> "RiverAddress.get" [ color = "white" ];
  "WithdrawV1.pullEth" -> "LibUint256.min" [ color = "white" ];
  "WithdrawV1.pullEth" -> "WithdrawV1.payable" [ color = "#1bc6a6" ];
  "WithdrawV1.pullEth" -> "RiverAddress.get" [ color = "white" ];
  "WithdrawV1._setRiver" -> "RiverAddress.set" [ color = "white" ];
  "AllowlistV1.initAllowlistV1" -> "Administrable._setAdmin" [ color = "#1bc6a6" ];
  "AllowlistV1.initAllowlistV1" -> "AllowerAddress.set" [ color = "white" ];
  "AllowlistV1.initAllowlistV1_1" -> "DenierAddress.set" [ color = "white" ];
  "AllowlistV1.getAllower" -> "AllowerAddress.get" [ color = "white" ];
  "AllowlistV1.getDenier" -> "DenierAddress.get" [ color = "white" ];
  "AllowlistV1.isAllowed" -> "Allowlist.get" [ color = "white" ];
  "IAllowlistV1.isDenied" -> "Allowlist.get" [ color = "white" ];
  "AllowlistV1.hasPermission" -> "Allowlist.get" [ color = "white" ];
  "AllowlistV1.getPermissions" -> "Allowlist.get" [ color = "white" ];
  "IAllowlistV1.onlyAllowed" -> "Allowlist.get" [ color = "white" ];
  "IAllowlistV1.onlyAllowed" -> "AllowlistV1.Denied" [ color = "#1bc6a6" ];
  "IAllowlistV1.onlyAllowed" -> "LibErrors.Unauthorized" [ color = "white" ];
  "AllowlistV1.setAllower" -> "AllowerAddress.set" [ color = "white" ];
  "AllowlistV1.setDenier" -> "DenierAddress.set" [ color = "white" ];
  "AllowlistV1.setAllowPermissions" -> "AllowerAddress.get" [ color = "white" ];
  "AllowlistV1.setAllowPermissions" -> "LibErrors.Unauthorized" [ color = "white" ];
  "AllowlistV1.setAllowPermissions" -> "AllowlistV1.InvalidCount" [ color = "#1bc6a6" ];
  "AllowlistV1.setAllowPermissions" -> "AllowlistV1.MismatchedArrayLengths" [ color = "#1bc6a6" ];
  "AllowlistV1.setAllowPermissions" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "AllowlistV1.setAllowPermissions" -> "Allowlist.get" [ color = "white" ];
  "AllowlistV1.setAllowPermissions" -> "AllowlistV1.AttemptToRemoveDenyPermission" [ color = "#1bc6a6" ];
  "AllowlistV1.setAllowPermissions" -> "AllowlistV1.AttemptToSetDenyPermission" [ color = "#1bc6a6" ];
  "AllowlistV1.setAllowPermissions" -> "Allowlist.set" [ color = "white" ];
  "AllowlistV1.setDenyPermissions" -> "DenierAddress.get" [ color = "white" ];
  "AllowlistV1.setDenyPermissions" -> "LibErrors.Unauthorized" [ color = "white" ];
  "AllowlistV1.setDenyPermissions" -> "AllowlistV1.InvalidCount" [ color = "#1bc6a6" ];
  "AllowlistV1.setDenyPermissions" -> "AllowlistV1.MismatchedArrayLengths" [ color = "#1bc6a6" ];
  "AllowlistV1.setDenyPermissions" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "AllowlistV1.setDenyPermissions" -> "Allowlist.set" [ color = "white" ];
  "AllowlistV1.setDenyPermissions" -> "Allowlist.set" [ color = "white" ];
  "CoverageFundV1.initCoverageFundV1" -> "RiverAddress.set" [ color = "white" ];
  "CoverageFundV1.pullCoverageFunds" -> "RiverAddress.get" [ color = "white" ];
  "CoverageFundV1.pullCoverageFunds" -> "LibErrors.Unauthorized" [ color = "white" ];
  "CoverageFundV1.pullCoverageFunds" -> "LibUint256.min" [ color = "white" ];
  "CoverageFundV1.pullCoverageFunds" -> "BalanceForCoverage.get" [ color = "white" ];
  "CoverageFundV1.pullCoverageFunds" -> "BalanceForCoverage.set" [ color = "white" ];
  "CoverageFundV1.pullCoverageFunds" -> "BalanceForCoverage.get" [ color = "white" ];
  "CoverageFundV1.pullCoverageFunds" -> "CoverageFundV1.payable" [ color = "#1bc6a6" ];
  "CoverageFundV1.donate" -> "CoverageFundV1.EmptyDonation" [ color = "#1bc6a6" ];
  "CoverageFundV1.donate" -> "BalanceForCoverage.set" [ color = "white" ];
  "CoverageFundV1.donate" -> "BalanceForCoverage.get" [ color = "white" ];
  "CoverageFundV1.donate" -> "CoverageFundV1.payable" [ color = "#1bc6a6" ];
  "CoverageFundV1.donate" -> "RiverAddress.get" [ color = "white" ];
  "CoverageFundV1.donate" -> "IAllowlistV1.onlyAllowed" [ color = "white" ];
  "CoverageFundV1.<Receive Ether>" -> "CoverageFundV1.InvalidCall" [ color = "#1bc6a6" ];
  "CoverageFundV1.<Fallback>" -> "CoverageFundV1.InvalidCall" [ color = "#1bc6a6" ];
  "Firewall.<Constructor>" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "Firewall.<Constructor>" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "Firewall.<Constructor>" -> "Administrable._setAdmin" [ color = "#1bc6a6" ];
  "Firewall.onlyAdminOrExecutor" -> "Administrable._getAdmin" [ color = "#1bc6a6" ];
  "Firewall.onlyAdminOrExecutor" -> "LibErrors.Unauthorized" [ color = "white" ];
  "Firewall.setExecutor" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "Firewall.<Fallback>" -> "Firewall._fallback" [ color = "#1bc6a6" ];
  "Firewall.<Receive Ether>" -> "Firewall._fallback" [ color = "#1bc6a6" ];
  "Firewall._checkCallerRole" -> "Administrable._getAdmin" [ color = "#1bc6a6" ];
  "Firewall._checkCallerRole" -> "LibErrors.Unauthorized" [ color = "white" ];
  "Firewall._fallback" -> "Firewall._checkCallerRole" [ color = "#1bc6a6" ];
  "Firewall._fallback" -> "Firewall._forward" [ color = "#1bc6a6" ];
  "WLSETHV1.isNotNull" -> "WLSETHV1.NullTransfer" [ color = "#1bc6a6" ];
  "WLSETHV1.hasFunds" -> "WLSETHV1._balanceOf" [ color = "#1bc6a6" ];
  "WLSETHV1.hasFunds" -> "WLSETHV1.BalanceTooLow" [ color = "#1bc6a6" ];
  "WLSETHV1.initWLSETHV1" -> "RiverAddress.set" [ color = "white" ];
  "WLSETHV1.totalSupply" -> "WLSETHV1.payable" [ color = "#1bc6a6" ];
  "WLSETHV1.totalSupply" -> "RiverAddress.get" [ color = "white" ];
  "WLSETHV1.balanceOf" -> "WLSETHV1._balanceOf" [ color = "#1bc6a6" ];
  "WLSETHV1.sharesOf" -> "BalanceOf.get" [ color = "white" ];
  "WLSETHV1.allowance" -> "ApprovalsPerOwner.get" [ color = "white" ];
  "WLSETHV1.transfer" -> "WLSETHV1.UnauthorizedTransfer" [ color = "#1bc6a6" ];
  "WLSETHV1.transfer" -> "WLSETHV1._transfer" [ color = "#1bc6a6" ];
  "WLSETHV1.transferFrom" -> "WLSETHV1.UnauthorizedTransfer" [ color = "#1bc6a6" ];
  "WLSETHV1.transferFrom" -> "WLSETHV1._spendAllowance" [ color = "#1bc6a6" ];
  "WLSETHV1.transferFrom" -> "WLSETHV1._transfer" [ color = "#1bc6a6" ];
  "WLSETHV1.approve" -> "WLSETHV1._approve" [ color = "#1bc6a6" ];
  "WLSETHV1.increaseAllowance" -> "WLSETHV1._approve" [ color = "#1bc6a6" ];
  "WLSETHV1.increaseAllowance" -> "ApprovalsPerOwner.get" [ color = "white" ];
  "WLSETHV1.decreaseAllowance" -> "WLSETHV1._approve" [ color = "#1bc6a6" ];
  "WLSETHV1.decreaseAllowance" -> "ApprovalsPerOwner.get" [ color = "white" ];
  "WLSETHV1.mint" -> "BalanceOf.set" [ color = "white" ];
  "WLSETHV1.mint" -> "BalanceOf.get" [ color = "white" ];
  "WLSETHV1.mint" -> "WLSETHV1.payable" [ color = "#1bc6a6" ];
  "WLSETHV1.mint" -> "RiverAddress.get" [ color = "white" ];
  "WLSETHV1.mint" -> "IRiverV1.transferFrom" [ color = "white" ];
  "WLSETHV1.mint" -> "WLSETHV1.TokenTransferError" [ color = "#1bc6a6" ];
  "WLSETHV1.mint" -> "IRiverV1.underlyingBalanceFromShares" [ color = "white" ];
  "WLSETHV1.burn" -> "BalanceOf.get" [ color = "white" ];
  "WLSETHV1.burn" -> "WLSETHV1.BalanceTooLow" [ color = "#1bc6a6" ];
  "WLSETHV1.burn" -> "BalanceOf.set" [ color = "white" ];
  "WLSETHV1.burn" -> "WLSETHV1.payable" [ color = "#1bc6a6" ];
  "WLSETHV1.burn" -> "RiverAddress.get" [ color = "white" ];
  "WLSETHV1.burn" -> "IRiverV1.transfer" [ color = "white" ];
  "WLSETHV1.burn" -> "WLSETHV1.TokenTransferError" [ color = "#1bc6a6" ];
  "WLSETHV1.burn" -> "IRiverV1.underlyingBalanceFromShares" [ color = "white" ];
  "WLSETHV1._spendAllowance" -> "ApprovalsPerOwner.get" [ color = "white" ];
  "WLSETHV1._spendAllowance" -> "WLSETHV1.AllowanceTooLow" [ color = "#1bc6a6" ];
  "WLSETHV1._spendAllowance" -> "WLSETHV1.type" [ color = "#1bc6a6" ];
  "WLSETHV1._spendAllowance" -> "WLSETHV1._approve" [ color = "#1bc6a6" ];
  "WLSETHV1._approve" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "WLSETHV1._approve" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "WLSETHV1._approve" -> "ApprovalsPerOwner.set" [ color = "white" ];
  "WLSETHV1._balanceOf" -> "WLSETHV1.payable" [ color = "#1bc6a6" ];
  "WLSETHV1._balanceOf" -> "RiverAddress.get" [ color = "white" ];
  "WLSETHV1._balanceOf" -> "BalanceOf.get" [ color = "white" ];
  "WLSETHV1._transfer" -> "WLSETHV1.payable" [ color = "#1bc6a6" ];
  "WLSETHV1._transfer" -> "RiverAddress.get" [ color = "white" ];
  "WLSETHV1._transfer" -> "BalanceOf.set" [ color = "white" ];
  "WLSETHV1._transfer" -> "BalanceOf.get" [ color = "white" ];
  "WLSETHV1._transfer" -> "BalanceOf.set" [ color = "white" ];
  "WLSETHV1._transfer" -> "BalanceOf.get" [ color = "white" ];
  "ELFeeRecipientV1.initELFeeRecipientV1" -> "RiverAddress.set" [ color = "white" ];
  "ELFeeRecipientV1.pullELFees" -> "RiverAddress.get" [ color = "white" ];
  "ELFeeRecipientV1.pullELFees" -> "LibErrors.Unauthorized" [ color = "white" ];
  "ELFeeRecipientV1.pullELFees" -> "LibUint256.min" [ color = "white" ];
  "ELFeeRecipientV1.pullELFees" -> "ELFeeRecipientV1.payable" [ color = "#1bc6a6" ];
  "ELFeeRecipientV1.<Fallback>" -> "ELFeeRecipientV1.InvalidCall" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.initOperatorsRegistryV1" -> "Administrable._setAdmin" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.initOperatorsRegistryV1" -> "RiverAddress.set" [ color = "white" ];
  "OperatorsRegistryV1._migrateOperators_V1_1" -> "OperatorsV1.getCount" [ color = "white" ];
  "OperatorsRegistryV1._migrateOperators_V1_1" -> "OperatorsV1.get" [ color = "white" ];
  "OperatorsRegistryV1._migrateOperators_V1_1" -> "OperatorsV2.Operator" [ color = "white" ];
  "OperatorsRegistryV1.forceFundedValidatorKeysEventEmission" -> "OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.get" [ color = "white" ];
  "OperatorsRegistryV1.forceFundedValidatorKeysEventEmission" -> "OperatorsRegistryV1.type" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.forceFundedValidatorKeysEventEmission" -> "OperatorsRegistryV1.FundedKeyEventMigrationComplete" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.forceFundedValidatorKeysEventEmission" -> "OperatorsV2.getCount" [ color = "white" ];
  "OperatorsRegistryV1.forceFundedValidatorKeysEventEmission" -> "OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.set" [ color = "white" ];
  "OperatorsRegistryV1.forceFundedValidatorKeysEventEmission" -> "OperatorsRegistryV1.type" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.forceFundedValidatorKeysEventEmission" -> "OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.get" [ color = "white" ];
  "OperatorsRegistryV1.forceFundedValidatorKeysEventEmission" -> "OperatorsRegistryV1.type" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.forceFundedValidatorKeysEventEmission" -> "OperatorsV2.get" [ color = "white" ];
  "OperatorsRegistryV1.forceFundedValidatorKeysEventEmission" -> "ValidatorKeys.getKeys" [ color = "white" ];
  "OperatorsRegistryV1.forceFundedValidatorKeysEventEmission" -> "LibUint256.min" [ color = "white" ];
  "OperatorsRegistryV1.forceFundedValidatorKeysEventEmission" -> "OperatorsV2.getCount" [ color = "white" ];
  "OperatorsRegistryV1.forceFundedValidatorKeysEventEmission" -> "OperatorsRegistryV1.type" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.forceFundedValidatorKeysEventEmission" -> "OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.set" [ color = "white" ];
  "OperatorsRegistryV1.forceFundedValidatorKeysEventEmission" -> "OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.set" [ color = "white" ];
  "OperatorsRegistryV1.initOperatorsRegistryV1_1" -> "OperatorsRegistryV1._migrateOperators_V1_1" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.onlyRiver" -> "RiverAddress.get" [ color = "white" ];
  "OperatorsRegistryV1.onlyRiver" -> "LibErrors.Unauthorized" [ color = "white" ];
  "OperatorsRegistryV1.onlyOperatorOrAdmin" -> "Administrable._getAdmin" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.onlyOperatorOrAdmin" -> "OperatorsV2.get" [ color = "white" ];
  "OperatorsRegistryV1.onlyOperatorOrAdmin" -> "OperatorsRegistryV1.InactiveOperator" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.onlyOperatorOrAdmin" -> "LibErrors.Unauthorized" [ color = "white" ];
  "OperatorsRegistryV1.getRiver" -> "RiverAddress.get" [ color = "white" ];
  "OperatorsRegistryV1.getOperator" -> "OperatorsV2.get" [ color = "white" ];
  "OperatorsRegistryV1.getOperatorStoppedValidatorCount" -> "OperatorsRegistryV1._getStoppedValidatorsCount" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.getTotalStoppedValidatorCount" -> "OperatorsRegistryV1._getTotalStoppedValidatorCount" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.getTotalValidatorExitsRequested" -> "TotalValidatorExitsRequested.get" [ color = "white" ];
  "OperatorsRegistryV1.getCurrentValidatorExitsDemand" -> "CurrentValidatorExitsDemand.get" [ color = "white" ];
  "IOperatorsRegistryV1.getStoppedAndRequestedExitCounts" -> "OperatorsRegistryV1._getTotalStoppedValidatorCount" [ color = "#1bc6a6" ];
  "IOperatorsRegistryV1.getStoppedAndRequestedExitCounts" -> "TotalValidatorExitsRequested.get" [ color = "white" ];
  "IOperatorsRegistryV1.getStoppedAndRequestedExitCounts" -> "CurrentValidatorExitsDemand.get" [ color = "white" ];
  "OperatorsRegistryV1.getOperatorCount" -> "OperatorsV2.getCount" [ color = "white" ];
  "OperatorsRegistryV1.getStoppedValidatorCountPerOperator" -> "OperatorsV2.getStoppedValidators" [ color = "white" ];
  "OperatorsRegistryV1.getValidator" -> "ValidatorKeys.get" [ color = "white" ];
  "OperatorsRegistryV1.getValidator" -> "OperatorsV2.get" [ color = "white" ];
  "OperatorsRegistryV1.listActiveOperators" -> "OperatorsV2.getAllActive" [ color = "white" ];
  "OperatorsRegistryV1.reportStoppedValidatorCounts" -> "OperatorsRegistryV1._setStoppedValidatorCounts" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.addOperator" -> "OperatorsV2.Operator" [ color = "white" ];
  "OperatorsRegistryV1.setOperatorAddress" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "OperatorsRegistryV1.setOperatorAddress" -> "OperatorsV2.get" [ color = "white" ];
  "OperatorsRegistryV1.setOperatorName" -> "LibSanitize._notEmptyString" [ color = "white" ];
  "OperatorsRegistryV1.setOperatorName" -> "OperatorsV2.get" [ color = "white" ];
  "OperatorsRegistryV1.setOperatorStatus" -> "OperatorsV2.get" [ color = "white" ];
  "OperatorsRegistryV1.setOperatorLimits" -> "OperatorsRegistryV1.InvalidArrayLengths" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.setOperatorLimits" -> "OperatorsRegistryV1.InvalidEmptyArray" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.setOperatorLimits" -> "OperatorsRegistryV1.UnorderedOperatorList" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.setOperatorLimits" -> "OperatorsV2.get" [ color = "white" ];
  "OperatorsRegistryV1.setOperatorLimits" -> "OperatorsRegistryV1.OperatorLimitTooHigh" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.setOperatorLimits" -> "OperatorsRegistryV1.OperatorLimitTooLow" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.addValidators" -> "OperatorsRegistryV1.InvalidKeyCount" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.addValidators" -> "OperatorsRegistryV1.InvalidKeysLength" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.addValidators" -> "OperatorsV2.get" [ color = "white" ];
  "OperatorsRegistryV1.addValidators" -> "LibBytes.slice" [ color = "white" ];
  "OperatorsRegistryV1.addValidators" -> "ValidatorKeys.set" [ color = "white" ];
  "OperatorsRegistryV1.addValidators" -> "OperatorsV2.setKeys" [ color = "white" ];
  "OperatorsRegistryV1.removeValidators" -> "OperatorsRegistryV1.InvalidKeyCount" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.removeValidators" -> "OperatorsV2.get" [ color = "white" ];
  "OperatorsRegistryV1.removeValidators" -> "OperatorsRegistryV1.InvalidIndexOutOfBounds" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.removeValidators" -> "OperatorsRegistryV1.InvalidFundedKeyDeletionAttempt" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.removeValidators" -> "OperatorsV2.setKeys" [ color = "white" ];
  "OperatorsRegistryV1.removeValidators" -> "OperatorsRegistryV1.InvalidUnsortedIndexes" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.removeValidators" -> "ValidatorKeys.get" [ color = "white" ];
  "OperatorsRegistryV1.removeValidators" -> "ValidatorKeys.getRaw" [ color = "white" ];
  "OperatorsRegistryV1.removeValidators" -> "ValidatorKeys.set" [ color = "white" ];
  "OperatorsRegistryV1.removeValidators" -> "ValidatorKeys.set" [ color = "white" ];
  "OperatorsRegistryV1.pickNextValidatorsToDeposit" -> "OperatorsRegistryV1._pickNextValidatorsToDepositFromActiveOperators" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.requestValidatorExits" -> "CurrentValidatorExitsDemand.get" [ color = "white" ];
  "OperatorsRegistryV1.requestValidatorExits" -> "LibUint256.min" [ color = "white" ];
  "OperatorsRegistryV1.requestValidatorExits" -> "OperatorsRegistryV1.NoExitRequestsToPerform" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.requestValidatorExits" -> "OperatorsRegistryV1._pickNextValidatorsToExitFromActiveOperators" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1.requestValidatorExits" -> "OperatorsRegistryV1._setCurrentValidatorExitsDemand" [ color = "#1bc6a6" ];
  "IOperatorsRegistryV1.demandValidatorExits" -> "CurrentValidatorExitsDemand.get" [ color = "white" ];
  "IOperatorsRegistryV1.demandValidatorExits" -> "TotalValidatorExitsRequested.get" [ color = "white" ];
  "IOperatorsRegistryV1.demandValidatorExits" -> "LibUint256.min" [ color = "white" ];
  "IOperatorsRegistryV1.demandValidatorExits" -> "OperatorsRegistryV1._setCurrentValidatorExitsDemand" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._getTotalStoppedValidatorCount" -> "OperatorsV2.getStoppedValidators" [ color = "white" ];
  "OperatorsRegistryV1._setCurrentValidatorExitsDemand" -> "CurrentValidatorExitsDemand.set" [ color = "white" ];
  "OperatorsRegistryV1._setStoppedValidatorCounts" -> "OperatorsRegistryV1.InvalidEmptyStoppedValidatorCountsArray" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._setStoppedValidatorCounts" -> "OperatorsV2.getAll" [ color = "white" ];
  "OperatorsRegistryV1._setStoppedValidatorCounts" -> "OperatorsRegistryV1.StoppedValidatorCountsTooHigh" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._setStoppedValidatorCounts" -> "OperatorsV2.getStoppedValidators" [ color = "white" ];
  "OperatorsRegistryV1._setStoppedValidatorCounts" -> "OperatorsRegistryV1.StoppedValidatorCountArrayShrinking" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._setStoppedValidatorCounts" -> "CurrentValidatorExitsDemand.get" [ color = "white" ];
  "OperatorsRegistryV1._setStoppedValidatorCounts" -> "TotalValidatorExitsRequested.get" [ color = "white" ];
  "OperatorsRegistryV1._setStoppedValidatorCounts" -> "OperatorsRegistryV1.StoppedValidatorCountsDecreased" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._setStoppedValidatorCounts" -> "OperatorsRegistryV1.StoppedValidatorCountAboveFundedCount" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._setStoppedValidatorCounts" -> "OperatorsRegistryV1.StoppedValidatorCountAboveFundedCount" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._setStoppedValidatorCounts" -> "LibUint256.min" [ color = "white" ];
  "OperatorsRegistryV1._setStoppedValidatorCounts" -> "OperatorsRegistryV1._setTotalValidatorExitsRequested" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._setStoppedValidatorCounts" -> "OperatorsRegistryV1._setCurrentValidatorExitsDemand" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._setStoppedValidatorCounts" -> "OperatorsRegistryV1.InvalidStoppedValidatorCountsSum" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._setStoppedValidatorCounts" -> "OperatorsRegistryV1.StoppedValidatorCountsTooHigh" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._setStoppedValidatorCounts" -> "OperatorsV2.setRawStoppedValidators" [ color = "white" ];
  "OperatorsRegistryV1._getStoppedValidatorsCount" -> "OperatorsV2._getStoppedValidatorCountAtIndex" [ color = "white" ];
  "OperatorsRegistryV1._getStoppedValidatorsCount" -> "OperatorsV2.getStoppedValidators" [ color = "white" ];
  "OperatorsRegistryV1._getActiveValidatorCountForDeposits" -> "OperatorsRegistryV1._getStoppedValidatorsCount" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._pickNextValidatorsToDepositFromActiveOperators" -> "OperatorsV2.getAllFundable" [ color = "white" ];
  "OperatorsRegistryV1._pickNextValidatorsToDepositFromActiveOperators" -> "OperatorsRegistryV1._hasFundableKeys" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._pickNextValidatorsToDepositFromActiveOperators" -> "OperatorsRegistryV1._getActiveValidatorCountForDeposits" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._pickNextValidatorsToDepositFromActiveOperators" -> "OperatorsRegistryV1._getActiveValidatorCountForDeposits" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._pickNextValidatorsToDepositFromActiveOperators" -> "OperatorsRegistryV1._hasFundableKeys" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._pickNextValidatorsToDepositFromActiveOperators" -> "LibUint256.min" [ color = "white" ];
  "OperatorsRegistryV1._pickNextValidatorsToDepositFromActiveOperators" -> "LibUint256.min" [ color = "white" ];
  "OperatorsRegistryV1._pickNextValidatorsToDepositFromActiveOperators" -> "ValidatorKeys.getKeys" [ color = "white" ];
  "OperatorsRegistryV1._pickNextValidatorsToDepositFromActiveOperators" -> "OperatorsRegistryV1._concatenateByteArrays" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._pickNextValidatorsToDepositFromActiveOperators" -> "OperatorsRegistryV1._concatenateByteArrays" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._pickNextValidatorsToDepositFromActiveOperators" -> "OperatorsV2.get" [ color = "white" ];
  "OperatorsRegistryV1._pickNextValidatorsToExitFromActiveOperators" -> "OperatorsV2.getAllExitable" [ color = "white" ];
  "OperatorsRegistryV1._pickNextValidatorsToExitFromActiveOperators" -> "TotalValidatorExitsRequested.get" [ color = "white" ];
  "OperatorsRegistryV1._pickNextValidatorsToExitFromActiveOperators" -> "OperatorsRegistryV1._getActiveValidatorCountForExitRequests" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._pickNextValidatorsToExitFromActiveOperators" -> "LibUint256.min" [ color = "white" ];
  "OperatorsRegistryV1._pickNextValidatorsToExitFromActiveOperators" -> "OperatorsRegistryV1._getActiveValidatorCountForExitRequests" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._pickNextValidatorsToExitFromActiveOperators" -> "OperatorsV2.get" [ color = "white" ];
  "OperatorsRegistryV1._pickNextValidatorsToExitFromActiveOperators" -> "OperatorsRegistryV1._setTotalValidatorExitsRequested" [ color = "#1bc6a6" ];
  "OperatorsRegistryV1._setTotalValidatorExitsRequested" -> "TotalValidatorExitsRequested.set" [ color = "white" ];
  "TLCV1.<Constructor>" -> "TLCV1._disableInitializers" [ color = "#1bc6a6" ];
  "TLCV1.initTLCV1" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "TLCV1.initTLCV1" -> "TLCV1.__ERC20Permit_init" [ color = "#1bc6a6" ];
  "TLCV1.initTLCV1" -> "TLCV1.__ERC20_init" [ color = "#1bc6a6" ];
  "TLCV1.initTLCV1" -> "TLCV1._mint" [ color = "#1bc6a6" ];
  "TLCV1.migrateVestingSchedules" -> "ERC20VestableVotesUpgradeableV1.migrateVestingSchedulesFromV1ToV2" [ color = "white" ];
  "Initializable.<Constructor>" -> "Version.set" [ color = "white" ];
  "Initializable.<Constructor>" -> "Initializable.type" [ color = "#1bc6a6" ];
  "Initializable.<Constructor>" -> "Initializable.type" [ color = "#1bc6a6" ];
  "Initializable.init" -> "Version.get" [ color = "white" ];
  "Initializable.init" -> "Initializable.InvalidInitialization" [ color = "#1bc6a6" ];
  "Initializable.init" -> "Version.get" [ color = "white" ];
  "Initializable.init" -> "Version.set" [ color = "white" ];
  "OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "SharesManagerV1.transferAllowed" -> "SharesManagerV1._onTransfer" [ color = "#1bc6a6" ];
  "SharesManagerV1.isNotZero" -> "SharesManagerV1.NullTransfer" [ color = "#1bc6a6" ];
  "SharesManagerV1.hasFunds" -> "SharesManagerV1._balanceOf" [ color = "#1bc6a6" ];
  "SharesManagerV1.hasFunds" -> "SharesManagerV1.BalanceTooLow" [ color = "#1bc6a6" ];
  "SharesManagerV1.totalSupply" -> "SharesManagerV1._totalSupply" [ color = "#1bc6a6" ];
  "SharesManagerV1.totalUnderlyingSupply" -> "SharesManagerV1._assetBalance" [ color = "#1bc6a6" ];
  "SharesManagerV1.balanceOf" -> "SharesManagerV1._balanceOf" [ color = "#1bc6a6" ];
  "SharesManagerV1.balanceOfUnderlying" -> "SharesManagerV1._balanceFromShares" [ color = "#1bc6a6" ];
  "SharesManagerV1.balanceOfUnderlying" -> "SharesPerOwner.get" [ color = "white" ];
  "SharesManagerV1.underlyingBalanceFromShares" -> "SharesManagerV1._balanceFromShares" [ color = "#1bc6a6" ];
  "SharesManagerV1.sharesFromUnderlyingBalance" -> "SharesManagerV1._sharesFromBalance" [ color = "#1bc6a6" ];
  "SharesManagerV1.allowance" -> "ApprovalsPerOwner.get" [ color = "white" ];
  "SharesManagerV1.transfer" -> "SharesManagerV1.UnauthorizedTransfer" [ color = "#1bc6a6" ];
  "SharesManagerV1.transfer" -> "SharesManagerV1._transfer" [ color = "#1bc6a6" ];
  "SharesManagerV1.transferFrom" -> "SharesManagerV1.UnauthorizedTransfer" [ color = "#1bc6a6" ];
  "SharesManagerV1.transferFrom" -> "SharesManagerV1._spendAllowance" [ color = "#1bc6a6" ];
  "SharesManagerV1.transferFrom" -> "SharesManagerV1._transfer" [ color = "#1bc6a6" ];
  "SharesManagerV1.approve" -> "SharesManagerV1._approve" [ color = "#1bc6a6" ];
  "SharesManagerV1.increaseAllowance" -> "SharesManagerV1._approve" [ color = "#1bc6a6" ];
  "SharesManagerV1.increaseAllowance" -> "ApprovalsPerOwner.get" [ color = "white" ];
  "SharesManagerV1.decreaseAllowance" -> "SharesManagerV1._approve" [ color = "#1bc6a6" ];
  "SharesManagerV1.decreaseAllowance" -> "ApprovalsPerOwner.get" [ color = "white" ];
  "SharesManagerV1._spendAllowance" -> "ApprovalsPerOwner.get" [ color = "white" ];
  "SharesManagerV1._spendAllowance" -> "SharesManagerV1.AllowanceTooLow" [ color = "#1bc6a6" ];
  "SharesManagerV1._spendAllowance" -> "SharesManagerV1.type" [ color = "#1bc6a6" ];
  "SharesManagerV1._spendAllowance" -> "SharesManagerV1._approve" [ color = "#1bc6a6" ];
  "SharesManagerV1._approve" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "SharesManagerV1._approve" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "SharesManagerV1._approve" -> "ApprovalsPerOwner.set" [ color = "white" ];
  "SharesManagerV1._approve" -> "SharesManagerV1.Approval" [ color = "#1bc6a6" ];
  "SharesManagerV1._totalSupply" -> "Shares.get" [ color = "white" ];
  "SharesManagerV1._transfer" -> "SharesPerOwner.set" [ color = "white" ];
  "SharesManagerV1._transfer" -> "SharesPerOwner.get" [ color = "white" ];
  "SharesManagerV1._transfer" -> "SharesPerOwner.set" [ color = "white" ];
  "SharesManagerV1._transfer" -> "SharesPerOwner.get" [ color = "white" ];
  "SharesManagerV1._transfer" -> "SharesManagerV1.Transfer" [ color = "#1bc6a6" ];
  "SharesManagerV1._balanceFromShares" -> "Shares.get" [ color = "white" ];
  "SharesManagerV1._balanceFromShares" -> "SharesManagerV1._assetBalance" [ color = "#1bc6a6" ];
  "SharesManagerV1._sharesFromBalance" -> "Shares.get" [ color = "white" ];
  "SharesManagerV1._sharesFromBalance" -> "SharesManagerV1._assetBalance" [ color = "#1bc6a6" ];
  "SharesManagerV1._mintShares" -> "SharesManagerV1._assetBalance" [ color = "#1bc6a6" ];
  "SharesManagerV1._mintShares" -> "SharesManagerV1._mintRawShares" [ color = "#1bc6a6" ];
  "SharesManagerV1._mintShares" -> "SharesManagerV1._totalSupply" [ color = "#1bc6a6" ];
  "SharesManagerV1._mintShares" -> "SharesManagerV1._mintRawShares" [ color = "#1bc6a6" ];
  "SharesManagerV1._balanceOf" -> "SharesPerOwner.get" [ color = "white" ];
  "SharesManagerV1._mintRawShares" -> "SharesManagerV1._setTotalSupply" [ color = "#1bc6a6" ];
  "SharesManagerV1._mintRawShares" -> "Shares.get" [ color = "white" ];
  "SharesManagerV1._mintRawShares" -> "SharesPerOwner.set" [ color = "white" ];
  "SharesManagerV1._mintRawShares" -> "SharesPerOwner.get" [ color = "white" ];
  "SharesManagerV1._mintRawShares" -> "SharesManagerV1.Transfer" [ color = "#1bc6a6" ];
  "SharesManagerV1._burnRawShares" -> "SharesManagerV1._setTotalSupply" [ color = "#1bc6a6" ];
  "SharesManagerV1._burnRawShares" -> "Shares.get" [ color = "white" ];
  "SharesManagerV1._burnRawShares" -> "SharesPerOwner.set" [ color = "white" ];
  "SharesManagerV1._burnRawShares" -> "SharesPerOwner.get" [ color = "white" ];
  "SharesManagerV1._burnRawShares" -> "SharesManagerV1.Transfer" [ color = "#1bc6a6" ];
  "SharesManagerV1._setTotalSupply" -> "Shares.set" [ color = "white" ];
  "ConsensusLayerDepositManagerV1.initConsensusLayerDepositManagerV1" -> "DepositContractAddress.set" [ color = "white" ];
  "ConsensusLayerDepositManagerV1.initConsensusLayerDepositManagerV1" -> "WithdrawalCredentials.set" [ color = "white" ];
  "ConsensusLayerDepositManagerV1.getCommittedBalance" -> "CommittedBalance.get" [ color = "white" ];
  "ConsensusLayerDepositManagerV1.getBalanceToDeposit" -> "BalanceToDeposit.get" [ color = "white" ];
  "ConsensusLayerDepositManagerV1.getWithdrawalCredentials" -> "WithdrawalCredentials.get" [ color = "white" ];
  "ConsensusLayerDepositManagerV1.getDepositedValidatorCount" -> "DepositedValidatorCount.get" [ color = "white" ];
  "ConsensusLayerDepositManagerV1.depositToConsensusLayer" -> "CommittedBalance.get" [ color = "white" ];
  "ConsensusLayerDepositManagerV1.depositToConsensusLayer" -> "LibUint256.min" [ color = "white" ];
  "ConsensusLayerDepositManagerV1.depositToConsensusLayer" -> "ConsensusLayerDepositManagerV1.NotEnoughFunds" [ color = "#1bc6a6" ];
  "ConsensusLayerDepositManagerV1.depositToConsensusLayer" -> "ConsensusLayerDepositManagerV1._getNextValidators" [ color = "#1bc6a6" ];
  "ConsensusLayerDepositManagerV1.depositToConsensusLayer" -> "ConsensusLayerDepositManagerV1.NoAvailableValidatorKeys" [ color = "#1bc6a6" ];
  "ConsensusLayerDepositManagerV1.depositToConsensusLayer" -> "ConsensusLayerDepositManagerV1.InvalidPublicKeyCount" [ color = "#1bc6a6" ];
  "ConsensusLayerDepositManagerV1.depositToConsensusLayer" -> "WithdrawalCredentials.get" [ color = "white" ];
  "ConsensusLayerDepositManagerV1.depositToConsensusLayer" -> "ConsensusLayerDepositManagerV1.InvalidWithdrawalCredentials" [ color = "#1bc6a6" ];
  "ConsensusLayerDepositManagerV1.depositToConsensusLayer" -> "ConsensusLayerDepositManagerV1._depositValidator" [ color = "#1bc6a6" ];
  "ConsensusLayerDepositManagerV1.depositToConsensusLayer" -> "ConsensusLayerDepositManagerV1._setCommittedBalance" [ color = "#1bc6a6" ];
  "ConsensusLayerDepositManagerV1.depositToConsensusLayer" -> "DepositedValidatorCount.get" [ color = "white" ];
  "ConsensusLayerDepositManagerV1.depositToConsensusLayer" -> "DepositedValidatorCount.set" [ color = "white" ];
  "ConsensusLayerDepositManagerV1._depositValidator" -> "ConsensusLayerDepositManagerV1.InconsistentPublicKeys" [ color = "#1bc6a6" ];
  "ConsensusLayerDepositManagerV1._depositValidator" -> "ConsensusLayerDepositManagerV1.InconsistentSignatures" [ color = "#1bc6a6" ];
  "ConsensusLayerDepositManagerV1._depositValidator" -> "bytes.concat" [ color = "white" ];
  "ConsensusLayerDepositManagerV1._depositValidator" -> "bytes.concat" [ color = "white" ];
  "ConsensusLayerDepositManagerV1._depositValidator" -> "LibBytes.slice" [ color = "white" ];
  "ConsensusLayerDepositManagerV1._depositValidator" -> "bytes.concat" [ color = "white" ];
  "ConsensusLayerDepositManagerV1._depositValidator" -> "LibBytes.slice" [ color = "white" ];
  "ConsensusLayerDepositManagerV1._depositValidator" -> "bytes.concat" [ color = "white" ];
  "ConsensusLayerDepositManagerV1._depositValidator" -> "bytes.concat" [ color = "white" ];
  "ConsensusLayerDepositManagerV1._depositValidator" -> "bytes.concat" [ color = "white" ];
  "ConsensusLayerDepositManagerV1._depositValidator" -> "LibUint256.toLittleEndian64" [ color = "white" ];
  "ConsensusLayerDepositManagerV1._depositValidator" -> "DepositContractAddress.get" [ color = "white" ];
  "ConsensusLayerDepositManagerV1._depositValidator" -> "ConsensusLayerDepositManagerV1.ErrorOnDeposit" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1.migrateVestingSchedulesFromV1ToV2" -> "VestingSchedulesV2.getCount" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1.migrateVestingSchedulesFromV1ToV2" -> "VestingSchedulesV1.getCount" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1.migrateVestingSchedulesFromV1ToV2" -> "VestingSchedulesV1.get" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1.migrateVestingSchedulesFromV1ToV2" -> "LibUint256.min" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1.migrateVestingSchedulesFromV1ToV2" -> "ERC20VestableVotesUpgradeableV1.balanceOf" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1.migrateVestingSchedulesFromV1ToV2" -> "ERC20VestableVotesUpgradeableV1._deterministicVestingEscrow" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1.migrateVestingSchedulesFromV1ToV2" -> "VestingSchedulesV2.migrateVestingScheduleFromV1" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1.getVestingSchedule" -> "VestingSchedulesV2.get" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1.isGlobalUnlockedScheduleIgnored" -> "IgnoreGlobalUnlockSchedule.get" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1.getVestingScheduleCount" -> "VestingSchedulesV2.getCount" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1.vestingEscrow" -> "ERC20VestableVotesUpgradeableV1._deterministicVestingEscrow" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1.computeVestingReleasableAmount" -> "VestingSchedulesV2.get" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1.computeVestingReleasableAmount" -> "ERC20VestableVotesUpgradeableV1._computeVestingReleasableAmount" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1.computeVestingVestedAmount" -> "VestingSchedulesV2.get" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1.computeVestingVestedAmount" -> "ERC20VestableVotesUpgradeableV1._computeVestedAmount" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1.computeVestingVestedAmount" -> "LibUint256.min" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1.computeVestingVestedAmount" -> "ERC20VestableVotesUpgradeableV1._getCurrentTime" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1.createVestingSchedule" -> "ERC20VestableVotesUpgradeableV1._createVestingSchedule" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1.revokeVestingSchedule" -> "ERC20VestableVotesUpgradeableV1._revokeVestingSchedule" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1.releaseVestingSchedule" -> "ERC20VestableVotesUpgradeableV1._releaseVestingSchedule" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1.delegateVestingEscrow" -> "ERC20VestableVotesUpgradeableV1._delegateVestingEscrow" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule" -> "ERC20VestableVotesUpgradeableV1.balanceOf" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule" -> "ERC20VestableVotesUpgradeableV1.UnsufficientVestingScheduleCreatorBalance" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule" -> "ERC20VestableVotesUpgradeableV1.InvalidVestingScheduleParameter" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule" -> "ERC20VestableVotesUpgradeableV1.InvalidVestingScheduleParameter" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule" -> "ERC20VestableVotesUpgradeableV1.InvalidVestingScheduleParameter" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule" -> "ERC20VestableVotesUpgradeableV1.InvalidVestingScheduleParameter" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule" -> "ERC20VestableVotesUpgradeableV1.InvalidVestingScheduleParameter" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule" -> "ERC20VestableVotesUpgradeableV1.InvalidVestingScheduleParameter" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule" -> "ERC20VestableVotesUpgradeableV1.InvalidVestingScheduleParameter" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule" -> "ERC20VestableVotesUpgradeableV1.InvalidVestingScheduleParameter" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule" -> "VestingSchedulesV2.VestingSchedule" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule" -> "IgnoreGlobalUnlockSchedule.set" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule" -> "ERC20VestableVotesUpgradeableV1._deterministicVestingEscrow" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule" -> "ERC20VestableVotesUpgradeableV1._transfer" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule" -> "ERC20VestableVotesUpgradeableV1._delegate" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._createVestingSchedule" -> "ERC20VestableVotesUpgradeableV1._delegate" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._revokeVestingSchedule" -> "ERC20VestableVotesUpgradeableV1.VestingScheduleNotRevocableInPast" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._revokeVestingSchedule" -> "VestingSchedulesV2.get" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1._revokeVestingSchedule" -> "ERC20VestableVotesUpgradeableV1.VestingScheduleNotRevocable" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._revokeVestingSchedule" -> "ERC20VestableVotesUpgradeableV1.InvalidRevokedVestingScheduleEnd" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._revokeVestingSchedule" -> "LibErrors.Unauthorized" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1._revokeVestingSchedule" -> "ERC20VestableVotesUpgradeableV1._computeVestedAmount" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._revokeVestingSchedule" -> "ERC20VestableVotesUpgradeableV1._computeVestedAmount" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._revokeVestingSchedule" -> "ERC20VestableVotesUpgradeableV1._deterministicVestingEscrow" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._revokeVestingSchedule" -> "ERC20VestableVotesUpgradeableV1._transfer" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._releaseVestingSchedule" -> "VestingSchedulesV2.get" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1._releaseVestingSchedule" -> "LibErrors.Unauthorized" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1._releaseVestingSchedule" -> "ERC20VestableVotesUpgradeableV1._computeVestingReleasableAmount" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._releaseVestingSchedule" -> "ERC20VestableVotesUpgradeableV1.ZeroReleasableAmount" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._releaseVestingSchedule" -> "ERC20VestableVotesUpgradeableV1._deterministicVestingEscrow" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._releaseVestingSchedule" -> "ERC20VestableVotesUpgradeableV1._transfer" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._delegateVestingEscrow" -> "VestingSchedulesV2.get" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1._delegateVestingEscrow" -> "LibErrors.Unauthorized" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1._delegateVestingEscrow" -> "ERC20VestableVotesUpgradeableV1._deterministicVestingEscrow" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._delegateVestingEscrow" -> "ERC20VestableVotesUpgradeableV1.delegates" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._delegateVestingEscrow" -> "ERC20VestableVotesUpgradeableV1._delegate" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._computeVestingReleasableAmount" -> "ERC20VestableVotesUpgradeableV1._getCurrentTime" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._computeVestingReleasableAmount" -> "ERC20VestableVotesUpgradeableV1.VestingScheduleIsLocked" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._computeVestingReleasableAmount" -> "ERC20VestableVotesUpgradeableV1._computeVestedAmount" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._computeVestingReleasableAmount" -> "IgnoreGlobalUnlockSchedule.get" [ color = "white" ];
  "ERC20VestableVotesUpgradeableV1._computeVestingReleasableAmount" -> "ERC20VestableVotesUpgradeableV1._computeGlobalUnlocked" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._computeVestingReleasableAmount" -> "ERC20VestableVotesUpgradeableV1.GlobalUnlockUnderlfow" [ color = "#1bc6a6" ];
  "ERC20VestableVotesUpgradeableV1._computeVestingReleasableAmount" -> "LibUint256.min" [ color = "white" ];
  "UserDepositManagerV1.deposit" -> "UserDepositManagerV1._deposit" [ color = "#1bc6a6" ];
  "UserDepositManagerV1.depositAndTransfer" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "UserDepositManagerV1.depositAndTransfer" -> "UserDepositManagerV1._deposit" [ color = "#1bc6a6" ];
  "UserDepositManagerV1.<Receive Ether>" -> "UserDepositManagerV1._deposit" [ color = "#1bc6a6" ];
  "UserDepositManagerV1.<Fallback>" -> "LibErrors.InvalidCall" [ color = "white" ];
  "UserDepositManagerV1._deposit" -> "UserDepositManagerV1.EmptyDeposit" [ color = "#1bc6a6" ];
  "UserDepositManagerV1._deposit" -> "UserDepositManagerV1._setBalanceToDeposit" [ color = "#1bc6a6" ];
  "UserDepositManagerV1._deposit" -> "BalanceToDeposit.get" [ color = "white" ];
  "UserDepositManagerV1._deposit" -> "UserDepositManagerV1._onDeposit" [ color = "#1bc6a6" ];
  "OracleManagerV1.onlyAdmin_OMV1" -> "OracleManagerV1._getRiverAdmin" [ color = "#1bc6a6" ];
  "OracleManagerV1.onlyAdmin_OMV1" -> "LibErrors.Unauthorized" [ color = "white" ];
  "OracleManagerV1.initOracleManagerV1" -> "OracleAddress.set" [ color = "white" ];
  "OracleManagerV1.initOracleManagerV1_1" -> "CLSpec.set" [ color = "white" ];
  "OracleManagerV1.initOracleManagerV1_1" -> "CLSpec.CLSpecStruct" [ color = "white" ];
  "OracleManagerV1.initOracleManagerV1_1" -> "ReportBounds.set" [ color = "white" ];
  "OracleManagerV1.initOracleManagerV1_1" -> "ReportBounds.ReportBoundsStruct" [ color = "white" ];
  "OracleManagerV1.initOracleManagerV1_1" -> "LastOracleRoundId.get" [ color = "white" ];
  "OracleManagerV1.initOracleManagerV1_1" -> "CLValidatorTotalBalance.get" [ color = "white" ];
  "OracleManagerV1.initOracleManagerV1_1" -> "CLValidatorCount.get" [ color = "white" ];
  "OracleManagerV1.initOracleManagerV1_1" -> "LastConsensusLayerReport.set" [ color = "white" ];
  "OracleManagerV1.getOracle" -> "OracleAddress.get" [ color = "white" ];
  "OracleManagerV1.getCLValidatorTotalBalance" -> "LastConsensusLayerReport.get" [ color = "white" ];
  "OracleManagerV1.getCLValidatorCount" -> "LastConsensusLayerReport.get" [ color = "white" ];
  "OracleManagerV1.getExpectedEpochId" -> "CLSpec.get" [ color = "white" ];
  "OracleManagerV1.getExpectedEpochId" -> "OracleManagerV1._currentEpoch" [ color = "#1bc6a6" ];
  "OracleManagerV1.getExpectedEpochId" -> "LibUint256.max" [ color = "white" ];
  "OracleManagerV1.getExpectedEpochId" -> "LastConsensusLayerReport.get" [ color = "white" ];
  "OracleManagerV1.isValidEpoch" -> "OracleManagerV1._isValidEpoch" [ color = "#1bc6a6" ];
  "OracleManagerV1.isValidEpoch" -> "CLSpec.get" [ color = "white" ];
  "OracleManagerV1.getLastCompletedEpochId" -> "LastConsensusLayerReport.get" [ color = "white" ];
  "OracleManagerV1.getCurrentEpochId" -> "OracleManagerV1._currentEpoch" [ color = "#1bc6a6" ];
  "OracleManagerV1.getCurrentEpochId" -> "CLSpec.get" [ color = "white" ];
  "OracleManagerV1.getCLSpec" -> "CLSpec.get" [ color = "white" ];
  "OracleManagerV1.getCurrentFrame" -> "CLSpec.get" [ color = "white" ];
  "OracleManagerV1.getCurrentFrame" -> "OracleManagerV1._currentEpoch" [ color = "#1bc6a6" ];
  "OracleManagerV1.getFrameFirstEpochId" -> "CLSpec.get" [ color = "white" ];
  "OracleManagerV1.getReportBounds" -> "ReportBounds.get" [ color = "white" ];
  "OracleManagerV1.getLastConsensusLayerReport" -> "LastConsensusLayerReport.get" [ color = "white" ];
  "OracleManagerV1.setOracle" -> "OracleAddress.set" [ color = "white" ];
  "OracleManagerV1.setCLSpec" -> "CLSpec.set" [ color = "white" ];
  "OracleManagerV1.setReportBounds" -> "ReportBounds.set" [ color = "white" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleAddress.get" [ color = "white" ];
  "OracleManagerV1.setConsensusLayerData" -> "LibErrors.Unauthorized" [ color = "white" ];
  "OracleManagerV1.setConsensusLayerData" -> "CLSpec.get" [ color = "white" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1._isValidEpoch" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1.InvalidEpoch" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "LastConsensusLayerReport.get" [ color = "white" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1.InvalidDecreasingValidatorsExitedBalance" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1.InvalidDecreasingValidatorsSkimmedBalance" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "DepositedValidatorCount.get" [ color = "white" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1.InvalidValidatorCountReport" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "DepositedValidatorCount.get" [ color = "white" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1._timeBetweenEpochs" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1._assetBalance" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1._pullCLFunds" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "LastConsensusLayerReport.set" [ color = "white" ];
  "OracleManagerV1.setConsensusLayerData" -> "ReportBounds.get" [ color = "white" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1._maxIncrease" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1._assetBalance" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1.TotalValidatorBalanceIncreaseOutOfBound" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1._maxDecrease" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "LibUint256.min" [ color = "white" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1.TotalValidatorBalanceDecreaseOutOfBound" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1._pullELFees" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1._pullRedeemManagerExceedingEth" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1._pullCoverageFunds" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1._onEarnings" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1._requestExitsBasedOnRedeemDemandAfterRebalancings" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1._reportWithdrawToRedeemManager" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1._skimExcessBalanceToRedeem" [ color = "#1bc6a6" ];
  "OracleManagerV1.setConsensusLayerData" -> "OracleManagerV1._commitBalanceToDeposit" [ color = "#1bc6a6" ];
  "OracleManagerV1._isValidEpoch" -> "OracleManagerV1._currentEpoch" [ color = "#1bc6a6" ];
  "OracleManagerV1._isValidEpoch" -> "LastConsensusLayerReport.get" [ color = "white" ];
  "LibBytes.slice" -> "LibBytes.SliceOverflow" [ color = "#1bc6a6" ];
  "LibBytes.slice" -> "LibBytes.SliceOutOfBounds" [ color = "#1bc6a6" ];
  "LibAdministrable._getAdmin" -> "AdministratorAddress.get" [ color = "white" ];
  "LibAdministrable._getPendingAdmin" -> "PendingAdministratorAddress.get" [ color = "white" ];
  "LibAdministrable._setAdmin" -> "AdministratorAddress.set" [ color = "white" ];
  "LibAdministrable._setPendingAdmin" -> "PendingAdministratorAddress.set" [ color = "white" ];
  "BalanceForCoverage.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "BalanceForCoverage.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "LibSanitize._notZeroAddress" -> "LibErrors.InvalidZeroAddress" [ color = "white" ];
  "LibSanitize._notEmptyString" -> "LibErrors.InvalidEmptyString" [ color = "white" ];
  "LibSanitize._validFee" -> "LibErrors.InvalidFee" [ color = "white" ];
  "RedeemDemand.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "RedeemDemand.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "BufferedExceedingEth.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "BufferedExceedingEth.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "AllowerAddress.get" -> "LibUnstructuredStorage.getStorageAddress" [ color = "white" ];
  "AllowerAddress.set" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "AllowerAddress.set" -> "LibUnstructuredStorage.setStorageAddress" [ color = "white" ];
  "DenierAddress.get" -> "LibUnstructuredStorage.getStorageAddress" [ color = "white" ];
  "DenierAddress.set" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "DenierAddress.set" -> "LibUnstructuredStorage.setStorageAddress" [ color = "white" ];
  "OperatorsV1.get" -> "OperatorsV1.OperatorNotFound" [ color = "#1bc6a6" ];
  "OperatorsV1.getAllFundable" -> "OperatorsV1._hasFundableKeys" [ color = "#1bc6a6" ];
  "OperatorsV1.getAllFundable" -> "OperatorsV1._hasFundableKeys" [ color = "#1bc6a6" ];
  "OperatorsV1.push" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "OperatorsV1.push" -> "LibSanitize._notEmptyString" [ color = "white" ];
  "OperatorsV1.setKeys" -> "OperatorsV1.get" [ color = "#1bc6a6" ];
  "OperatorsV2.get" -> "OperatorsV2.OperatorNotFound" [ color = "#1bc6a6" ];
  "OperatorsV2.getAllFundable" -> "OperatorsV2.getStoppedValidators" [ color = "#1bc6a6" ];
  "OperatorsV2.getAllFundable" -> "OperatorsV2._hasFundableKeys" [ color = "#1bc6a6" ];
  "OperatorsV2.getAllFundable" -> "OperatorsV2._getStoppedValidatorCountAtIndex" [ color = "#1bc6a6" ];
  "OperatorsV2.getAllExitable" -> "OperatorsV2._hasExitableKeys" [ color = "#1bc6a6" ];
  "OperatorsV2.push" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "OperatorsV2.push" -> "LibSanitize._notEmptyString" [ color = "white" ];
  "OperatorsV2.setKeys" -> "OperatorsV2.get" [ color = "#1bc6a6" ];
  "CurrentValidatorExitsDemand.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "CurrentValidatorExitsDemand.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "TotalValidatorExitsRequested.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "TotalValidatorExitsRequested.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "ValidatorKeys.get" -> "LibBytes.slice" [ color = "white" ];
  "ValidatorKeys.get" -> "LibBytes.slice" [ color = "white" ];
  "ValidatorKeys.getKeys" -> "LibBytes.slice" [ color = "white" ];
  "ValidatorKeys.getKeys" -> "LibBytes.slice" [ color = "white" ];
  "AdministratorAddress.get" -> "LibUnstructuredStorage.getStorageAddress" [ color = "white" ];
  "AdministratorAddress.set" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "AdministratorAddress.set" -> "LibUnstructuredStorage.setStorageAddress" [ color = "white" ];
  "Version.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "Version.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "RiverAddress.get" -> "LibUnstructuredStorage.getStorageAddress" [ color = "white" ];
  "RiverAddress.set" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "RiverAddress.set" -> "LibUnstructuredStorage.setStorageAddress" [ color = "white" ];
  "PendingAdministratorAddress.get" -> "LibUnstructuredStorage.getStorageAddress" [ color = "white" ];
  "PendingAdministratorAddress.set" -> "LibUnstructuredStorage.setStorageAddress" [ color = "white" ];
  "ELFeeRecipientAddress.get" -> "LibUnstructuredStorage.getStorageAddress" [ color = "white" ];
  "ELFeeRecipientAddress.set" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "ELFeeRecipientAddress.set" -> "LibUnstructuredStorage.setStorageAddress" [ color = "white" ];
  "LastOracleRoundId.get" -> "LibUnstructuredStorage.getStorageBytes32" [ color = "white" ];
  "LastOracleRoundId.set" -> "LibUnstructuredStorage.setStorageBytes32" [ color = "white" ];
  "BalanceToDeposit.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "BalanceToDeposit.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "OracleAddress.get" -> "LibUnstructuredStorage.getStorageAddress" [ color = "white" ];
  "OracleAddress.set" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "OracleAddress.set" -> "LibUnstructuredStorage.setStorageAddress" [ color = "white" ];
  "RedeemManagerAddress.get" -> "LibUnstructuredStorage.getStorageAddress" [ color = "white" ];
  "RedeemManagerAddress.set" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "RedeemManagerAddress.set" -> "LibUnstructuredStorage.setStorageAddress" [ color = "white" ];
  "GlobalFee.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "GlobalFee.set" -> "LibSanitize._validFee" [ color = "white" ];
  "GlobalFee.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "CLValidatorCount.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "CLValidatorCount.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "CommittedBalance.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "CommittedBalance.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "CoverageFundAddress.get" -> "LibUnstructuredStorage.getStorageAddress" [ color = "white" ];
  "CoverageFundAddress.set" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "CoverageFundAddress.set" -> "LibUnstructuredStorage.setStorageAddress" [ color = "white" ];
  "CLValidatorTotalBalance.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "CLValidatorTotalBalance.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "CollectorAddress.get" -> "LibUnstructuredStorage.getStorageAddress" [ color = "white" ];
  "CollectorAddress.set" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "CollectorAddress.set" -> "LibUnstructuredStorage.setStorageAddress" [ color = "white" ];
  "AllowlistAddress.get" -> "LibUnstructuredStorage.getStorageAddress" [ color = "white" ];
  "AllowlistAddress.set" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "AllowlistAddress.set" -> "LibUnstructuredStorage.setStorageAddress" [ color = "white" ];
  "LastEpochId.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "LastEpochId.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "WithdrawalCredentials.get" -> "LibUnstructuredStorage.getStorageBytes32" [ color = "white" ];
  "WithdrawalCredentials.getAddress" -> "LibUnstructuredStorage.getStorageAddress" [ color = "white" ];
  "WithdrawalCredentials.set" -> "LibErrors.InvalidArgument" [ color = "white" ];
  "WithdrawalCredentials.set" -> "LibUnstructuredStorage.setStorageBytes32" [ color = "white" ];
  "DepositedValidatorCount.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "DepositedValidatorCount.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "OperatorsRegistryAddress.get" -> "LibUnstructuredStorage.getStorageAddress" [ color = "white" ];
  "OperatorsRegistryAddress.set" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "OperatorsRegistryAddress.set" -> "LibUnstructuredStorage.setStorageAddress" [ color = "white" ];
  "ReportsPositions.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "ReportsPositions.getRaw" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "ReportsPositions.register" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "ReportsPositions.register" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "ReportsPositions.clear" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "DepositContractAddress.get" -> "LibUnstructuredStorage.getStorageAddress" [ color = "white" ];
  "DepositContractAddress.set" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "DepositContractAddress.set" -> "LibUnstructuredStorage.setStorageAddress" [ color = "white" ];
  "Shares.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "Shares.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "BalanceToRedeem.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "BalanceToRedeem.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "Quorum.get" -> "LibUnstructuredStorage.getStorageUint256" [ color = "white" ];
  "Quorum.set" -> "LibUnstructuredStorage.setStorageUint256" [ color = "white" ];
  "OracleMembers.push" -> "LibSanitize._notZeroAddress" [ color = "white" ];
  "VestingSchedulesV1.get" -> "VestingSchedulesV1.VestingScheduleNotFound" [ color = "#1bc6a6" ];
  "VestingSchedulesV2.get" -> "VestingSchedulesV2.VestingScheduleNotFound" [ color = "#1bc6a6" ];
  "VestingSchedulesV2.migrateVestingScheduleFromV1" -> "VestingSchedulesV1.get" [ color = "white" ];
  "VestingSchedulesV2.migrateVestingScheduleFromV1" -> "VestingSchedulesV2.VestingSchedule" [ color = "white" ];
  "VestingSchedulesV2.migrateVestingScheduleFromV1" -> "VestingSchedulesV2.push" [ color = "#1bc6a6" ];


rankdir=LR
node [shape=plaintext]
subgraph cluster_01 { 
label = "Legend";
key [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td align="right" port="i1">Internal Call</td></tr>
  <tr><td align="right" port="i2">External Call</td></tr>
  <tr><td align="right" port="i3">Defined Contract</td></tr>
  <tr><td align="right" port="i4">Undefined Contract</td></tr>
  </table>>]
key2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i3" bgcolor="#445773">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i4">
    <table border="1" cellborder="0" cellspacing="0" cellpadding="7" color="#e8726d">
      <tr>
       <td></td>
      </tr>
     </table>
  </td></tr>
  </table>>]
key:i1:e -> key2:i1:w [color="#1bc6a6"]
key:i2:e -> key2:i2:w [color="white"]
}
}
