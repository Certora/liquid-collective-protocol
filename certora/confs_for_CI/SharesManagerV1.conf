{
  "files": [
    "certora/harness/RiverV1Harness.sol",
    "contracts/src/Allowlist.1.sol:AllowlistV1",
    "contracts/src/CoverageFund.1.sol:CoverageFundV1",
    "contracts/src/ELFeeRecipient.1.sol:ELFeeRecipientV1",
    "certora/harness/OperatorsRegistryV1Harness.sol:OperatorsRegistryV1Harness",
    //"contracts/src/OperatorsRegistry.1.sol:OperatorsRegistryV1",
    "certora/harness/RedeemManagerV1Harness.sol",
    "contracts/src/Withdraw.1.sol:WithdrawV1",
    "contracts/src/mock/DepositContractMock.sol", // This is needed only when working with the Ethereum network outside.
  ],
  "verify": "RiverV1Harness:certora/specs_for_CI/SharesManagerV1_for_CI.spec",
  "link": [],
  "rule_sanity": "basic",
  "loop_iter": "4",
  "optimistic_loop": true,
  "packages": ["openzeppelin-contracts=lib/openzeppelin-contracts"],
  "optimistic_hashing": true,
  "solc": "solc8.20",
  "global_timeout": "7198",
  // default contractRecursionLimit is 0, 1 needed because we have 2 functions of the same name
  "contract_recursion_limit": "1", // River.resolveRedeemRequests(uint32[]) calls RedeemManager.resolveRedeemRequests(uint32[]) 
  "optimistic_fallback": true, // does not take to much additional time

  "prover_args": [    
    " -recursionErrorAsAssert false", //RedeemManager._claimRedeemRequest() is recursive TODO: experiment
    
    //"-cache none",
    "-depth 11",
    ],
  "optimistic_summary_recursion": true,
  "summary_recursion_limit" : "1",
  "server": "production",
  "prover_version": "master",
  "parametric_contracts": ["RiverV1Harness"],
  "msg": "SharesManagerV1",
  //"rule": ["sharesMonotonicWithAssets_forSecConsensusLayerData"],
}
