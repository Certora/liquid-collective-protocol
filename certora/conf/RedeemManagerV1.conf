{
  "files": [
  //  "certora/harness/RiverV1Harness.sol",
  //  "certora/munged/contracts/src/Allowlist.1.sol:AllowlistV1",
  //  "certora/munged/contracts/src/CoverageFund.1.sol:CoverageFundV1",
  //  "certora/munged/contracts/src/ELFeeRecipient.1.sol:ELFeeRecipientV1",
  //  "certora/munged/contracts/src/OperatorsRegistry.1.sol:OperatorsRegistryV1",
    "certora/harness/RedeemManagerV1Harness.sol",
  //  "certora/munged/contracts/src/Withdraw.1.sol:WithdrawV1",
  //  "certora/munged/contracts/src/mock/DepositContractMock.sol",
  ],
  "verify": "RedeemManagerV1Harness:certora/specs/RedeemManagerV1.spec",
  "rule_sanity": "basic",
  // loop_iter 4 is required for reachability of setConsensusLayerData()
  // loop_iter 5 is required for reachability of OperatorsRegistryV1.addValidators() which calls LibBytes.slice()
  "loop_iter": "2",
  "optimistic_loop": true,
  "packages": ["openzeppelin-contracts=lib/openzeppelin-contracts"],
  "solc": "solc8.20",
  "prover_args": [
  //  " -contractRecursionLimit 1", // River.resolveRedeemRequests(uint32[]) calls RedeemManager.resolveRedeemRequests(uint32[]) 
    " -recursionErrorAsAssert false", //RedeemManager._claimRedeemRequest() is recursive 
    " -optimisticFallback true",
    " -s z3",
    " -prettifyCEX extensive",
    ],
//  "optimistic_summary_recursion": true,
//  "summary_recursion_limit" : "1",
  "server": "staging",
  "prover_version": "jtoman/cert-4706",
//  "parametric_contracts": ["RedeemManagerV1Harness"],
  "msg": "RedeemManagerV1 properties",
}
