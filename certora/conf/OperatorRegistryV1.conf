{
  "files": [
    //"certora/munged/contracts/src/Allowlist.1.sol:AllowlistV1",
    //"certora/munged/contracts/src/CoverageFund.1.sol:CoverageFundV1",
    //"certora/munged/contracts/src/ELFeeRecipient.1.sol:ELFeeRecipientV1",
    "certora/munged/contracts/src/OperatorsRegistry.1.sol:OperatorsRegistryV1",
    "certora/harness/OperatorsRegistryV1Harness.sol:OperatorsRegistryV1Harness",
    //"certora/harness/RedeemManagerV1Harness.sol",
    //"certora/munged/contracts/src/Withdraw.1.sol:WithdrawV1",
    //"certora/munged/contracts/src/mock/DepositContractMock.sol", // This is needed only when working with the Ethereum network outside.
  ],
  "verify": "OperatorsRegistryV1Harness:certora/specs/OperatorRegistryV1.spec",
  "link" : [],
  //"rule_sanity": "basic",
  // loop_iter 4 is required for setConsensusLayerData()
  // loop_iter 5 is required for OperatorsRegistryV1.addValidators() which calls LibBytes.slice()
  "loop_iter": "3",
  "optimistic_loop": true,
  "packages": ["openzeppelin-contracts=lib/openzeppelin-contracts"],
  "optimistic_hashing": true,
  "solc": "solc8.20",
  //"multi_assert_check": true,
  "smt_timeout": "5000",
  "prover_args": [
    //" -contractRecursionLimit 1", // River.resolveRedeemRequests(uint32[]) calls RedeemManager.resolveRedeemRequests(uint32[]) 
    //" -recursionErrorAsAssert false", //RedeemManager._claimRedeemRequest() is recursive 
    " -optimisticFallback true",
    //"-depth 1",
    //"-mediumTimeout 1000",
    //"-singleRaceSolverConfig true", //will turn off NIA unless -smt_useNIA true
    //"-smt_useLIA false",
    //"-smt_useNIA true",
    ],
  //"optimistic_summary_recursion": true,
  //"summary_recursion_limit" : "1",
  "msg": "OperatorsRegistryV1 all LI3",
//"rule": ["startingValidatorsDecreasesDiscrepancy", "exitingValidatorsDecreasesDiscrepancy"],
"rule": ["whoCanDeactivateOperator", "whoCanChangeOperatorsCount"],

"server": "production",
"prover_version": "jtoman/cert-4615",
}
