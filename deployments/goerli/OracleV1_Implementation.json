{
  "address": "0x2C5aa1219984Cf93d1f8eBB1A7FA302C289f881B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        }
      ],
      "name": "AlreadyReported",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_prevTotalEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_postTotalEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relativeLowerBound",
          "type": "uint256"
        }
      ],
      "name": "BeaconBalanceDecreaseOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_prevTotalEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_postTotalEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_annualAprUpperBound",
          "type": "uint256"
        }
      ],
      "name": "BeaconBalanceIncreaseOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_providedEpochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minExpectedEpochId",
          "type": "uint256"
        }
      ],
      "name": "EpochTooOld",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_providedEpochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expectedFrameFirstEpochId",
          "type": "uint256"
        }
      ],
      "name": "NotFrameFirstEpochId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_newBeaconBalance",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_newBeaconValidatorCount",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oracleMember",
          "type": "address"
        }
      ],
      "name": "BeaconReported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        }
      ],
      "name": "ExpectedEpochIdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_postTotalEth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_prevTotalEth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timeElapsed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalShares",
          "type": "uint256"
        }
      ],
      "name": "PostTotalShares",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newQuorum",
          "type": "uint256"
        }
      ],
      "name": "QuorumChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOracleMember",
          "type": "address"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdministrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconBounds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "annualAprUpperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "relativeLowerBound",
              "type": "uint256"
            }
          ],
          "internalType": "struct BeaconReportBounds.BeaconReportBoundsStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconSpec",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "epochsPerFrame",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "slotsPerEpoch",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "secondsPerSlot",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "genesisTime",
              "type": "uint64"
            }
          ],
          "internalType": "struct BeaconSpec.BeaconSpecStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentFrame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_startEpochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExpectedEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        }
      ],
      "name": "getFrameFirstEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGlobalReportStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastCompletedEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleMember",
          "type": "address"
        }
      ],
      "name": "getMemberReportStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracleMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getQuorum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getReportVariant",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "_beaconBalance",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_beaconValidators",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_reportCount",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReportVariantsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_riverContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_administratorAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_epochsPerFrame",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_slotsPerEpoch",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_secondsPerSlot",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_genesisTime",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_annualAprUpperBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relativeLowerBound",
          "type": "uint256"
        }
      ],
      "name": "initOracleV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleMember",
          "type": "address"
        }
      ],
      "name": "removeMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_beaconBalance",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_beaconValidators",
          "type": "uint32"
        }
      ],
      "name": "reportBeacon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_annualAprUpperBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relativeLowerBound",
          "type": "uint256"
        }
      ],
      "name": "setBeaconBounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_epochsPerFrame",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_slotsPerEpoch",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_secondsPerSlot",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_genesisTime",
          "type": "uint64"
        }
      ],
      "name": "setBeaconSpec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newQuorum",
          "type": "uint256"
        }
      ],
      "name": "setQuorum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0376d1eabe4db1442fd964f52d9ae43d7c7030cb704b3e8047e7b0540c15ff34",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0x2C5aa1219984Cf93d1f8eBB1A7FA302C289f881B",
    "transactionIndex": 126,
    "gasUsed": "1837848",
    "logsBloom": "0x
    "blockHash": "0xd62291c6a637e43e6575412b8f8a382ed0b9fe598827f937e62babaee0d31088",
    "transactionHash": "0x0376d1eabe4db1442fd964f52d9ae43d7c7030cb704b3e8047e7b0540c15ff34",
    "logs": [],
    "blockNumber": 6472880,
    "cumulativeGasUsed": "4775783",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d08ef7e074cf01664f11c9c7b1902cb7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"AlreadyReported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prevTotalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_postTotalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relativeLowerBound\",\"type\":\"uint256\"}],\"name\":\"BeaconBalanceDecreaseOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prevTotalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_postTotalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_annualAprUpperBound\",\"type\":\"uint256\"}],\"name\":\"BeaconBalanceIncreaseOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providedEpochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minExpectedEpochId\",\"type\":\"uint256\"}],\"name\":\"EpochTooOld\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providedEpochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedFrameFirstEpochId\",\"type\":\"uint256\"}],\"name\":\"NotFrameFirstEpochId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_newBeaconBalance\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newBeaconValidatorCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oracleMember\",\"type\":\"address\"}],\"name\":\"BeaconReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"ExpectedEpochIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_postTotalEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prevTotalEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeElapsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalShares\",\"type\":\"uint256\"}],\"name\":\"PostTotalShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newQuorum\",\"type\":\"uint256\"}],\"name\":\"QuorumChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracleMember\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdministrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconBounds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"annualAprUpperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relativeLowerBound\",\"type\":\"uint256\"}],\"internalType\":\"struct BeaconReportBounds.BeaconReportBoundsStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconSpec\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"epochsPerFrame\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slotsPerEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondsPerSlot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"genesisTime\",\"type\":\"uint64\"}],\"internalType\":\"struct BeaconSpec.BeaconSpecStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentFrame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_startEpochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"getFrameFirstEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalReportStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastCompletedEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleMember\",\"type\":\"address\"}],\"name\":\"getMemberReportStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getReportVariant\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"_beaconBalance\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_beaconValidators\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_reportCount\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReportVariantsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_riverContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_administratorAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_epochsPerFrame\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_slotsPerEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_secondsPerSlot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_genesisTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_annualAprUpperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relativeLowerBound\",\"type\":\"uint256\"}],\"name\":\"initOracleV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleMember\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_beaconBalance\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_beaconValidators\",\"type\":\"uint32\"}],\"name\":\"reportBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_annualAprUpperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relativeLowerBound\",\"type\":\"uint256\"}],\"name\":\"setBeaconBounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_epochsPerFrame\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_slotsPerEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_secondsPerSlot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_genesisTime\",\"type\":\"uint64\"}],\"name\":\"setBeaconSpec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newQuorum\",\"type\":\"uint256\"}],\"name\":\"setQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SkillZ\",\"kind\":\"dev\",\"methods\":{\"addMember(address)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_newOracleMember\":\"Address of the new member\"}},\"getFrameFirstEpochId(uint256)\":{\"params\":{\"_epochId\":\"Epoch id used to get the frame\"}},\"getMemberReportStatus(address)\":{\"params\":{\"_oracleMember\":\"Address of member to check\"}},\"getReportVariant(uint256)\":{\"params\":{\"_idx\":\"Index of report\"}},\"initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)\":{\"params\":{\"_administratorAddress\":\"Address able to call administrative methods\",\"_annualAprUpperBound\":\"Beacon bound parameter. Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\",\"_epochsPerFrame\":\"Beacon spec parameter. Number of epochs in a frame.\",\"_genesisTime\":\"Beacon spec parameter. Timestamp of the genesis slot.\",\"_relativeLowerBound\":\"Beacon bound parameter. Maximum relative balance decrease.\",\"_riverContractAddress\":\"Address of the River contract, able to receive oracle input data after quorum is met\",\"_secondsPerSlot\":\"Beacon spec parameter. Number of seconds between slots.\",\"_slotsPerEpoch\":\"Beacon spec parameter. Number of slots in one epoch.\"}},\"isMember(address)\":{\"details\":\"Performs a naive search, do not call this on-chain, used as an off-chain helper\",\"params\":{\"_memberAddress\":\"Address of the member\"}},\"removeMember(address)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_oracleMember\":\"Address to remove\"}},\"reportBeacon(uint256,uint64,uint32)\":{\"details\":\"Only callable by an oracle member\",\"params\":{\"_beaconBalance\":\"Total balance of River validators\",\"_beaconValidators\":\"Total River validator count\",\"_epochId\":\"Epoch where the balance and validator count has been computed\"}},\"setBeaconBounds(uint256,uint256)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_annualAprUpperBound\":\"Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\",\"_relativeLowerBound\":\"Maximum relative balance decrease.\"}},\"setBeaconSpec(uint64,uint64,uint64,uint64)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_epochsPerFrame\":\"Number of epochs in a frame.\",\"_genesisTime\":\"Timestamp of the genesis slot.\",\"_secondsPerSlot\":\"Number of seconds between slots.\",\"_slotsPerEpoch\":\"Number of slots in one epoch.\"}},\"setQuorum(uint256)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_newQuorum\":\"New quorum parameter\"}}},\"title\":\"Oracle (v1)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMember(address)\":{\"notice\":\"Adds new address as oracle member, giving the ability to push beacon reports.\"},\"getAdministrator()\":{\"notice\":\"Retrieve system administrator address\"},\"getBeaconSpec()\":{\"notice\":\"Retrieve the current beacon spec\"},\"getCurrentEpochId()\":{\"notice\":\"Retrieve the current epoch id based on block timestamp\"},\"getCurrentFrame()\":{\"notice\":\"Retrieve the current frame details\"},\"getExpectedEpochId()\":{\"notice\":\"Retrieve expected epoch id\"},\"getFrameFirstEpochId(uint256)\":{\"notice\":\"Retrieve the first epoch id of the frame of the provided epoch id\"},\"getGlobalReportStatus()\":{\"notice\":\"Retrieve member report status\"},\"getLastCompletedEpochId()\":{\"notice\":\"Retrieve the last completed epoch id\"},\"getMemberReportStatus(address)\":{\"notice\":\"Retrieve member report status\"},\"getQuorum()\":{\"notice\":\"Retrieve the current quorum\"},\"getReportVariant(uint256)\":{\"notice\":\"Retrieve decoded report at provided index\"},\"getReportVariantsCount()\":{\"notice\":\"Retrieve report variants count\"},\"getTime()\":{\"notice\":\"Retrieve the block timestamp\"},\"initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)\":{\"notice\":\"Initializes the oracle\"},\"isMember(address)\":{\"notice\":\"Returns true if address is member\"},\"removeMember(address)\":{\"notice\":\"Removes an address from the oracle members.\"},\"reportBeacon(uint256,uint64,uint32)\":{\"notice\":\"Report beacon chain data\"},\"setBeaconBounds(uint256,uint256)\":{\"notice\":\"Edits the beacon bounds parameters\"},\"setBeaconSpec(uint64,uint64,uint64,uint64)\":{\"notice\":\"Edits the beacon spec parameters\"},\"setQuorum(uint256)\":{\"notice\":\"Edits the quorum required to forward beacon data to River\"}},\"notice\":\"This contract handles the input from the allowed oracle members. Highly inspired by Lido's implementation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/Oracle.1.sol\":\"OracleV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\ncontract Initializable {\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    modifier init(uint256 version) {\\n        if (version != Version.get()) {\\n            revert InvalidInitialization(version, Version.get());\\n        }\\n        Version.set(version + 1); // prevents reentrency on the called method\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc93555f4bd660f91e565f20753e0d3a01e783e673bc0209d0d1e33c7b6941053\",\"license\":\"BUSL-1.1\"},\"contracts/src/Oracle.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./libraries/LibOwnable.sol\\\";\\nimport \\\"./interfaces/IRiverOracleInput.sol\\\";\\n\\nimport \\\"./state/shared/AdministratorAddress.sol\\\";\\nimport \\\"./state/oracle/RiverAddress.sol\\\";\\nimport \\\"./state/oracle/OracleMembers.sol\\\";\\nimport \\\"./state/oracle/Quorum.sol\\\";\\nimport \\\"./state/oracle/BeaconSpec.sol\\\";\\nimport \\\"./state/oracle/BeaconReportBounds.sol\\\";\\nimport \\\"./state/oracle/ExpectedEpochId.sol\\\";\\nimport \\\"./state/oracle/LastEpochId.sol\\\";\\nimport \\\"./state/oracle/ReportsPositions.sol\\\";\\nimport \\\"./state/oracle/ReportsVariants.sol\\\";\\n\\n/// @title Oracle (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the input from the allowed oracle members. Highly inspired by Lido's implementation.\\ncontract OracleV1 is Initializable {\\n    /// @notice Received ETH input has only 9 decimals\\n    uint128 internal constant DENOMINATION_OFFSET = 1e9;\\n\\n    error EpochTooOld(uint256 _providedEpochId, uint256 _minExpectedEpochId);\\n    error NotFrameFirstEpochId(uint256 _providedEpochId, uint256 _expectedFrameFirstEpochId);\\n    error AlreadyReported(uint256 _epochId, address _member);\\n    error BeaconBalanceIncreaseOutOfBounds(\\n        uint256 _prevTotalEth,\\n        uint256 _postTotalEth,\\n        uint256 _timeElapsed,\\n        uint256 _annualAprUpperBound\\n    );\\n    error BeaconBalanceDecreaseOutOfBounds(\\n        uint256 _prevTotalEth,\\n        uint256 _postTotalEth,\\n        uint256 _timeElapsed,\\n        uint256 _relativeLowerBound\\n    );\\n\\n    event QuorumChanged(uint256 _newQuorum);\\n    event ExpectedEpochIdUpdated(uint256 _epochId);\\n    event BeaconReported(\\n        uint256 _epochId,\\n        uint128 _newBeaconBalance,\\n        uint32 _newBeaconValidatorCount,\\n        address _oracleMember\\n    );\\n    event PostTotalShares(uint256 _postTotalEth, uint256 _prevTotalEth, uint256 _timeElapsed, uint256 _totalShares);\\n\\n    /// @notice Initializes the oracle\\n    /// @param _riverContractAddress Address of the River contract, able to receive oracle input data after quorum is met\\n    /// @param _administratorAddress Address able to call administrative methods\\n    /// @param _epochsPerFrame Beacon spec parameter. Number of epochs in a frame.\\n    /// @param _slotsPerEpoch Beacon spec parameter. Number of slots in one epoch.\\n    /// @param _secondsPerSlot Beacon spec parameter. Number of seconds between slots.\\n    /// @param _genesisTime Beacon spec parameter. Timestamp of the genesis slot.\\n    /// @param _annualAprUpperBound Beacon bound parameter. Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\\n    /// @param _relativeLowerBound Beacon bound parameter. Maximum relative balance decrease.\\n    function initOracleV1(\\n        address _riverContractAddress,\\n        address _administratorAddress,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound\\n    ) external init(0) {\\n        LibOwnable._setAdmin(_administratorAddress);\\n        RiverAddress.set(_riverContractAddress);\\n        BeaconSpec.set(\\n            BeaconSpec.BeaconSpecStruct({\\n                epochsPerFrame: _epochsPerFrame,\\n                slotsPerEpoch: _slotsPerEpoch,\\n                secondsPerSlot: _secondsPerSlot,\\n                genesisTime: _genesisTime\\n            })\\n        );\\n        BeaconReportBounds.set(\\n            BeaconReportBounds.BeaconReportBoundsStruct({\\n                annualAprUpperBound: _annualAprUpperBound,\\n                relativeLowerBound: _relativeLowerBound\\n            })\\n        );\\n        Quorum.set(1);\\n    }\\n\\n    /// @notice Retrieve system administrator address\\n    function getAdministrator() external view returns (address) {\\n        return LibOwnable._getAdmin();\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Retrieve the block timestamp\\n    function getTime() external view returns (uint256) {\\n        return _getTime();\\n    }\\n\\n    /// @notice Retrieve expected epoch id\\n    function getExpectedEpochId() external view returns (uint256) {\\n        return ExpectedEpochId.get();\\n    }\\n\\n    /// @notice Retrieve member report status\\n    /// @param _oracleMember Address of member to check\\n    function getMemberReportStatus(address _oracleMember) external view returns (bool) {\\n        int256 memberIndex = OracleMembers.indexOf(_oracleMember);\\n        return ReportsPositions.get(uint256(memberIndex));\\n    }\\n\\n    /// @notice Retrieve member report status\\n    function getGlobalReportStatus() external view returns (uint256) {\\n        return ReportsPositions.getRaw();\\n    }\\n\\n    /// @notice Retrieve report variants count\\n    function getReportVariantsCount() external view returns (uint256) {\\n        return ReportsVariants.get().length;\\n    }\\n\\n    /// @notice Retrieve decoded report at provided index\\n    /// @param _idx Index of report\\n    function getReportVariant(uint256 _idx)\\n        external\\n        view\\n        returns (\\n            uint64 _beaconBalance,\\n            uint32 _beaconValidators,\\n            uint16 _reportCount\\n        )\\n    {\\n        uint256 report = ReportsVariants.get()[_idx];\\n        (_beaconBalance, _beaconValidators) = _decodeReport(report);\\n        _reportCount = _getReportCount(report);\\n    }\\n\\n    /// @notice Retrieve the last completed epoch id\\n    function getLastCompletedEpochId() external view returns (uint256) {\\n        return LastEpochId.get();\\n    }\\n\\n    /// @notice Retrieve the current epoch id based on block timestamp\\n    function getCurrentEpochId() external view returns (uint256) {\\n        BeaconSpec.BeaconSpecStruct memory beaconSpec = BeaconSpec.get();\\n        return _getCurrentEpochId(beaconSpec);\\n    }\\n\\n    /// @notice Retrieve the current quorum\\n    function getQuorum() external view returns (uint256) {\\n        return Quorum.get();\\n    }\\n\\n    /// @notice Retrieve the current beacon spec\\n    function getBeaconSpec() external view returns (BeaconSpec.BeaconSpecStruct memory) {\\n        return BeaconSpec.get();\\n    }\\n\\n    /// @notice Retrieve the current frame details\\n    function getCurrentFrame()\\n        external\\n        view\\n        returns (\\n            uint256 _startEpochId,\\n            uint256 _startTime,\\n            uint256 _endTime\\n        )\\n    {\\n        BeaconSpec.BeaconSpecStruct memory beaconSpec = BeaconSpec.get();\\n        _startEpochId = _getFrameFirstEpochId(_getCurrentEpochId(beaconSpec), beaconSpec);\\n        _startTime = beaconSpec.genesisTime + _startEpochId * beaconSpec.secondsPerSlot * beaconSpec.slotsPerEpoch;\\n        _endTime = _startTime + beaconSpec.secondsPerSlot * beaconSpec.slotsPerEpoch * beaconSpec.epochsPerFrame - 1;\\n    }\\n\\n    /// @notice Retrieve the first epoch id of the frame of the provided epoch id\\n    /// @param _epochId Epoch id used to get the frame\\n    function getFrameFirstEpochId(uint256 _epochId) external view returns (uint256) {\\n        BeaconSpec.BeaconSpecStruct memory beaconSpec = BeaconSpec.get();\\n        return _getFrameFirstEpochId(_epochId, beaconSpec);\\n    }\\n\\n    function getBeaconBounds() external view returns (BeaconReportBounds.BeaconReportBoundsStruct memory) {\\n        return BeaconReportBounds.get();\\n    }\\n\\n    function getOracleMembers() external view returns (address[] memory) {\\n        return OracleMembers.get();\\n    }\\n\\n    /// @notice Returns true if address is member\\n    /// @dev Performs a naive search, do not call this on-chain, used as an off-chain helper\\n    /// @param _memberAddress Address of the member\\n    function isMember(address _memberAddress) external view returns (bool) {\\n        address[] memory members = OracleMembers.get();\\n        for (uint256 idx = 0; idx < members.length; ++idx) {\\n            if (members[idx] == _memberAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Adds new address as oracle member, giving the ability to push beacon reports.\\n    /// @dev Only callable by the adminstrator\\n    /// @param _newOracleMember Address of the new member\\n    function addMember(address _newOracleMember) external onlyAdmin {\\n        int256 memberIdx = OracleMembers.indexOf(_newOracleMember);\\n        if (memberIdx >= 0) {\\n            revert Errors.InvalidCall();\\n        }\\n        OracleMembers.push(_newOracleMember);\\n    }\\n\\n    /// @notice Removes an address from the oracle members.\\n    /// @dev Only callable by the adminstrator\\n    /// @param _oracleMember Address to remove\\n    function removeMember(address _oracleMember) external onlyAdmin {\\n        int256 memberIdx = OracleMembers.indexOf(_oracleMember);\\n        if (memberIdx < 0) {\\n            revert Errors.InvalidCall();\\n        }\\n        OracleMembers.deleteItem(uint256(memberIdx));\\n    }\\n\\n    /// @notice Edits the beacon spec parameters\\n    /// @dev Only callable by the adminstrator\\n    /// @param _epochsPerFrame Number of epochs in a frame.\\n    /// @param _slotsPerEpoch Number of slots in one epoch.\\n    /// @param _secondsPerSlot Number of seconds between slots.\\n    /// @param _genesisTime Timestamp of the genesis slot.\\n    function setBeaconSpec(\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime\\n    ) external onlyAdmin {\\n        BeaconSpec.set(\\n            BeaconSpec.BeaconSpecStruct({\\n                epochsPerFrame: _epochsPerFrame,\\n                slotsPerEpoch: _slotsPerEpoch,\\n                secondsPerSlot: _secondsPerSlot,\\n                genesisTime: _genesisTime\\n            })\\n        );\\n    }\\n\\n    /// @notice Edits the beacon bounds parameters\\n    /// @dev Only callable by the adminstrator\\n    /// @param _annualAprUpperBound Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\\n    /// @param _relativeLowerBound Maximum relative balance decrease.\\n    function setBeaconBounds(uint256 _annualAprUpperBound, uint256 _relativeLowerBound) external onlyAdmin {\\n        BeaconReportBounds.set(\\n            BeaconReportBounds.BeaconReportBoundsStruct({\\n                annualAprUpperBound: _annualAprUpperBound,\\n                relativeLowerBound: _relativeLowerBound\\n            })\\n        );\\n    }\\n\\n    /// @notice Edits the quorum required to forward beacon data to River\\n    /// @dev Only callable by the adminstrator\\n    /// @param _newQuorum New quorum parameter\\n    function setQuorum(uint256 _newQuorum) external onlyAdmin {\\n        if (_newQuorum == 0) {\\n            revert Errors.InvalidArgument();\\n        }\\n        uint256 previousQuorum = Quorum.get();\\n        if (_newQuorum == previousQuorum) {\\n            revert Errors.InvalidCall();\\n        }\\n        Quorum.set(_newQuorum);\\n        emit QuorumChanged(_newQuorum);\\n        if (previousQuorum > _newQuorum) {\\n            (bool isQuorum, uint256 report) = _getQuorumReport(_newQuorum);\\n            if (isQuorum) {\\n                (uint64 beaconBalance, uint32 beaconValidators) = _decodeReport(report);\\n                _pushToRiver(\\n                    ExpectedEpochId.get(),\\n                    DENOMINATION_OFFSET * uint128(beaconBalance),\\n                    beaconValidators,\\n                    BeaconSpec.get()\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Report beacon chain data\\n    /// @dev Only callable by an oracle member\\n    /// @param _epochId Epoch where the balance and validator count has been computed\\n    /// @param _beaconBalance Total balance of River validators\\n    /// @param _beaconValidators Total River validator count\\n    function reportBeacon(\\n        uint256 _epochId,\\n        uint64 _beaconBalance,\\n        uint32 _beaconValidators\\n    ) external {\\n        BeaconSpec.BeaconSpecStruct memory beaconSpec = BeaconSpec.get();\\n        uint256 expectedEpochId = ExpectedEpochId.get();\\n        if (_epochId < expectedEpochId) {\\n            revert EpochTooOld(_epochId, expectedEpochId);\\n        }\\n\\n        if (_epochId > expectedEpochId) {\\n            uint256 frameFirstEpochId = _getFrameFirstEpochId(_getCurrentEpochId(beaconSpec), beaconSpec);\\n            if (_epochId != frameFirstEpochId) {\\n                revert NotFrameFirstEpochId(_epochId, frameFirstEpochId);\\n            }\\n            _clearReporting(_epochId);\\n        }\\n\\n        uint128 beaconBalanceEth1 = DENOMINATION_OFFSET * uint128(_beaconBalance);\\n        emit BeaconReported(_epochId, beaconBalanceEth1, _beaconValidators, msg.sender);\\n\\n        int256 memberIndex = OracleMembers.indexOf(msg.sender);\\n        if (memberIndex == -1) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        if (ReportsPositions.get(uint256(memberIndex))) {\\n            revert AlreadyReported(_epochId, msg.sender);\\n        }\\n        ReportsPositions.register(uint256(memberIndex));\\n\\n        uint256 report = _encodeReport(_beaconBalance, _beaconValidators);\\n        int256 reportIndex = ReportsVariants.indexOfReport(report);\\n        uint256 quorum = Quorum.get();\\n\\n        if (reportIndex >= 0) {\\n            uint256 registeredReport = ReportsVariants.get()[uint256(reportIndex)];\\n            if (_getReportCount(registeredReport) + 1 >= quorum) {\\n                _pushToRiver(_epochId, beaconBalanceEth1, _beaconValidators, beaconSpec);\\n            } else {\\n                ReportsVariants.set(uint256(reportIndex), registeredReport + 1);\\n            }\\n        } else {\\n            if (quorum == 1) {\\n                _pushToRiver(_epochId, beaconBalanceEth1, _beaconValidators, beaconSpec);\\n            } else {\\n                ReportsVariants.push(report + 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Retrieve the report that has the highest number of \\\"votes\\\"\\n    /// @param _quorum The quorum used for the query\\n    function _getQuorumReport(uint256 _quorum) internal view returns (bool isQuorum, uint256 report) {\\n        // check most frequent cases first: all reports are the same or no reports yet\\n        uint256[] memory variants = ReportsVariants.get();\\n        if (variants.length == 1) {\\n            return (_getReportCount(variants[0]) >= _quorum, variants[0]);\\n        } else if (variants.length == 0) {\\n            return (false, 0);\\n        }\\n\\n        // if more than 2 kind of reports exist, choose the most frequent\\n        uint256 maxind = 0;\\n        uint256 repeat = 0;\\n        uint16 maxval = 0;\\n        uint16 cur = 0;\\n        for (uint256 i = 0; i < variants.length; ++i) {\\n            cur = _getReportCount(variants[i]);\\n            if (cur >= maxval) {\\n                if (cur == maxval) {\\n                    ++repeat;\\n                } else {\\n                    maxind = i;\\n                    maxval = cur;\\n                    repeat = 0;\\n                }\\n            }\\n        }\\n        return (maxval >= _quorum && repeat == 0, variants[maxind]);\\n    }\\n\\n    /// @notice Retrieve the block timestamp\\n    function _getTime() internal view returns (uint256) {\\n        return block.timestamp; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /// @notice Retrieve the current epoch id based on block timestamp\\n    /// @param _beaconSpec Beacon spec parameters\\n    function _getCurrentEpochId(BeaconSpec.BeaconSpecStruct memory _beaconSpec) internal view returns (uint256) {\\n        return (_getTime() - _beaconSpec.genesisTime) / (_beaconSpec.slotsPerEpoch * _beaconSpec.secondsPerSlot);\\n    }\\n\\n    /// @notice Retrieve the first epoch id of the frame of the provided epoch id\\n    /// @param _epochId Epoch id used to get the frame\\n    /// @param _beaconSpec Beacon spec parameters\\n    function _getFrameFirstEpochId(uint256 _epochId, BeaconSpec.BeaconSpecStruct memory _beaconSpec)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_epochId / _beaconSpec.epochsPerFrame) * _beaconSpec.epochsPerFrame;\\n    }\\n\\n    /// @notice Clear reporting data\\n    /// @param _epochId Next expected epoch id (first epoch of the next frame)\\n    function _clearReporting(uint256 _epochId) internal {\\n        ReportsPositions.clear();\\n        ReportsVariants.clear();\\n        ExpectedEpochId.set(_epochId);\\n        emit ExpectedEpochIdUpdated(_epochId);\\n    }\\n\\n    /// @notice Encode report into one slot. Last 16 bits are free to use for vote counting.\\n    /// @param _beaconBalance Total validator balance\\n    /// @param _beaconValidators Total validator count\\n    function _encodeReport(uint64 _beaconBalance, uint32 _beaconValidators) internal pure returns (uint256) {\\n        return (uint256(_beaconBalance) << 48) | (uint256(_beaconValidators) << 16);\\n    }\\n\\n    /// @notice Decode report from one slot to two variables, ignoring the last 16 bits\\n    /// @param _value Encoded report\\n    function _decodeReport(uint256 _value) internal pure returns (uint64 _beaconBalance, uint32 _beaconValidators) {\\n        _beaconBalance = uint64(_value >> 48);\\n        _beaconValidators = uint32(_value >> 16);\\n    }\\n\\n    /// @notice Retrieve the vote count from the encoded report (last 16 bits)\\n    /// @param _report Encoded report\\n    function _getReportCount(uint256 _report) internal pure returns (uint16) {\\n        return uint16(_report);\\n    }\\n\\n    /// @notice Performs sanity checks to prevent an erroneous update to the River system\\n    /// @param _postTotalEth Total validator balance after update\\n    /// @param _prevTotalEth Total validator balance before update\\n    /// @param _timeElapsed Time since last update\\n    function _sanityChecks(\\n        uint256 _postTotalEth,\\n        uint256 _prevTotalEth,\\n        uint256 _timeElapsed\\n    ) internal view {\\n        if (_postTotalEth >= _prevTotalEth) {\\n            // increase                 = _postTotalPooledEther - _preTotalPooledEther,\\n            // relativeIncrease         = increase / _preTotalPooledEther,\\n            // annualRelativeIncrease   = relativeIncrease / (timeElapsed / 365 days),\\n            // annualRelativeIncreaseBp = annualRelativeIncrease * 10000, in basis points 0.01% (1e-4)\\n            uint256 annualAprUpperBound = BeaconReportBounds.get().annualAprUpperBound;\\n            // check that annualRelativeIncreaseBp <= allowedAnnualRelativeIncreaseBp\\n            if (\\n                uint256(10000 * 365 days) * (_postTotalEth - _prevTotalEth) >\\n                annualAprUpperBound * _prevTotalEth * _timeElapsed\\n            ) {\\n                revert BeaconBalanceIncreaseOutOfBounds(\\n                    _prevTotalEth,\\n                    _postTotalEth,\\n                    _timeElapsed,\\n                    annualAprUpperBound\\n                );\\n            }\\n        } else {\\n            // decrease           = _preTotalPooledEther - _postTotalPooledEther\\n            // relativeDecrease   = decrease / _preTotalPooledEther\\n            // relativeDecreaseBp = relativeDecrease * 10000, in basis points 0.01% (1e-4)\\n            uint256 relativeLowerBound = BeaconReportBounds.get().relativeLowerBound;\\n            // check that relativeDecreaseBp <= allowedRelativeDecreaseBp\\n            if (uint256(10000) * (_prevTotalEth - _postTotalEth) > relativeLowerBound * _prevTotalEth) {\\n                revert BeaconBalanceDecreaseOutOfBounds(_prevTotalEth, _postTotalEth, _timeElapsed, relativeLowerBound);\\n            }\\n        }\\n    }\\n\\n    /// @notice Push the new beacon data to the river system and performs sanity checks\\n    /// @param _epochId Id of the epoch\\n    /// @param _balanceSum Total validator balance\\n    /// @param _validatorCount Total validator count\\n    /// @param _beaconSpec Beacon spec parameters\\n    function _pushToRiver(\\n        uint256 _epochId,\\n        uint128 _balanceSum,\\n        uint32 _validatorCount,\\n        BeaconSpec.BeaconSpecStruct memory _beaconSpec\\n    ) internal {\\n        _clearReporting(_epochId + _beaconSpec.epochsPerFrame);\\n\\n        IRiverOracleInput riverAddress = IRiverOracleInput(RiverAddress.get());\\n        uint256 prevTotalEth = riverAddress.totalSupply();\\n        riverAddress.setBeaconData(_validatorCount, _balanceSum, bytes32(_epochId));\\n        uint256 postTotalEth = riverAddress.totalSupply();\\n\\n        uint256 timeElapsed = (_epochId - LastEpochId.get()) * _beaconSpec.slotsPerEpoch * _beaconSpec.secondsPerSlot;\\n\\n        _sanityChecks(postTotalEth, prevTotalEth, timeElapsed);\\n        LastEpochId.set(_epochId);\\n\\n        emit PostTotalShares(postTotalEth, prevTotalEth, timeElapsed, riverAddress.totalShares());\\n    }\\n}\\n\",\"keccak256\":\"0x4d9dc6553db027ed6555bf5ac2456a29de1bdb7b620de9fcabfe0fa968337652\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiverOracleInput.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IRiverOracleInput {\\n    function setBeaconData(\\n        uint256 _validatorCount,\\n        uint256 _validatorBalanceSum,\\n        bytes32 _roundId\\n    ) external;\\n\\n    function totalSupply() external returns (uint256);\\n\\n    function totalShares() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x3c81f37602d3f604c7b2809325a49cee466e14cd8d244d91072fcd3c5a503d46\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    error Unauthorized(address caller);\\n    error InvalidCall();\\n    error InvalidArgument();\\n}\\n\",\"keccak256\":\"0xf3d3cec3d3d583aac19da0ace05f7ee067d47fd67e2a1f5f3195d7cbc5329325\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\n\\nlibrary LibOwnable {\\n    function _setAdmin(address newAdmin) internal {\\n        AdministratorAddress.set(newAdmin);\\n    }\\n\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n}\\n\",\"keccak256\":\"0xc189956546f854193e5fea6225b6eb0262ab192a97c4e32575eefe8205549794\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52ccf1daa33de9c72831e0d7458928c37ca7b5f8d8f732114095edeb81339920\",\"license\":\"MIT\"},\"contracts/src/state/oracle/BeaconReportBounds.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary BeaconReportBounds {\\n    // Lido Finance beacon spec data structure\\n    struct BeaconReportBoundsStruct {\\n        uint256 annualAprUpperBound;\\n        uint256 relativeLowerBound;\\n    }\\n\\n    uint256 public constant DELTA_BASE = 10_000;\\n\\n    bytes32 public constant BEACON_REPORT_BOUNDS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.beaconReportBounds\\\")) - 1);\\n\\n    struct Slot {\\n        BeaconReportBoundsStruct value;\\n    }\\n\\n    function get() internal view returns (BeaconReportBoundsStruct memory) {\\n        bytes32 slot = BEACON_REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    function set(BeaconReportBoundsStruct memory newBeaconReportBounds) internal {\\n        bytes32 slot = BEACON_REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = newBeaconReportBounds;\\n    }\\n}\\n\",\"keccak256\":\"0xf64353d723dfe0570c60f7b2523f4e78b2e6d2e85703bebb42e8b4652fe1314f\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/BeaconSpec.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary BeaconSpec {\\n    // Lido Finance beacon spec data structure\\n    struct BeaconSpecStruct {\\n        uint64 epochsPerFrame;\\n        uint64 slotsPerEpoch;\\n        uint64 secondsPerSlot;\\n        uint64 genesisTime;\\n    }\\n\\n    bytes32 public constant BEACON_SPEC_SLOT = bytes32(uint256(keccak256(\\\"river.state.beaconSpec\\\")) - 1);\\n\\n    struct Slot {\\n        BeaconSpecStruct value;\\n    }\\n\\n    function get() internal view returns (BeaconSpecStruct memory) {\\n        bytes32 slot = BEACON_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    function set(BeaconSpecStruct memory newBeaconSpec) internal {\\n        bytes32 slot = BEACON_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = newBeaconSpec;\\n    }\\n}\\n\",\"keccak256\":\"0x09cdfdaea399f0e9b0f1b96bbc9ea49a370763ab875bf2e13758f53b76919c73\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/ExpectedEpochId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary ExpectedEpochId {\\n    bytes32 public constant EXPECTED_EPOCH_ID_SLOT = bytes32(uint256(keccak256(\\\"river.state.expectedEpochId\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(EXPECTED_EPOCH_ID_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(EXPECTED_EPOCH_ID_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x0fa0977779c47e421a4d2252c2f09b880ff9f9b5a029e020d8c4d9292cf9586b\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/LastEpochId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary LastEpochId {\\n    bytes32 public constant LAST_EPOCH_ID_SLOT = bytes32(uint256(keccak256(\\\"river.state.lastEpochId\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(LAST_EPOCH_ID_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(LAST_EPOCH_ID_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x3cdadc224368eb2ef69a1ff030b2e4527a1c93c67c65c6de906d2bfa6e5cb079\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/OracleMembers.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary OracleMembers {\\n    bytes32 public constant ORACLE_MEMBERS_SLOT = bytes32(uint256(keccak256(\\\"river.state.oracleMembers\\\")) - 1);\\n\\n    struct Slot {\\n        address[] value;\\n    }\\n\\n    function get() internal view returns (address[] memory) {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    function push(address newOracleMember) internal {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(newOracleMember);\\n    }\\n\\n    function indexOf(address memberAddress) internal view returns (int256) {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (r.value[idx] == memberAddress) {\\n                return int256(idx);\\n            }\\n        }\\n\\n        return int256(-1);\\n    }\\n\\n    function deleteItem(uint256 idx) internal {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 lastIdx = r.value.length - 1;\\n        if (lastIdx != idx) {\\n            r.value[idx] = r.value[lastIdx];\\n        }\\n\\n        r.value.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x4276ba6064c47b3247b55758f73e9cea20d1d3bafb4dd8238d418aa49f796d52\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/Quorum.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Quorum {\\n    bytes32 public constant QUORUM_SLOT = bytes32(uint256(keccak256(\\\"river.state.quorum\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(QUORUM_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        return UnstructuredStorage.setStorageUint256(QUORUM_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x016efebfb97e7e2b0ab9d0b2e0f82918fd381bc58cdc8ae8d959a2a6df2ae543\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/ReportsPositions.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary ReportsPositions {\\n    bytes32 public constant REPORTS_POSITIONS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportsPositions\\\")) - 1);\\n\\n    function get(uint256 idx) internal view returns (bool) {\\n        uint256 mask = 1 << idx;\\n        return UnstructuredStorage.getStorageUint256(REPORTS_POSITIONS_SLOT) & mask == mask;\\n    }\\n\\n    function getRaw() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(REPORTS_POSITIONS_SLOT);\\n    }\\n\\n    function register(uint256 idx) internal {\\n        uint256 mask = 1 << idx;\\n        return\\n            UnstructuredStorage.setStorageUint256(\\n                REPORTS_POSITIONS_SLOT,\\n                UnstructuredStorage.getStorageUint256(REPORTS_POSITIONS_SLOT) | mask\\n            );\\n    }\\n\\n    function clear() internal {\\n        return UnstructuredStorage.setStorageUint256(REPORTS_POSITIONS_SLOT, 0);\\n    }\\n}\\n\",\"keccak256\":\"0xd3b92fdf77659202749248413e7d601b6f2bef527829b428db92690613bec5e8\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/ReportsVariants.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary ReportsVariants {\\n    uint256 internal constant COUNT_OUTMASK = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000;\\n\\n    bytes32 public constant REPORTS_VARIANTS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportsVariants\\\")) - 1);\\n\\n    struct Slot {\\n        uint256[] value;\\n    }\\n\\n    function get() internal view returns (uint256[] memory) {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    function set(uint256 idx, uint256 val) internal {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[idx] = val;\\n    }\\n\\n    function push(uint256 variant) internal {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(variant);\\n    }\\n\\n    function indexOfReport(uint256 variant) internal view returns (int256) {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (r.value[idx] & COUNT_OUTMASK == variant) {\\n                return int256(idx);\\n            }\\n        }\\n\\n        return int256(-1);\\n    }\\n\\n    function clear() internal {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        delete r.value;\\n    }\\n}\\n\",\"keccak256\":\"0x2576adae6764a8d5ccf632c3128eba147c29b2ac58f15a33a77da6c8a4f9efcc\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/RiverAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary RiverAddress {\\n    bytes32 public constant RIVER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.riverAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(RIVER_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(RIVER_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x99dfa57dd045b1efce296f6a7681c48132df5d7bf2fa5c1f22b158ff6396a572\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary AdministratorAddress {\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x6c103a106ff958994c38f055a316144416df36aeb299ba660e7b8af063931b72\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Version {\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VERSION_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf90d1ecf583061aa70dc464ec1fde21da6e9309601bcbba38f47d26257a1c656\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612058806100206000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c806391f10da0116100e3578063c26c12eb1161008c578063e547c77c11610066578063e547c77c1461034d578063e90b2da114610399578063fad2e86a146103ac57600080fd5b8063c26c12eb1461031d578063ca6d56dc14610325578063dabb57571461033857600080fd5b8063a29a839f116100bd578063a29a839f146102ef578063bc8b8f97146102f7578063c1ba4e591461030a57600080fd5b806391f10da0146102a657806393ef4511146102b9578063a230c524146102dc57600080fd5b80634b47b74f1161014557806357fa85471161011f57806357fa85471461026857806372f79b131461027b57806389896aef1461029e57600080fd5b80634b47b74f146102375780635190dce01461023f578063557ed1ba1461026257600080fd5b806314c8cd6a1161017657806314c8cd6a146101ee578063169674071461020457806331f208b31461022457600080fd5b80630b1ca49a146101925780631045a966146101a7575b600080fd5b6101a56101a0366004611cd6565b6103b4565b005b6101ba6101b5366004611cf1565b610430565b6040805167ffffffffffffffff909416845263ffffffff909216602084015261ffff16908201526060015b60405180910390f35b6101f6610479565b6040519081526020016101e5565b61020c610488565b6040516001600160a01b0390911681526020016101e5565b6101a5610232366004611d22565b610492565b6101f6610741565b61025261024d366004611cd6565b61074b565b60405190151581526020016101e5565b426101f6565b6101f6610276366004611cf1565b610769565b610283610780565b604080519384526020840192909252908201526060016101e5565b6101f661083d565b6101a56102b4366004611d6b565b610847565b6102c161089f565b604080518251815260209283015192810192909252016101e5565b6102526102ea366004611cd6565b6108bb565b6101f661092b565b6101a5610305366004611d8d565b610947565b6101a5610318366004611cf1565b610a43565b6101f6610b80565b6101a5610333366004611cd6565b610b8a565b610340610bfc565b6040516101e59190611e16565b610355610c06565b6040516101e59190815167ffffffffffffffff9081168252602080840151821690830152604080840151821690830152606092830151169181019190915260800190565b6101a56103a7366004611e63565b610c32565b6101f6610cbe565b6103bc610cce565b6001600160a01b0316336001600160a01b0316146103f45760405163472511eb60e11b81523360048201526024015b60405180910390fd5b60006103ff82610cd8565b905060008112156104235760405163574b16a760e11b815260040160405180910390fd5b61042c81610d73565b5050565b60008060008061043e610e75565b858151811061044f5761044f611eb7565b6020026020010151905061046c81603081901c9160109190911c90565b9096909550909350915050565b6000610483610efc565b905090565b6000610483610cce565b600061049c610f30565b905060006104a8610fdc565b9050808510156104ee576040517f09ec8ad200000000000000000000000000000000000000000000000000000000815260048101869052602481018290526044016103eb565b8085111561055a57600061050a6105048461100c565b8461105c565b905080861461054f576040517f983b675100000000000000000000000000000000000000000000000000000000815260048101879052602481018290526044016103eb565b6105588661107f565b505b600061057467ffffffffffffffff8616633b9aca00611ee3565b604080518881526fffffffffffffffffffffffffffffffff8316602082015263ffffffff87168183015233606082015290519192507ff9088c3664056902a1be808c28981aa5e97da5f1a2b3557233d04eed40a9b42a919081900360800190a160006105df33610cd8565b90508060001914156106065760405163472511eb60e11b81523360048201526024016103eb565b61060f816110ce565b1561064f576040517ff4d521a2000000000000000000000000000000000000000000000000000000008152600481018890523360248201526044016103eb565b61065881611111565b601085901b65ffffffff000016603087901b6dffffffffffffffff0000000000001617600061068682611179565b90506000610692611205565b9050600082126107085760006106a6610e75565b83815181106106b7576106b7611eb7565b60200260200101519050816106c98290565b6106d4906001611f1b565b61ffff16106106ee576106e98b878b8b611235565b610702565b610702836106fd836001611f41565b6114d9565b50610735565b80600114156107225761071d8a868a8a611235565b610735565b610735610730846001611f41565b611533565b50505050505050505050565b6000610483610fdc565b60008061075783610cd8565b9050610762816110ce565b9392505050565b600080610774610f30565b9050610762838261105c565b60008060008061078e610f30565b90506107a261079c8261100c565b8261105c565b9350806020015167ffffffffffffffff16816040015167ffffffffffffffff16856107cd9190611f59565b6107d79190611f59565b816060015167ffffffffffffffff166107f09190611f41565b9250600181600001518260200151836040015161080d9190611f78565b6108179190611f78565b61082b9067ffffffffffffffff1685611f41565b6108359190611f9f565b915050909192565b600061048361157a565b61084f610cce565b6001600160a01b0316336001600160a01b0316146108825760405163472511eb60e11b81523360048201526024016103eb565b61042c6040518060400160405280848152602001838152506115aa565b60408051808201909152600080825260208201526104836115ed565b6000806108c661164d565b905060005b815181101561092157836001600160a01b03168282815181106108f0576108f0611eb7565b60200260200101516001600160a01b03161415610911575060019392505050565b61091a81611fb6565b90506108cb565b5060009392505050565b600080610936610f30565b90506109418161100c565b91505090565b60006109516116dd565b811461099b57806109606116dd565b6040517fe7e93b38000000000000000000000000000000000000000000000000000000008152600481019290925260248201526044016103eb565b6109ae6109a9826001611f41565b61170d565b6109b788611743565b6109c08961174c565b610a1160405180608001604052808967ffffffffffffffff1681526020018867ffffffffffffffff1681526020018767ffffffffffffffff1681526020018667ffffffffffffffff1681525061177a565b610a2e6040518060400160405280858152602001848152506115aa565b610a386001611858565b505050505050505050565b610a4b610cce565b6001600160a01b0316336001600160a01b031614610a7e5760405163472511eb60e11b81523360048201526024016103eb565b80610ab5576040517fa9cb9e0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610abf611205565b905080821415610ae25760405163574b16a760e11b815260040160405180910390fd5b610aeb82611858565b6040518281527f027863d12a407097e086a48e36475bfc859d0b200b7e6f65b5fd3b218e46632e9060200160405180910390a18181111561042c57600080610b3284611886565b915091508115610b7a57603081901c601082901c610b77610b51610fdc565b610b6967ffffffffffffffff8516633b9aca00611ee3565b83610b72610f30565b611235565b50505b50505050565b6000610483611205565b610b92610cce565b6001600160a01b0316336001600160a01b031614610bc55760405163472511eb60e11b81523360048201526024016103eb565b6000610bd082610cd8565b905060008112610bf35760405163574b16a760e11b815260040160405180910390fd5b61042c826119ac565b606061048361164d565b604080516080810182526000808252602082018190529181018290526060810191909152610483610f30565b610c3a610cce565b6001600160a01b0316336001600160a01b031614610c6d5760405163472511eb60e11b81523360048201526024016103eb565b610b7a60405180608001604052808667ffffffffffffffff1681526020018567ffffffffffffffff1681526020018467ffffffffffffffff1681526020018367ffffffffffffffff1681525061177a565b6000610cc8610e75565b51905090565b6000610483611a1b565b600080610d0660017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611f9f565b90508060005b8154811015610d6757846001600160a01b0316826000018281548110610d3457610d34611eb7565b6000918252602090912001546001600160a01b03161415610d5757949350505050565b610d6081611fb6565b9050610d0c565b50600019949350505050565b6000610da060017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611f9f565b80549091508190600090610db690600190611f9f565b9050838114610e2f57816000018181548110610dd457610dd4611eb7565b60009182526020909120015482546001600160a01b0390911690839086908110610e0057610e00611eb7565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b8154829080610e4057610e40611fd1565b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff1916905501905550505050565b60606000610ea460017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611f9f565b8054604080516020808402820181019092528281529293508392918391830182828015610ef057602002820191906000526020600020905b815481526020019060010190808311610edc575b50505050509250505090565b6000610483610f2c60017f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611f9f565b5490565b604080516080810182526000808252602082018190529181018290526060810182905290610f7f60017f910cad6638f0b06b72ead1455bffc33be6e9b1c24417cc3f692aaaf0bef75a16611f9f565b60408051608081018252915467ffffffffffffffff8082168452680100000000000000008204811660208501527001000000000000000000000000000000008204811692840192909252600160c01b900416606082015292915050565b6000610483610f2c60017f45d0d54fdd66220435526b0d20a3e002dad71447d5a32fb8efce72e62d4e0228611f9f565b6000816040015182602001516110229190611f78565b67ffffffffffffffff16826060015167ffffffffffffffff166110424290565b61104c9190611f9f565b6110569190611fe7565b92915050565b805160009067ffffffffffffffff166110758185611fe7565b6107629190611f59565b611087611a4b565b61108f611a81565b61109881611abc565b6040518181527fcdcd275f4d96ed683d684f3610a92beacdebcf1ee4d37e2df526fb9001e1ea639060200160405180910390a150565b6000600180831b908190819061110890610f2c907f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611f9f565b16149392505050565b600180821b9061042c90611145907f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611f9f565b82611174610f2c60017f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611f9f565b179055565b6000806111a760017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611f9f565b90508060005b8154811015610d6757846dffffffffffffffffffffffff00008360000183815481106111db576111db611eb7565b90600052602060002001541614156111f557949350505050565b6111fe81611fb6565b90506111ad565b6000610483610f2c60017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611f9f565b80516112549061124f9067ffffffffffffffff1686611f41565b61107f565b600061125e611aea565b90506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156112a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c69190612009565b6040517f80d4027e00000000000000000000000000000000000000000000000000000000815263ffffffff861660048201526fffffffffffffffffffffffffffffffff87166024820152604481018890529091506001600160a01b038316906380d4027e90606401600060405180830381600087803b15801561134857600080fd5b505af115801561135c573d6000803e3d6000fd5b505050506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156113a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c69190612009565b90506000846040015167ffffffffffffffff16856020015167ffffffffffffffff166113f061157a565b6113fa908b611f9f565b6114049190611f59565b61140e9190611f59565b905061141b828483611b1a565b61142488611c2c565b7fdafd48d1eba2a416b2aca45e9ead3ad18b84e868fa6d2e1a3048bfd37ed10a32828483876001600160a01b0316633a98ef396040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac9190612009565b60408051948552602085019390935291830152606082015260800160405180910390a15050505050505050565b600061150660017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611f9f565b80549091508190839082908690811061152157611521611eb7565b60009182526020909120015550505050565b600061156060017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611f9f565b805460018101825560009182526020909120019190915550565b6000610483610f2c60017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611f9f565b60006115d760017f8a8a043b81dd88a581f2aa1faf076f45266d72ec8307cdf217c10a967969249f611f9f565b8251815560209092015160019092019190915550565b6040805180820190915260008082526020820152600061162e60017f8a8a043b81dd88a581f2aa1faf076f45266d72ec8307cdf217c10a967969249f611f9f565b6040805180820190915281548152600190910154602082015292915050565b6060600061167c60017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611f9f565b8054604080516020808402820181019092528281529293508392918391830182828015610ef057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116b45750505050509250505090565b6000610483610f2c60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611f9f565b61174061173b60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611f9f565b829055565b50565b61174081611c5a565b61174061173b60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611f9f565b60006117a760017f910cad6638f0b06b72ead1455bffc33be6e9b1c24417cc3f692aaaf0bef75a16611f9f565b825181546020850151604086015160609096015167ffffffffffffffff908116600160c01b0277ffffffffffffffffffffffffffffffffffffffffffffffff97821670010000000000000000000000000000000002979097166fffffffffffffffffffffffffffffffff92821668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000000000000000000090941691909416179190911716179290921790915550565b61174061173b60017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611f9f565b6000806000611893610e75565b90508051600114156118ec57836118c1826000815181106118b6576118b6611eb7565b602002602001015190565b61ffff161015816000815181106118da576118da611eb7565b60200260200101519250925050915091565b80516118fe5750600093849350915050565b60008060008060005b8551811015611971576119258682815181106118b6576118b6611eb7565b91508261ffff168261ffff1610611961578261ffff168261ffff1614156119565761194f84611fb6565b9350611961565b809450819250600093505b61196a81611fb6565b9050611907565b50878261ffff1610158015611984575082155b85858151811061199657611996611eb7565b6020026020010151965096505050505050915091565b60006119d960017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611f9f565b80546001810182556000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03939093169290921790915550565b6000610483610f2c60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611f9f565b611a7f611a7960017f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611f9f565b60009055565b565b6000611aae60017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611f9f565b90508061042c816000611c88565b61174061173b60017f45d0d54fdd66220435526b0d20a3e002dad71447d5a32fb8efce72e62d4e0228611f9f565b6000610483610f2c60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611f9f565b818310611bac576000611b2b6115ed565b51905081611b398483611f59565b611b439190611f59565b611b4d8486611f9f565b611b5c9064496cebb800611f59565b1115610b7a576040517fd86fb83d000000000000000000000000000000000000000000000000000000008152600481018490526024810185905260448101839052606481018290526084016103eb565b6000611bb66115ed565b602001519050611bc68382611f59565b611bd08585611f9f565b611bdc90612710611f59565b1115610b7a576040517f0aa91ae4000000000000000000000000000000000000000000000000000000008152600481018490526024810185905260448101839052606481018290526084016103eb565b61174061173b60017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611f9f565b61174061173b60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611f9f565b508054600082559060005260206000209081019061174091905b80821115611cb65760008155600101611ca2565b5090565b80356001600160a01b0381168114611cd157600080fd5b919050565b600060208284031215611ce857600080fd5b61076282611cba565b600060208284031215611d0357600080fd5b5035919050565b803567ffffffffffffffff81168114611cd157600080fd5b600080600060608486031215611d3757600080fd5b83359250611d4760208501611d0a565b9150604084013563ffffffff81168114611d6057600080fd5b809150509250925092565b60008060408385031215611d7e57600080fd5b50508035926020909101359150565b600080600080600080600080610100898b031215611daa57600080fd5b611db389611cba565b9750611dc160208a01611cba565b9650611dcf60408a01611d0a565b9550611ddd60608a01611d0a565b9450611deb60808a01611d0a565b9350611df960a08a01611d0a565b925060c0890135915060e089013590509295985092959890939650565b6020808252825182820181905260009190848201906040850190845b81811015611e575783516001600160a01b031683529284019291840191600101611e32565b50909695505050505050565b60008060008060808587031215611e7957600080fd5b611e8285611d0a565b9350611e9060208601611d0a565b9250611e9e60408601611d0a565b9150611eac60608601611d0a565b905092959194509250565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006fffffffffffffffffffffffffffffffff80831681851681830481118215151615611f1257611f12611ecd565b02949350505050565b600061ffff808316818516808303821115611f3857611f38611ecd565b01949350505050565b60008219821115611f5457611f54611ecd565b500190565b6000816000190483118215151615611f7357611f73611ecd565b500290565b600067ffffffffffffffff80831681851681830481118215151615611f1257611f12611ecd565b600082821015611fb157611fb1611ecd565b500390565b6000600019821415611fca57611fca611ecd565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60008261200457634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561201b57600080fd5b505191905056fea2646970667358221220045f2a81a5f44b63b4b86e7af595f020f90a35f852b36e89c0499db3449ce54464736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c806391f10da0116100e3578063c26c12eb1161008c578063e547c77c11610066578063e547c77c1461034d578063e90b2da114610399578063fad2e86a146103ac57600080fd5b8063c26c12eb1461031d578063ca6d56dc14610325578063dabb57571461033857600080fd5b8063a29a839f116100bd578063a29a839f146102ef578063bc8b8f97146102f7578063c1ba4e591461030a57600080fd5b806391f10da0146102a657806393ef4511146102b9578063a230c524146102dc57600080fd5b80634b47b74f1161014557806357fa85471161011f57806357fa85471461026857806372f79b131461027b57806389896aef1461029e57600080fd5b80634b47b74f146102375780635190dce01461023f578063557ed1ba1461026257600080fd5b806314c8cd6a1161017657806314c8cd6a146101ee578063169674071461020457806331f208b31461022457600080fd5b80630b1ca49a146101925780631045a966146101a7575b600080fd5b6101a56101a0366004611cd6565b6103b4565b005b6101ba6101b5366004611cf1565b610430565b6040805167ffffffffffffffff909416845263ffffffff909216602084015261ffff16908201526060015b60405180910390f35b6101f6610479565b6040519081526020016101e5565b61020c610488565b6040516001600160a01b0390911681526020016101e5565b6101a5610232366004611d22565b610492565b6101f6610741565b61025261024d366004611cd6565b61074b565b60405190151581526020016101e5565b426101f6565b6101f6610276366004611cf1565b610769565b610283610780565b604080519384526020840192909252908201526060016101e5565b6101f661083d565b6101a56102b4366004611d6b565b610847565b6102c161089f565b604080518251815260209283015192810192909252016101e5565b6102526102ea366004611cd6565b6108bb565b6101f661092b565b6101a5610305366004611d8d565b610947565b6101a5610318366004611cf1565b610a43565b6101f6610b80565b6101a5610333366004611cd6565b610b8a565b610340610bfc565b6040516101e59190611e16565b610355610c06565b6040516101e59190815167ffffffffffffffff9081168252602080840151821690830152604080840151821690830152606092830151169181019190915260800190565b6101a56103a7366004611e63565b610c32565b6101f6610cbe565b6103bc610cce565b6001600160a01b0316336001600160a01b0316146103f45760405163472511eb60e11b81523360048201526024015b60405180910390fd5b60006103ff82610cd8565b905060008112156104235760405163574b16a760e11b815260040160405180910390fd5b61042c81610d73565b5050565b60008060008061043e610e75565b858151811061044f5761044f611eb7565b6020026020010151905061046c81603081901c9160109190911c90565b9096909550909350915050565b6000610483610efc565b905090565b6000610483610cce565b600061049c610f30565b905060006104a8610fdc565b9050808510156104ee576040517f09ec8ad200000000000000000000000000000000000000000000000000000000815260048101869052602481018290526044016103eb565b8085111561055a57600061050a6105048461100c565b8461105c565b905080861461054f576040517f983b675100000000000000000000000000000000000000000000000000000000815260048101879052602481018290526044016103eb565b6105588661107f565b505b600061057467ffffffffffffffff8616633b9aca00611ee3565b604080518881526fffffffffffffffffffffffffffffffff8316602082015263ffffffff87168183015233606082015290519192507ff9088c3664056902a1be808c28981aa5e97da5f1a2b3557233d04eed40a9b42a919081900360800190a160006105df33610cd8565b90508060001914156106065760405163472511eb60e11b81523360048201526024016103eb565b61060f816110ce565b1561064f576040517ff4d521a2000000000000000000000000000000000000000000000000000000008152600481018890523360248201526044016103eb565b61065881611111565b601085901b65ffffffff000016603087901b6dffffffffffffffff0000000000001617600061068682611179565b90506000610692611205565b9050600082126107085760006106a6610e75565b83815181106106b7576106b7611eb7565b60200260200101519050816106c98290565b6106d4906001611f1b565b61ffff16106106ee576106e98b878b8b611235565b610702565b610702836106fd836001611f41565b6114d9565b50610735565b80600114156107225761071d8a868a8a611235565b610735565b610735610730846001611f41565b611533565b50505050505050505050565b6000610483610fdc565b60008061075783610cd8565b9050610762816110ce565b9392505050565b600080610774610f30565b9050610762838261105c565b60008060008061078e610f30565b90506107a261079c8261100c565b8261105c565b9350806020015167ffffffffffffffff16816040015167ffffffffffffffff16856107cd9190611f59565b6107d79190611f59565b816060015167ffffffffffffffff166107f09190611f41565b9250600181600001518260200151836040015161080d9190611f78565b6108179190611f78565b61082b9067ffffffffffffffff1685611f41565b6108359190611f9f565b915050909192565b600061048361157a565b61084f610cce565b6001600160a01b0316336001600160a01b0316146108825760405163472511eb60e11b81523360048201526024016103eb565b61042c6040518060400160405280848152602001838152506115aa565b60408051808201909152600080825260208201526104836115ed565b6000806108c661164d565b905060005b815181101561092157836001600160a01b03168282815181106108f0576108f0611eb7565b60200260200101516001600160a01b03161415610911575060019392505050565b61091a81611fb6565b90506108cb565b5060009392505050565b600080610936610f30565b90506109418161100c565b91505090565b60006109516116dd565b811461099b57806109606116dd565b6040517fe7e93b38000000000000000000000000000000000000000000000000000000008152600481019290925260248201526044016103eb565b6109ae6109a9826001611f41565b61170d565b6109b788611743565b6109c08961174c565b610a1160405180608001604052808967ffffffffffffffff1681526020018867ffffffffffffffff1681526020018767ffffffffffffffff1681526020018667ffffffffffffffff1681525061177a565b610a2e6040518060400160405280858152602001848152506115aa565b610a386001611858565b505050505050505050565b610a4b610cce565b6001600160a01b0316336001600160a01b031614610a7e5760405163472511eb60e11b81523360048201526024016103eb565b80610ab5576040517fa9cb9e0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610abf611205565b905080821415610ae25760405163574b16a760e11b815260040160405180910390fd5b610aeb82611858565b6040518281527f027863d12a407097e086a48e36475bfc859d0b200b7e6f65b5fd3b218e46632e9060200160405180910390a18181111561042c57600080610b3284611886565b915091508115610b7a57603081901c601082901c610b77610b51610fdc565b610b6967ffffffffffffffff8516633b9aca00611ee3565b83610b72610f30565b611235565b50505b50505050565b6000610483611205565b610b92610cce565b6001600160a01b0316336001600160a01b031614610bc55760405163472511eb60e11b81523360048201526024016103eb565b6000610bd082610cd8565b905060008112610bf35760405163574b16a760e11b815260040160405180910390fd5b61042c826119ac565b606061048361164d565b604080516080810182526000808252602082018190529181018290526060810191909152610483610f30565b610c3a610cce565b6001600160a01b0316336001600160a01b031614610c6d5760405163472511eb60e11b81523360048201526024016103eb565b610b7a60405180608001604052808667ffffffffffffffff1681526020018567ffffffffffffffff1681526020018467ffffffffffffffff1681526020018367ffffffffffffffff1681525061177a565b6000610cc8610e75565b51905090565b6000610483611a1b565b600080610d0660017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611f9f565b90508060005b8154811015610d6757846001600160a01b0316826000018281548110610d3457610d34611eb7565b6000918252602090912001546001600160a01b03161415610d5757949350505050565b610d6081611fb6565b9050610d0c565b50600019949350505050565b6000610da060017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611f9f565b80549091508190600090610db690600190611f9f565b9050838114610e2f57816000018181548110610dd457610dd4611eb7565b60009182526020909120015482546001600160a01b0390911690839086908110610e0057610e00611eb7565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b8154829080610e4057610e40611fd1565b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff1916905501905550505050565b60606000610ea460017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611f9f565b8054604080516020808402820181019092528281529293508392918391830182828015610ef057602002820191906000526020600020905b815481526020019060010190808311610edc575b50505050509250505090565b6000610483610f2c60017f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611f9f565b5490565b604080516080810182526000808252602082018190529181018290526060810182905290610f7f60017f910cad6638f0b06b72ead1455bffc33be6e9b1c24417cc3f692aaaf0bef75a16611f9f565b60408051608081018252915467ffffffffffffffff8082168452680100000000000000008204811660208501527001000000000000000000000000000000008204811692840192909252600160c01b900416606082015292915050565b6000610483610f2c60017f45d0d54fdd66220435526b0d20a3e002dad71447d5a32fb8efce72e62d4e0228611f9f565b6000816040015182602001516110229190611f78565b67ffffffffffffffff16826060015167ffffffffffffffff166110424290565b61104c9190611f9f565b6110569190611fe7565b92915050565b805160009067ffffffffffffffff166110758185611fe7565b6107629190611f59565b611087611a4b565b61108f611a81565b61109881611abc565b6040518181527fcdcd275f4d96ed683d684f3610a92beacdebcf1ee4d37e2df526fb9001e1ea639060200160405180910390a150565b6000600180831b908190819061110890610f2c907f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611f9f565b16149392505050565b600180821b9061042c90611145907f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611f9f565b82611174610f2c60017f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611f9f565b179055565b6000806111a760017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611f9f565b90508060005b8154811015610d6757846dffffffffffffffffffffffff00008360000183815481106111db576111db611eb7565b90600052602060002001541614156111f557949350505050565b6111fe81611fb6565b90506111ad565b6000610483610f2c60017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611f9f565b80516112549061124f9067ffffffffffffffff1686611f41565b61107f565b600061125e611aea565b90506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156112a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c69190612009565b6040517f80d4027e00000000000000000000000000000000000000000000000000000000815263ffffffff861660048201526fffffffffffffffffffffffffffffffff87166024820152604481018890529091506001600160a01b038316906380d4027e90606401600060405180830381600087803b15801561134857600080fd5b505af115801561135c573d6000803e3d6000fd5b505050506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156113a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c69190612009565b90506000846040015167ffffffffffffffff16856020015167ffffffffffffffff166113f061157a565b6113fa908b611f9f565b6114049190611f59565b61140e9190611f59565b905061141b828483611b1a565b61142488611c2c565b7fdafd48d1eba2a416b2aca45e9ead3ad18b84e868fa6d2e1a3048bfd37ed10a32828483876001600160a01b0316633a98ef396040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac9190612009565b60408051948552602085019390935291830152606082015260800160405180910390a15050505050505050565b600061150660017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611f9f565b80549091508190839082908690811061152157611521611eb7565b60009182526020909120015550505050565b600061156060017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611f9f565b805460018101825560009182526020909120019190915550565b6000610483610f2c60017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611f9f565b60006115d760017f8a8a043b81dd88a581f2aa1faf076f45266d72ec8307cdf217c10a967969249f611f9f565b8251815560209092015160019092019190915550565b6040805180820190915260008082526020820152600061162e60017f8a8a043b81dd88a581f2aa1faf076f45266d72ec8307cdf217c10a967969249f611f9f565b6040805180820190915281548152600190910154602082015292915050565b6060600061167c60017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611f9f565b8054604080516020808402820181019092528281529293508392918391830182828015610ef057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116b45750505050509250505090565b6000610483610f2c60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611f9f565b61174061173b60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611f9f565b829055565b50565b61174081611c5a565b61174061173b60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611f9f565b60006117a760017f910cad6638f0b06b72ead1455bffc33be6e9b1c24417cc3f692aaaf0bef75a16611f9f565b825181546020850151604086015160609096015167ffffffffffffffff908116600160c01b0277ffffffffffffffffffffffffffffffffffffffffffffffff97821670010000000000000000000000000000000002979097166fffffffffffffffffffffffffffffffff92821668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000000000000000000090941691909416179190911716179290921790915550565b61174061173b60017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611f9f565b6000806000611893610e75565b90508051600114156118ec57836118c1826000815181106118b6576118b6611eb7565b602002602001015190565b61ffff161015816000815181106118da576118da611eb7565b60200260200101519250925050915091565b80516118fe5750600093849350915050565b60008060008060005b8551811015611971576119258682815181106118b6576118b6611eb7565b91508261ffff168261ffff1610611961578261ffff168261ffff1614156119565761194f84611fb6565b9350611961565b809450819250600093505b61196a81611fb6565b9050611907565b50878261ffff1610158015611984575082155b85858151811061199657611996611eb7565b6020026020010151965096505050505050915091565b60006119d960017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611f9f565b80546001810182556000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03939093169290921790915550565b6000610483610f2c60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611f9f565b611a7f611a7960017f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611f9f565b60009055565b565b6000611aae60017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611f9f565b90508061042c816000611c88565b61174061173b60017f45d0d54fdd66220435526b0d20a3e002dad71447d5a32fb8efce72e62d4e0228611f9f565b6000610483610f2c60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611f9f565b818310611bac576000611b2b6115ed565b51905081611b398483611f59565b611b439190611f59565b611b4d8486611f9f565b611b5c9064496cebb800611f59565b1115610b7a576040517fd86fb83d000000000000000000000000000000000000000000000000000000008152600481018490526024810185905260448101839052606481018290526084016103eb565b6000611bb66115ed565b602001519050611bc68382611f59565b611bd08585611f9f565b611bdc90612710611f59565b1115610b7a576040517f0aa91ae4000000000000000000000000000000000000000000000000000000008152600481018490526024810185905260448101839052606481018290526084016103eb565b61174061173b60017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611f9f565b61174061173b60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611f9f565b508054600082559060005260206000209081019061174091905b80821115611cb65760008155600101611ca2565b5090565b80356001600160a01b0381168114611cd157600080fd5b919050565b600060208284031215611ce857600080fd5b61076282611cba565b600060208284031215611d0357600080fd5b5035919050565b803567ffffffffffffffff81168114611cd157600080fd5b600080600060608486031215611d3757600080fd5b83359250611d4760208501611d0a565b9150604084013563ffffffff81168114611d6057600080fd5b809150509250925092565b60008060408385031215611d7e57600080fd5b50508035926020909101359150565b600080600080600080600080610100898b031215611daa57600080fd5b611db389611cba565b9750611dc160208a01611cba565b9650611dcf60408a01611d0a565b9550611ddd60608a01611d0a565b9450611deb60808a01611d0a565b9350611df960a08a01611d0a565b925060c0890135915060e089013590509295985092959890939650565b6020808252825182820181905260009190848201906040850190845b81811015611e575783516001600160a01b031683529284019291840191600101611e32565b50909695505050505050565b60008060008060808587031215611e7957600080fd5b611e8285611d0a565b9350611e9060208601611d0a565b9250611e9e60408601611d0a565b9150611eac60608601611d0a565b905092959194509250565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006fffffffffffffffffffffffffffffffff80831681851681830481118215151615611f1257611f12611ecd565b02949350505050565b600061ffff808316818516808303821115611f3857611f38611ecd565b01949350505050565b60008219821115611f5457611f54611ecd565b500190565b6000816000190483118215151615611f7357611f73611ecd565b500290565b600067ffffffffffffffff80831681851681830481118215151615611f1257611f12611ecd565b600082821015611fb157611fb1611ecd565b500390565b6000600019821415611fca57611fca611ecd565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60008261200457634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561201b57600080fd5b505191905056fea2646970667358221220045f2a81a5f44b63b4b86e7af595f020f90a35f852b36e89c0499db3449ce54464736f6c634300080a0033",
  "devdoc": {
    "author": "SkillZ",
    "kind": "dev",
    "methods": {
      "addMember(address)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_newOracleMember": "Address of the new member"
        }
      },
      "getFrameFirstEpochId(uint256)": {
        "params": {
          "_epochId": "Epoch id used to get the frame"
        }
      },
      "getMemberReportStatus(address)": {
        "params": {
          "_oracleMember": "Address of member to check"
        }
      },
      "getReportVariant(uint256)": {
        "params": {
          "_idx": "Index of report"
        }
      },
      "initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)": {
        "params": {
          "_administratorAddress": "Address able to call administrative methods",
          "_annualAprUpperBound": "Beacon bound parameter. Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.",
          "_epochsPerFrame": "Beacon spec parameter. Number of epochs in a frame.",
          "_genesisTime": "Beacon spec parameter. Timestamp of the genesis slot.",
          "_relativeLowerBound": "Beacon bound parameter. Maximum relative balance decrease.",
          "_riverContractAddress": "Address of the River contract, able to receive oracle input data after quorum is met",
          "_secondsPerSlot": "Beacon spec parameter. Number of seconds between slots.",
          "_slotsPerEpoch": "Beacon spec parameter. Number of slots in one epoch."
        }
      },
      "isMember(address)": {
        "details": "Performs a naive search, do not call this on-chain, used as an off-chain helper",
        "params": {
          "_memberAddress": "Address of the member"
        }
      },
      "removeMember(address)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_oracleMember": "Address to remove"
        }
      },
      "reportBeacon(uint256,uint64,uint32)": {
        "details": "Only callable by an oracle member",
        "params": {
          "_beaconBalance": "Total balance of River validators",
          "_beaconValidators": "Total River validator count",
          "_epochId": "Epoch where the balance and validator count has been computed"
        }
      },
      "setBeaconBounds(uint256,uint256)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_annualAprUpperBound": "Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.",
          "_relativeLowerBound": "Maximum relative balance decrease."
        }
      },
      "setBeaconSpec(uint64,uint64,uint64,uint64)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_epochsPerFrame": "Number of epochs in a frame.",
          "_genesisTime": "Timestamp of the genesis slot.",
          "_secondsPerSlot": "Number of seconds between slots.",
          "_slotsPerEpoch": "Number of slots in one epoch."
        }
      },
      "setQuorum(uint256)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_newQuorum": "New quorum parameter"
        }
      }
    },
    "title": "Oracle (v1)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMember(address)": {
        "notice": "Adds new address as oracle member, giving the ability to push beacon reports."
      },
      "getAdministrator()": {
        "notice": "Retrieve system administrator address"
      },
      "getBeaconSpec()": {
        "notice": "Retrieve the current beacon spec"
      },
      "getCurrentEpochId()": {
        "notice": "Retrieve the current epoch id based on block timestamp"
      },
      "getCurrentFrame()": {
        "notice": "Retrieve the current frame details"
      },
      "getExpectedEpochId()": {
        "notice": "Retrieve expected epoch id"
      },
      "getFrameFirstEpochId(uint256)": {
        "notice": "Retrieve the first epoch id of the frame of the provided epoch id"
      },
      "getGlobalReportStatus()": {
        "notice": "Retrieve member report status"
      },
      "getLastCompletedEpochId()": {
        "notice": "Retrieve the last completed epoch id"
      },
      "getMemberReportStatus(address)": {
        "notice": "Retrieve member report status"
      },
      "getQuorum()": {
        "notice": "Retrieve the current quorum"
      },
      "getReportVariant(uint256)": {
        "notice": "Retrieve decoded report at provided index"
      },
      "getReportVariantsCount()": {
        "notice": "Retrieve report variants count"
      },
      "getTime()": {
        "notice": "Retrieve the block timestamp"
      },
      "initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)": {
        "notice": "Initializes the oracle"
      },
      "isMember(address)": {
        "notice": "Returns true if address is member"
      },
      "removeMember(address)": {
        "notice": "Removes an address from the oracle members."
      },
      "reportBeacon(uint256,uint64,uint32)": {
        "notice": "Report beacon chain data"
      },
      "setBeaconBounds(uint256,uint256)": {
        "notice": "Edits the beacon bounds parameters"
      },
      "setBeaconSpec(uint64,uint64,uint64,uint64)": {
        "notice": "Edits the beacon spec parameters"
      },
      "setQuorum(uint256)": {
        "notice": "Edits the quorum required to forward beacon data to River"
      }
    },
    "notice": "This contract handles the input from the allowed oracle members. Highly inspired by Lido's implementation.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}