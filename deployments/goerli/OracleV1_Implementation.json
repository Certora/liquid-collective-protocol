{
  "address": "0xF97f445f63C85AAd51352aB9A6Ff72DF4Cc39872",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        }
      ],
      "name": "AlreadyReported",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_prevTotalEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_postTotalEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relativeLowerBound",
          "type": "uint256"
        }
      ],
      "name": "BeaconBalanceDecreaseOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_prevTotalEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_postTotalEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_annualAprUpperBound",
          "type": "uint256"
        }
      ],
      "name": "BeaconBalanceIncreaseOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_providedEpochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minExpectedEpochId",
          "type": "uint256"
        }
      ],
      "name": "EpochTooOld",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_providedEpochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expectedFrameFirstEpochId",
          "type": "uint256"
        }
      ],
      "name": "NotFrameFirstEpochId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_newBeaconBalance",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_newBeaconValidatorCount",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oracleMember",
          "type": "address"
        }
      ],
      "name": "BeaconReported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        }
      ],
      "name": "ExpectedEpochIdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_postTotalEth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_prevTotalEth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timeElapsed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalShares",
          "type": "uint256"
        }
      ],
      "name": "PostTotalShares",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newQuorum",
          "type": "uint256"
        }
      ],
      "name": "QuorumChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOracleMember",
          "type": "address"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconBounds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "annualAprUpperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "relativeLowerBound",
              "type": "uint256"
            }
          ],
          "internalType": "struct BeaconReportBounds.BeaconReportBoundsStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconSpec",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "epochsPerFrame",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "slotsPerEpoch",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "secondsPerSlot",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "genesisTime",
              "type": "uint64"
            }
          ],
          "internalType": "struct BeaconSpec.BeaconSpecStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExpectedEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        }
      ],
      "name": "getFrameFirstEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleMember",
          "type": "address"
        }
      ],
      "name": "getMemberReportStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_riverContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_administratorAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_epochsPerFrame",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_slotsPerEpoch",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_secondsPerSlot",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_genesisTime",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_annualAprUpperBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relativeLowerBound",
          "type": "uint256"
        }
      ],
      "name": "initOracleV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleMember",
          "type": "address"
        }
      ],
      "name": "removeMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_beaconBalance",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_beaconValidators",
          "type": "uint32"
        }
      ],
      "name": "reportBeacon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_annualAprUpperBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relativeLowerBound",
          "type": "uint256"
        }
      ],
      "name": "setBeaconBounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_epochsPerFrame",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_slotsPerEpoch",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_secondsPerSlot",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_genesisTime",
          "type": "uint64"
        }
      ],
      "name": "setBeaconSpec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newQuorum",
          "type": "uint256"
        }
      ],
      "name": "setQuorum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xec1e31962156abb634294d954777bbc88ea1360dfff1c21cbcf9024374063001",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0xF97f445f63C85AAd51352aB9A6Ff72DF4Cc39872",
    "transactionIndex": 8,
    "gasUsed": "1662485",
    "logsBloom": "0x
    "blockHash": "0x07e29901de5f0d3e0424f4ff0c8133c066f6dc272db526f3f354ab3c03d6813c",
    "transactionHash": "0xec1e31962156abb634294d954777bbc88ea1360dfff1c21cbcf9024374063001",
    "logs": [],
    "blockNumber": 6415677,
    "cumulativeGasUsed": "3404975",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a446bf68a8fe0115f888f03de4afac85",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"AlreadyReported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prevTotalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_postTotalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relativeLowerBound\",\"type\":\"uint256\"}],\"name\":\"BeaconBalanceDecreaseOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prevTotalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_postTotalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_annualAprUpperBound\",\"type\":\"uint256\"}],\"name\":\"BeaconBalanceIncreaseOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providedEpochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minExpectedEpochId\",\"type\":\"uint256\"}],\"name\":\"EpochTooOld\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providedEpochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedFrameFirstEpochId\",\"type\":\"uint256\"}],\"name\":\"NotFrameFirstEpochId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_newBeaconBalance\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newBeaconValidatorCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oracleMember\",\"type\":\"address\"}],\"name\":\"BeaconReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"ExpectedEpochIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_postTotalEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prevTotalEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeElapsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalShares\",\"type\":\"uint256\"}],\"name\":\"PostTotalShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newQuorum\",\"type\":\"uint256\"}],\"name\":\"QuorumChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracleMember\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconBounds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"annualAprUpperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relativeLowerBound\",\"type\":\"uint256\"}],\"internalType\":\"struct BeaconReportBounds.BeaconReportBoundsStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconSpec\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"epochsPerFrame\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slotsPerEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondsPerSlot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"genesisTime\",\"type\":\"uint64\"}],\"internalType\":\"struct BeaconSpec.BeaconSpecStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"getFrameFirstEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleMember\",\"type\":\"address\"}],\"name\":\"getMemberReportStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_riverContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_administratorAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_epochsPerFrame\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_slotsPerEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_secondsPerSlot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_genesisTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_annualAprUpperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relativeLowerBound\",\"type\":\"uint256\"}],\"name\":\"initOracleV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleMember\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_beaconBalance\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_beaconValidators\",\"type\":\"uint32\"}],\"name\":\"reportBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_annualAprUpperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relativeLowerBound\",\"type\":\"uint256\"}],\"name\":\"setBeaconBounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_epochsPerFrame\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_slotsPerEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_secondsPerSlot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_genesisTime\",\"type\":\"uint64\"}],\"name\":\"setBeaconSpec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newQuorum\",\"type\":\"uint256\"}],\"name\":\"setQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Iulian Rotaru\",\"kind\":\"dev\",\"methods\":{\"addMember(address)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_newOracleMember\":\"Address of the new member\"}},\"getFrameFirstEpochId(uint256)\":{\"params\":{\"_epochId\":\"Epoch id used to get the frame\"}},\"initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)\":{\"params\":{\"_administratorAddress\":\"Address able to call administrative methods\",\"_annualAprUpperBound\":\"Beacon bound parameter. Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\",\"_epochsPerFrame\":\"Beacon spec parameter. Number of epochs in a frame.\",\"_genesisTime\":\"Beacon spec parameter. Timestamp of the genesis slot.\",\"_relativeLowerBound\":\"Beacon bound parameter. Maximum relative balance decrease.\",\"_riverContractAddress\":\"Address of the River contract, able to receive oracle input data after quorum is met\",\"_secondsPerSlot\":\"Beacon spec parameter. Number of seconds between slots.\",\"_slotsPerEpoch\":\"Beacon spec parameter. Number of slots in one epoch.\"}},\"isMember(address)\":{\"details\":\"Performs a naive search, do not call this on-chain, used as an off-chain helper\",\"params\":{\"_memberAddress\":\"Address of the member\"}},\"removeMember(address)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_oracleMember\":\"Address to remove\"}},\"reportBeacon(uint256,uint64,uint32)\":{\"details\":\"Only callable by an oracle member\",\"params\":{\"_beaconBalance\":\"Total balance of River validators\",\"_beaconValidators\":\"Total River validator count\",\"_epochId\":\"Epoch where the balance and validator count has been computed\"}},\"setBeaconBounds(uint256,uint256)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_annualAprUpperBound\":\"Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\",\"_relativeLowerBound\":\"Maximum relative balance decrease.\"}},\"setBeaconSpec(uint64,uint64,uint64,uint64)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_epochsPerFrame\":\"Number of epochs in a frame.\",\"_genesisTime\":\"Timestamp of the genesis slot.\",\"_secondsPerSlot\":\"Number of seconds between slots.\",\"_slotsPerEpoch\":\"Number of slots in one epoch.\"}},\"setQuorum(uint256)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_newQuorum\":\"New quorum parameter\"}}},\"title\":\"Oracle (v1)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMember(address)\":{\"notice\":\"Adds new address as oracle member, giving the ability to push beacon reports.\"},\"getCurrentEpochId()\":{\"notice\":\"Retrieve the current epoch id based on block timestamp\"},\"getFrameFirstEpochId(uint256)\":{\"notice\":\"Retrieve the first epoch id of the frame of the provided epoch id\"},\"getTime()\":{\"notice\":\"Retrieve the block timestamp\"},\"initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)\":{\"notice\":\"Initializes the oracle\"},\"isMember(address)\":{\"notice\":\"Returns true if address is member\"},\"removeMember(address)\":{\"notice\":\"Removes an address from the oracle members.\"},\"reportBeacon(uint256,uint64,uint32)\":{\"notice\":\"Report beacon chain data\"},\"setBeaconBounds(uint256,uint256)\":{\"notice\":\"Edits the beacon bounds parameters\"},\"setBeaconSpec(uint64,uint64,uint64,uint64)\":{\"notice\":\"Edits the beacon spec parameters\"},\"setQuorum(uint256)\":{\"notice\":\"Edits the quorum required to forward beacon data to River\"}},\"notice\":\"This contract handles the input from the whitelisted oracle members. Highly inspired by Lido's implementation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/Oracle.1.sol\":\"OracleV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\ncontract Initializable {\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    modifier init(uint256 version) {\\n        if (version != Version.get()) {\\n            revert InvalidInitialization(version, Version.get());\\n        }\\n        Version.set(version + 1); // prevents reentrency on the called method\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc93555f4bd660f91e565f20753e0d3a01e783e673bc0209d0d1e33c7b6941053\",\"license\":\"BUSL-1.1\"},\"contracts/src/Oracle.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./libraries/LibOwnable.sol\\\";\\nimport \\\"./interfaces/IRiverOracleInput.sol\\\";\\n\\nimport \\\"./state/shared/AdministratorAddress.sol\\\";\\nimport \\\"./state/oracle/RiverAddress.sol\\\";\\nimport \\\"./state/oracle/OracleMembers.sol\\\";\\nimport \\\"./state/oracle/Quorum.sol\\\";\\nimport \\\"./state/oracle/BeaconSpec.sol\\\";\\nimport \\\"./state/oracle/BeaconReportBounds.sol\\\";\\nimport \\\"./state/oracle/ExpectedEpochId.sol\\\";\\nimport \\\"./state/oracle/LastEpochId.sol\\\";\\nimport \\\"./state/oracle/ReportsPositions.sol\\\";\\nimport \\\"./state/oracle/ReportsVariants.sol\\\";\\n\\n/// @title Oracle (v1)\\n/// @author Iulian Rotaru\\n/// @notice This contract handles the input from the whitelisted oracle members. Highly inspired by Lido's implementation.\\ncontract OracleV1 is Initializable {\\n    /// @notice Received ETH input has only 9 decimals\\n    uint128 internal constant DENOMINATION_OFFSET = 1e9;\\n\\n    error EpochTooOld(uint256 _providedEpochId, uint256 _minExpectedEpochId);\\n    error NotFrameFirstEpochId(uint256 _providedEpochId, uint256 _expectedFrameFirstEpochId);\\n    error AlreadyReported(uint256 _epochId, address _member);\\n    error BeaconBalanceIncreaseOutOfBounds(\\n        uint256 _prevTotalEth,\\n        uint256 _postTotalEth,\\n        uint256 _timeElapsed,\\n        uint256 _annualAprUpperBound\\n    );\\n    error BeaconBalanceDecreaseOutOfBounds(\\n        uint256 _prevTotalEth,\\n        uint256 _postTotalEth,\\n        uint256 _timeElapsed,\\n        uint256 _relativeLowerBound\\n    );\\n\\n    event QuorumChanged(uint256 _newQuorum);\\n    event ExpectedEpochIdUpdated(uint256 _epochId);\\n    event BeaconReported(\\n        uint256 _epochId,\\n        uint128 _newBeaconBalance,\\n        uint32 _newBeaconValidatorCount,\\n        address _oracleMember\\n    );\\n    event PostTotalShares(uint256 _postTotalEth, uint256 _prevTotalEth, uint256 _timeElapsed, uint256 _totalShares);\\n\\n    /// @notice Initializes the oracle\\n    /// @param _riverContractAddress Address of the River contract, able to receive oracle input data after quorum is met\\n    /// @param _administratorAddress Address able to call administrative methods\\n    /// @param _epochsPerFrame Beacon spec parameter. Number of epochs in a frame.\\n    /// @param _slotsPerEpoch Beacon spec parameter. Number of slots in one epoch.\\n    /// @param _secondsPerSlot Beacon spec parameter. Number of seconds between slots.\\n    /// @param _genesisTime Beacon spec parameter. Timestamp of the genesis slot.\\n    /// @param _annualAprUpperBound Beacon bound parameter. Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\\n    /// @param _relativeLowerBound Beacon bound parameter. Maximum relative balance decrease.\\n    function initOracleV1(\\n        address _riverContractAddress,\\n        address _administratorAddress,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound\\n    ) external init(0) {\\n        LibOwnable._setAdmin(_administratorAddress);\\n        RiverAddress.set(_riverContractAddress);\\n        BeaconSpec.set(\\n            BeaconSpec.BeaconSpecStruct({\\n                epochsPerFrame: _epochsPerFrame,\\n                slotsPerEpoch: _slotsPerEpoch,\\n                secondsPerSlot: _secondsPerSlot,\\n                genesisTime: _genesisTime\\n            })\\n        );\\n        BeaconReportBounds.set(\\n            BeaconReportBounds.BeaconReportBoundsStruct({\\n                annualAprUpperBound: _annualAprUpperBound,\\n                relativeLowerBound: _relativeLowerBound\\n            })\\n        );\\n        Quorum.set(1);\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Retrieve the block timestamp\\n    function getTime() external view returns (uint256) {\\n        return _getTime();\\n    }\\n\\n    /// @notice Retrieve the current epoch id based on block timestamp\\n    function getCurrentEpochId() external view returns (uint256) {\\n        BeaconSpec.BeaconSpecStruct memory beaconSpec = BeaconSpec.get();\\n        return _getCurrentEpochId(beaconSpec);\\n    }\\n\\n    /// @notice Retrieve the first epoch id of the frame of the provided epoch id\\n    /// @param _epochId Epoch id used to get the frame\\n    function getFrameFirstEpochId(uint256 _epochId) external view returns (uint256) {\\n        BeaconSpec.BeaconSpecStruct memory beaconSpec = BeaconSpec.get();\\n        return _getFrameFirstEpochId(_epochId, beaconSpec);\\n    }\\n\\n    /// @notice Returns true if address is member\\n    /// @dev Performs a naive search, do not call this on-chain, used as an off-chain helper\\n    /// @param _memberAddress Address of the member\\n    function isMember(address _memberAddress) external view returns (bool) {\\n        address[] memory members = OracleMembers.get();\\n        for (uint256 idx = 0; idx < members.length; ++idx) {\\n            if (members[idx] == _memberAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Adds new address as oracle member, giving the ability to push beacon reports.\\n    /// @dev Only callable by the adminstrator\\n    /// @param _newOracleMember Address of the new member\\n    function addMember(address _newOracleMember) external onlyAdmin {\\n        int256 memberIdx = OracleMembers.indexOf(_newOracleMember);\\n        if (memberIdx >= 0) {\\n            revert Errors.InvalidCall();\\n        }\\n        OracleMembers.push(_newOracleMember);\\n    }\\n\\n    /// @notice Removes an address from the oracle members.\\n    /// @dev Only callable by the adminstrator\\n    /// @param _oracleMember Address to remove\\n    function removeMember(address _oracleMember) external onlyAdmin {\\n        int256 memberIdx = OracleMembers.indexOf(_oracleMember);\\n        if (memberIdx < 0) {\\n            revert Errors.InvalidCall();\\n        }\\n        OracleMembers.deleteItem(uint256(memberIdx));\\n    }\\n\\n    function getBeaconSpec() external view returns (BeaconSpec.BeaconSpecStruct memory) {\\n        return BeaconSpec.get();\\n    }\\n\\n    /// @notice Edits the beacon spec parameters\\n    /// @dev Only callable by the adminstrator\\n    /// @param _epochsPerFrame Number of epochs in a frame.\\n    /// @param _slotsPerEpoch Number of slots in one epoch.\\n    /// @param _secondsPerSlot Number of seconds between slots.\\n    /// @param _genesisTime Timestamp of the genesis slot.\\n    function setBeaconSpec(\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime\\n    ) external onlyAdmin {\\n        BeaconSpec.set(\\n            BeaconSpec.BeaconSpecStruct({\\n                epochsPerFrame: _epochsPerFrame,\\n                slotsPerEpoch: _slotsPerEpoch,\\n                secondsPerSlot: _secondsPerSlot,\\n                genesisTime: _genesisTime\\n            })\\n        );\\n    }\\n\\n    function getBeaconBounds() external view returns (BeaconReportBounds.BeaconReportBoundsStruct memory) {\\n        return BeaconReportBounds.get();\\n    }\\n\\n    /// @notice Edits the beacon bounds parameters\\n    /// @dev Only callable by the adminstrator\\n    /// @param _annualAprUpperBound Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\\n    /// @param _relativeLowerBound Maximum relative balance decrease.\\n    function setBeaconBounds(uint256 _annualAprUpperBound, uint256 _relativeLowerBound) external onlyAdmin {\\n        BeaconReportBounds.set(\\n            BeaconReportBounds.BeaconReportBoundsStruct({\\n                annualAprUpperBound: _annualAprUpperBound,\\n                relativeLowerBound: _relativeLowerBound\\n            })\\n        );\\n    }\\n\\n    /// @notice Edits the quorum required to forward beacon data to River\\n    /// @dev Only callable by the adminstrator\\n    /// @param _newQuorum New quorum parameter\\n    function setQuorum(uint256 _newQuorum) external onlyAdmin {\\n        if (_newQuorum == 0) {\\n            revert Errors.InvalidArgument();\\n        }\\n        uint256 previousQuorum = Quorum.get();\\n        if (_newQuorum == previousQuorum) {\\n            revert Errors.InvalidCall();\\n        }\\n        Quorum.set(_newQuorum);\\n        emit QuorumChanged(_newQuorum);\\n        if (previousQuorum > _newQuorum) {\\n            (bool isQuorum, uint256 report) = _getQuorumReport(_newQuorum);\\n            if (isQuorum) {\\n                (uint64 beaconBalance, uint32 beaconValidators) = _decodeReport(report);\\n                _pushToRiver(\\n                    ExpectedEpochId.get(),\\n                    DENOMINATION_OFFSET * uint128(beaconBalance),\\n                    beaconValidators,\\n                    BeaconSpec.get()\\n                );\\n            }\\n        }\\n    }\\n\\n    function getExpectedEpochId() external view returns (uint256) {\\n        return ExpectedEpochId.get();\\n    }\\n\\n    function getMemberReportStatus(address _oracleMember) external view returns (bool) {\\n        int256 memberIndex = OracleMembers.indexOf(_oracleMember);\\n        return ReportsPositions.get(uint256(memberIndex));\\n    }\\n\\n    /// @notice Report beacon chain data\\n    /// @dev Only callable by an oracle member\\n    /// @param _epochId Epoch where the balance and validator count has been computed\\n    /// @param _beaconBalance Total balance of River validators\\n    /// @param _beaconValidators Total River validator count\\n    function reportBeacon(\\n        uint256 _epochId,\\n        uint64 _beaconBalance,\\n        uint32 _beaconValidators\\n    ) external {\\n        BeaconSpec.BeaconSpecStruct memory beaconSpec = BeaconSpec.get();\\n        uint256 expectedEpochId = ExpectedEpochId.get();\\n        if (_epochId < expectedEpochId) {\\n            revert EpochTooOld(_epochId, expectedEpochId);\\n        }\\n\\n        if (_epochId > expectedEpochId) {\\n            uint256 frameFirstEpochId = _getFrameFirstEpochId(_getCurrentEpochId(beaconSpec), beaconSpec);\\n            if (_epochId != frameFirstEpochId) {\\n                revert NotFrameFirstEpochId(_epochId, frameFirstEpochId);\\n            }\\n            _clearReporting(_epochId);\\n        }\\n\\n        uint128 beaconBalanceEth1 = DENOMINATION_OFFSET * uint128(_beaconBalance);\\n        emit BeaconReported(_epochId, beaconBalanceEth1, _beaconValidators, msg.sender);\\n\\n        int256 memberIndex = OracleMembers.indexOf(msg.sender);\\n        if (memberIndex == -1) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        if (ReportsPositions.get(uint256(memberIndex))) {\\n            revert AlreadyReported(_epochId, msg.sender);\\n        }\\n        ReportsPositions.register(uint256(memberIndex));\\n\\n        uint256 report = _encodeReport(_beaconBalance, _beaconValidators);\\n        int256 reportIndex = ReportsVariants.indexOfReport(report);\\n        uint256 quorum = Quorum.get();\\n\\n        if (reportIndex >= 0) {\\n            uint256 registeredReport = ReportsVariants.get()[uint256(reportIndex)];\\n            if (_reportCount(registeredReport) + 1 >= quorum) {\\n                _pushToRiver(_epochId, beaconBalanceEth1, _beaconValidators, beaconSpec);\\n            } else {\\n                ReportsVariants.set(uint256(reportIndex), registeredReport + 1);\\n            }\\n        } else {\\n            if (quorum == 1) {\\n                _pushToRiver(_epochId, beaconBalanceEth1, _beaconValidators, beaconSpec);\\n            } else {\\n                ReportsVariants.push(report + 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Retrieve the report that has the highest number of \\\"votes\\\"\\n    /// @param _quorum The quorum used for the query\\n    function _getQuorumReport(uint256 _quorum) internal view returns (bool isQuorum, uint256 report) {\\n        // check most frequent cases first: all reports are the same or no reports yet\\n        uint256[] memory variants = ReportsVariants.get();\\n        if (variants.length == 1) {\\n            return (_reportCount(variants[0]) >= _quorum, variants[0]);\\n        } else if (variants.length == 0) {\\n            return (false, 0);\\n        }\\n\\n        // if more than 2 kind of reports exist, choose the most frequent\\n        uint256 maxind = 0;\\n        uint256 repeat = 0;\\n        uint16 maxval = 0;\\n        uint16 cur = 0;\\n        for (uint256 i = 0; i < variants.length; ++i) {\\n            cur = _reportCount(variants[i]);\\n            if (cur >= maxval) {\\n                if (cur == maxval) {\\n                    ++repeat;\\n                } else {\\n                    maxind = i;\\n                    maxval = cur;\\n                    repeat = 0;\\n                }\\n            }\\n        }\\n        return (maxval >= _quorum && repeat == 0, variants[maxind]);\\n    }\\n\\n    /// @notice Retrieve the block timestamp\\n    function _getTime() internal view returns (uint256) {\\n        return block.timestamp; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /// @notice Retrieve the current epoch id based on block timestamp\\n    /// @param _beaconSpec Beacon spec parameters\\n    function _getCurrentEpochId(BeaconSpec.BeaconSpecStruct memory _beaconSpec) internal view returns (uint256) {\\n        return (_getTime() - _beaconSpec.genesisTime) / (_beaconSpec.slotsPerEpoch * _beaconSpec.secondsPerSlot);\\n    }\\n\\n    /// @notice Retrieve the first epoch id of the frame of the provided epoch id\\n    /// @param _epochId Epoch id used to get the frame\\n    /// @param _beaconSpec Beacon spec parameters\\n    function _getFrameFirstEpochId(uint256 _epochId, BeaconSpec.BeaconSpecStruct memory _beaconSpec)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_epochId / _beaconSpec.epochsPerFrame) * _beaconSpec.epochsPerFrame;\\n    }\\n\\n    /// @notice Clear reporting data\\n    /// @param _epochId Next expected epoch id (first epoch of the next frame)\\n    function _clearReporting(uint256 _epochId) internal {\\n        ReportsPositions.clear();\\n        ReportsVariants.clear();\\n        ExpectedEpochId.set(_epochId);\\n        emit ExpectedEpochIdUpdated(_epochId);\\n    }\\n\\n    /// @notice Encode report into one slot. Last 16 bits are free to use for vote counting.\\n    /// @param _beaconBalance Total validator balance\\n    /// @param _beaconValidators Total validator count\\n    function _encodeReport(uint64 _beaconBalance, uint32 _beaconValidators) internal pure returns (uint256) {\\n        return (uint256(_beaconBalance) << 48) | (uint256(_beaconValidators) << 16);\\n    }\\n\\n    /// @notice Decode report from one slot to two variables, ignoring the last 16 bits\\n    /// @param _value Encoded report\\n    function _decodeReport(uint256 _value) internal pure returns (uint64 _beaconBalance, uint32 _beaconValidators) {\\n        _beaconBalance = uint64(_value >> 48);\\n        _beaconValidators = uint32(_value >> 16);\\n    }\\n\\n    /// @notice Retrieve the vote count from the encoded report (last 16 bits)\\n    /// @param _report Encoded report\\n    function _reportCount(uint256 _report) internal pure returns (uint16) {\\n        return uint16(_report);\\n    }\\n\\n    /// @notice Performs sanity checks to prevent an erroneous update to the River system\\n    /// @param _postTotalEth Total validator balance after update\\n    /// @param _prevTotalEth Total validator balance before update\\n    /// @param _timeElapsed Time since last update\\n    function _sanityChecks(\\n        uint256 _postTotalEth,\\n        uint256 _prevTotalEth,\\n        uint256 _timeElapsed\\n    ) internal view {\\n        if (_postTotalEth >= _prevTotalEth) {\\n            // increase                 = _postTotalPooledEther - _preTotalPooledEther,\\n            // relativeIncrease         = increase / _preTotalPooledEther,\\n            // annualRelativeIncrease   = relativeIncrease / (timeElapsed / 365 days),\\n            // annualRelativeIncreaseBp = annualRelativeIncrease * 10000, in basis points 0.01% (1e-4)\\n            uint256 annualAprUpperBound = BeaconReportBounds.get().annualAprUpperBound;\\n            // check that annualRelativeIncreaseBp <= allowedAnnualRelativeIncreaseBp\\n            if (\\n                uint256(10000 * 365 days) * (_postTotalEth - _prevTotalEth) >\\n                annualAprUpperBound * _prevTotalEth * _timeElapsed\\n            ) {\\n                revert BeaconBalanceIncreaseOutOfBounds(\\n                    _prevTotalEth,\\n                    _postTotalEth,\\n                    _timeElapsed,\\n                    annualAprUpperBound\\n                );\\n            }\\n        } else {\\n            // decrease           = _preTotalPooledEther - _postTotalPooledEther\\n            // relativeDecrease   = decrease / _preTotalPooledEther\\n            // relativeDecreaseBp = relativeDecrease * 10000, in basis points 0.01% (1e-4)\\n            uint256 relativeLowerBound = BeaconReportBounds.get().relativeLowerBound;\\n            // check that relativeDecreaseBp <= allowedRelativeDecreaseBp\\n            if (uint256(10000) * (_prevTotalEth - _postTotalEth) > relativeLowerBound * _prevTotalEth) {\\n                revert BeaconBalanceDecreaseOutOfBounds(_prevTotalEth, _postTotalEth, _timeElapsed, relativeLowerBound);\\n            }\\n        }\\n    }\\n\\n    /// @notice Push the new beacon data to the river system and performs sanity checks\\n    /// @param _epochId Id of the epoch\\n    /// @param _balanceSum Total validator balance\\n    /// @param _validatorCount Total validator count\\n    /// @param _beaconSpec Beacon spec parameters\\n    function _pushToRiver(\\n        uint256 _epochId,\\n        uint128 _balanceSum,\\n        uint32 _validatorCount,\\n        BeaconSpec.BeaconSpecStruct memory _beaconSpec\\n    ) internal {\\n        _clearReporting(_epochId);\\n\\n        IRiverOracleInput riverAddress = IRiverOracleInput(RiverAddress.get());\\n        uint256 prevTotalEth = riverAddress.totalSupply();\\n        riverAddress.setBeaconData(_validatorCount, _balanceSum, bytes32(_epochId));\\n        uint256 postTotalEth = riverAddress.totalSupply();\\n\\n        uint256 timeElapsed = (_epochId - LastEpochId.get()) * _beaconSpec.slotsPerEpoch * _beaconSpec.secondsPerSlot;\\n\\n        _sanityChecks(postTotalEth, prevTotalEth, timeElapsed);\\n        LastEpochId.set(_epochId);\\n\\n        emit PostTotalShares(postTotalEth, prevTotalEth, timeElapsed, riverAddress.totalShares());\\n    }\\n}\\n\",\"keccak256\":\"0xeee56c47cbaeebf4e02507c77111ec1207ecec71fa538988fd4fec0fb2dded26\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiverOracleInput.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IRiverOracleInput {\\n    function setBeaconData(\\n        uint256 _validatorCount,\\n        uint256 _validatorBalanceSum,\\n        bytes32 _roundId\\n    ) external;\\n\\n    function totalSupply() external returns (uint256);\\n\\n    function totalShares() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x3c81f37602d3f604c7b2809325a49cee466e14cd8d244d91072fcd3c5a503d46\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    error Unauthorized(address caller);\\n    error InvalidCall();\\n    error InvalidArgument();\\n}\\n\",\"keccak256\":\"0xf3d3cec3d3d583aac19da0ace05f7ee067d47fd67e2a1f5f3195d7cbc5329325\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\n\\nlibrary LibOwnable {\\n    function _setAdmin(address newAdmin) internal {\\n        AdministratorAddress.set(newAdmin);\\n    }\\n\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n}\\n\",\"keccak256\":\"0xc189956546f854193e5fea6225b6eb0262ab192a97c4e32575eefe8205549794\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52ccf1daa33de9c72831e0d7458928c37ca7b5f8d8f732114095edeb81339920\",\"license\":\"MIT\"},\"contracts/src/state/oracle/BeaconReportBounds.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary BeaconReportBounds {\\n    // Lido Finance beacon spec data structure\\n    struct BeaconReportBoundsStruct {\\n        uint256 annualAprUpperBound;\\n        uint256 relativeLowerBound;\\n    }\\n\\n    uint256 public constant DELTA_BASE = 10_000;\\n\\n    bytes32 public constant BEACON_REPORT_BOUNDS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.beaconReportBounds\\\")) - 1);\\n\\n    struct Slot {\\n        BeaconReportBoundsStruct value;\\n    }\\n\\n    function get() internal view returns (BeaconReportBoundsStruct memory) {\\n        bytes32 slot = BEACON_REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    function set(BeaconReportBoundsStruct memory newBeaconReportBounds) internal {\\n        bytes32 slot = BEACON_REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = newBeaconReportBounds;\\n    }\\n}\\n\",\"keccak256\":\"0xf64353d723dfe0570c60f7b2523f4e78b2e6d2e85703bebb42e8b4652fe1314f\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/BeaconSpec.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary BeaconSpec {\\n    // Lido Finance beacon spec data structure\\n    struct BeaconSpecStruct {\\n        uint64 epochsPerFrame;\\n        uint64 slotsPerEpoch;\\n        uint64 secondsPerSlot;\\n        uint64 genesisTime;\\n    }\\n\\n    bytes32 public constant BEACON_SPEC_SLOT = bytes32(uint256(keccak256(\\\"river.state.beaconSpec\\\")) - 1);\\n\\n    struct Slot {\\n        BeaconSpecStruct value;\\n    }\\n\\n    function get() internal view returns (BeaconSpecStruct memory) {\\n        bytes32 slot = BEACON_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    function set(BeaconSpecStruct memory newBeaconSpec) internal {\\n        bytes32 slot = BEACON_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = newBeaconSpec;\\n    }\\n}\\n\",\"keccak256\":\"0x09cdfdaea399f0e9b0f1b96bbc9ea49a370763ab875bf2e13758f53b76919c73\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/ExpectedEpochId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary ExpectedEpochId {\\n    bytes32 public constant EXPECTED_EPOCH_ID_SLOT = bytes32(uint256(keccak256(\\\"river.state.expectedEpochId\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(EXPECTED_EPOCH_ID_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(EXPECTED_EPOCH_ID_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x0fa0977779c47e421a4d2252c2f09b880ff9f9b5a029e020d8c4d9292cf9586b\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/LastEpochId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary LastEpochId {\\n    bytes32 public constant LAST_EPOCH_ID_SLOT = bytes32(uint256(keccak256(\\\"river.state.lastEpochId\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(LAST_EPOCH_ID_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(LAST_EPOCH_ID_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x3cdadc224368eb2ef69a1ff030b2e4527a1c93c67c65c6de906d2bfa6e5cb079\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/OracleMembers.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary OracleMembers {\\n    bytes32 public constant ORACLE_MEMBERS_SLOT = bytes32(uint256(keccak256(\\\"river.state.oracleMembers\\\")) - 1);\\n\\n    struct Slot {\\n        address[] value;\\n    }\\n\\n    function get() internal view returns (address[] memory) {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    function push(address newOracleMember) internal {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(newOracleMember);\\n    }\\n\\n    function indexOf(address memberAddress) internal view returns (int256) {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (r.value[idx] == memberAddress) {\\n                return int256(idx);\\n            }\\n        }\\n\\n        return int256(-1);\\n    }\\n\\n    function deleteItem(uint256 idx) internal {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 lastIdx = r.value.length - 1;\\n        if (lastIdx != idx) {\\n            r.value[idx] = r.value[lastIdx];\\n        }\\n\\n        r.value.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x4276ba6064c47b3247b55758f73e9cea20d1d3bafb4dd8238d418aa49f796d52\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/Quorum.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Quorum {\\n    bytes32 public constant QUORUM_SLOT = bytes32(uint256(keccak256(\\\"river.state.quorum\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(QUORUM_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        return UnstructuredStorage.setStorageUint256(QUORUM_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x016efebfb97e7e2b0ab9d0b2e0f82918fd381bc58cdc8ae8d959a2a6df2ae543\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/ReportsPositions.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary ReportsPositions {\\n    bytes32 public constant REPORTS_POSITIONS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportsPositions\\\")) - 1);\\n\\n    function get(uint256 idx) internal view returns (bool) {\\n        uint256 mask = 1 << idx;\\n        return UnstructuredStorage.getStorageUint256(REPORTS_POSITIONS_SLOT) & mask == 1;\\n    }\\n\\n    function register(uint256 idx) internal {\\n        uint256 mask = 1 << idx;\\n        return\\n            UnstructuredStorage.setStorageUint256(\\n                REPORTS_POSITIONS_SLOT,\\n                UnstructuredStorage.getStorageUint256(REPORTS_POSITIONS_SLOT) | mask\\n            );\\n    }\\n\\n    function clear() internal {\\n        return UnstructuredStorage.setStorageUint256(REPORTS_POSITIONS_SLOT, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x0080fa217283f53f47c04dc5c50bc8651410efda727a3ad392a125f983ebbfa1\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/ReportsVariants.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary ReportsVariants {\\n    uint256 internal constant COUNT_OUTMASK = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000;\\n\\n    bytes32 public constant REPORTS_VARIANTS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportsVariants\\\")) - 1);\\n\\n    struct Slot {\\n        uint256[] value;\\n    }\\n\\n    function get() internal view returns (uint256[] memory) {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    function set(uint256 idx, uint256 val) internal {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[idx] = val;\\n    }\\n\\n    function push(uint256 variant) internal {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(variant);\\n    }\\n\\n    function indexOfReport(uint256 variant) internal view returns (int256) {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (r.value[idx] & COUNT_OUTMASK == variant) {\\n                return int256(idx);\\n            }\\n        }\\n\\n        return int256(-1);\\n    }\\n\\n    function clear() internal {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        delete r.value;\\n    }\\n}\\n\",\"keccak256\":\"0x2576adae6764a8d5ccf632c3128eba147c29b2ac58f15a33a77da6c8a4f9efcc\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/RiverAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary RiverAddress {\\n    bytes32 public constant RIVER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.riverAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(RIVER_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(RIVER_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x99dfa57dd045b1efce296f6a7681c48132df5d7bf2fa5c1f22b158ff6396a572\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary AdministratorAddress {\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x6c103a106ff958994c38f055a316144416df36aeb299ba660e7b8af063931b72\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Version {\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VERSION_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf90d1ecf583061aa70dc464ec1fde21da6e9309601bcbba38f47d26257a1c656\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611d2c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806393ef451111610097578063c1ba4e5911610066578063c1ba4e59146101dd578063ca6d56dc146101f0578063e547c77c14610203578063e90b2da11461024f57600080fd5b806393ef45111461018c578063a230c524146101af578063a29a839f146101c2578063bc8b8f97146101ca57600080fd5b80635190dce0116100d35780635190dce01461013d578063557ed1ba1461016057806357fa85471461016657806391f10da01461017957600080fd5b80630b1ca49a146100fa57806331f208b31461010f5780634b47b74f14610122575b600080fd5b61010d6101083660046119f7565b610262565b005b61010d61011d366004611a2a565b6102de565b61012a61058d565b6040519081526020015b60405180910390f35b61015061014b3660046119f7565b61059c565b6040519015158152602001610134565b4261012a565b61012a610174366004611a73565b6105ba565b61010d610187366004611a8c565b6105d1565b610194610629565b60408051825181526020928301519281019290925201610134565b6101506101bd3660046119f7565b610645565b61012a6106b5565b61010d6101d8366004611aae565b6106d1565b61010d6101eb366004611a73565b6107cd565b61010d6101fe3660046119f7565b61090a565b61020b61097c565b6040516101349190815167ffffffffffffffff9081168252602080840151821690830152604080840151821690830152606092830151169181019190915260800190565b61010d61025d366004611b37565b6109a8565b61026a610a34565b6001600160a01b0316336001600160a01b0316146102a25760405163472511eb60e11b81523360048201526024015b60405180910390fd5b60006102ad82610a3e565b905060008112156102d15760405163574b16a760e11b815260040160405180910390fd5b6102da81610ad9565b5050565b60006102e8610bdb565b905060006102f4610c87565b90508085101561033a576040517f09ec8ad20000000000000000000000000000000000000000000000000000000081526004810186905260248101829052604401610299565b808511156103a657600061035661035084610cbb565b84610d0b565b905080861461039b576040517f983b67510000000000000000000000000000000000000000000000000000000081526004810187905260248101829052604401610299565b6103a486610d2e565b505b60006103c067ffffffffffffffff8616633b9aca00611ba1565b604080518881526fffffffffffffffffffffffffffffffff8316602082015263ffffffff87168183015233606082015290519192507ff9088c3664056902a1be808c28981aa5e97da5f1a2b3557233d04eed40a9b42a919081900360800190a1600061042b33610a3e565b90508060001914156104525760405163472511eb60e11b8152336004820152602401610299565b61045b81610d7d565b1561049b576040517ff4d521a200000000000000000000000000000000000000000000000000000000815260048101889052336024820152604401610299565b6104a481610dc1565b601085901b65ffffffff000016603087901b6dffffffffffffffff000000000000161760006104d282610e29565b905060006104de610eb5565b9050600082126105545760006104f2610ee5565b838151811061050357610503611bd9565b60200260200101519050816105158290565b610520906001611bef565b61ffff161061053a576105358b878b8b610f6c565b61054e565b61054e83610549836001611c15565b6111fa565b50610581565b806001141561056e576105698a868a8a610f6c565b610581565b61058161057c846001611c15565b611254565b50505050505050505050565b6000610597610c87565b905090565b6000806105a883610a3e565b90506105b381610d7d565b9392505050565b6000806105c5610bdb565b90506105b38382610d0b565b6105d9610a34565b6001600160a01b0316336001600160a01b03161461060c5760405163472511eb60e11b8152336004820152602401610299565b6102da60405180604001604052808481526020018381525061129b565b60408051808201909152600080825260208201526105976112de565b60008061065061133e565b905060005b81518110156106ab57836001600160a01b031682828151811061067a5761067a611bd9565b60200260200101516001600160a01b0316141561069b575060019392505050565b6106a481611c2d565b9050610655565b5060009392505050565b6000806106c0610bdb565b90506106cb81610cbb565b91505090565b60006106db6113ce565b811461072557806106ea6113ce565b6040517fe7e93b3800000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610299565b610738610733826001611c15565b6113fe565b61074188611434565b61074a8961143d565b61079b60405180608001604052808967ffffffffffffffff1681526020018867ffffffffffffffff1681526020018767ffffffffffffffff1681526020018667ffffffffffffffff1681525061146b565b6107b860405180604001604052808581526020018481525061129b565b6107c26001611549565b505050505050505050565b6107d5610a34565b6001600160a01b0316336001600160a01b0316146108085760405163472511eb60e11b8152336004820152602401610299565b8061083f576040517fa9cb9e0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610849610eb5565b90508082141561086c5760405163574b16a760e11b815260040160405180910390fd5b61087582611549565b6040518281527f027863d12a407097e086a48e36475bfc859d0b200b7e6f65b5fd3b218e46632e9060200160405180910390a1818111156102da576000806108bc84611577565b91509150811561090457603081901c601082901c6109016108db610c87565b6108f367ffffffffffffffff8516633b9aca00611ba1565b836108fc610bdb565b610f6c565b50505b50505050565b610912610a34565b6001600160a01b0316336001600160a01b0316146109455760405163472511eb60e11b8152336004820152602401610299565b600061095082610a3e565b9050600081126109735760405163574b16a760e11b815260040160405180910390fd5b6102da8261169d565b604080516080810182526000808252602082018190529181018290526060810191909152610597610bdb565b6109b0610a34565b6001600160a01b0316336001600160a01b0316146109e35760405163472511eb60e11b8152336004820152602401610299565b61090460405180608001604052808667ffffffffffffffff1681526020018567ffffffffffffffff1681526020018467ffffffffffffffff1681526020018367ffffffffffffffff1681525061146b565b600061059761170c565b600080610a6c60017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611c48565b90508060005b8154811015610acd57846001600160a01b0316826000018281548110610a9a57610a9a611bd9565b6000918252602090912001546001600160a01b03161415610abd57949350505050565b610ac681611c2d565b9050610a72565b50600019949350505050565b6000610b0660017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611c48565b80549091508190600090610b1c90600190611c48565b9050838114610b9557816000018181548110610b3a57610b3a611bd9565b60009182526020909120015482546001600160a01b0390911690839086908110610b6657610b66611bd9565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b8154829080610ba657610ba6611c5f565b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff1916905501905550505050565b604080516080810182526000808252602082018190529181018290526060810182905290610c2a60017f910cad6638f0b06b72ead1455bffc33be6e9b1c24417cc3f692aaaf0bef75a16611c48565b60408051608081018252915467ffffffffffffffff8082168452680100000000000000008204811660208501527001000000000000000000000000000000008204811692840192909252600160c01b900416606082015292915050565b6000610597610cb760017f45d0d54fdd66220435526b0d20a3e002dad71447d5a32fb8efce72e62d4e0228611c48565b5490565b600081604001518260200151610cd19190611c75565b67ffffffffffffffff16826060015167ffffffffffffffff16610cf14290565b610cfb9190611c48565b610d059190611c9c565b92915050565b805160009067ffffffffffffffff16610d248185611c9c565b6105b39190611cbe565b610d3661173c565b610d3e611772565b610d47816117ad565b6040518181527fcdcd275f4d96ed683d684f3610a92beacdebcf1ee4d37e2df526fb9001e1ea639060200160405180910390a150565b6000600180831b908190610db590610cb7907f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611c48565b16600114915050919050565b600180821b906102da90610df5907f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611c48565b82610e24610cb760017f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611c48565b179055565b600080610e5760017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611c48565b90508060005b8154811015610acd57846dffffffffffffffffffffffff0000836000018381548110610e8b57610e8b611bd9565b9060005260206000200154161415610ea557949350505050565b610eae81611c2d565b9050610e5d565b6000610597610cb760017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611c48565b60606000610f1460017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611c48565b8054604080516020808402820181019092528281529293508392918391830182828015610f6057602002820191906000526020600020905b815481526020019060010190808311610f4c575b50505050509250505090565b610f7584610d2e565b6000610f7f6117db565b90506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe79190611cdd565b6040517f80d4027e00000000000000000000000000000000000000000000000000000000815263ffffffff861660048201526fffffffffffffffffffffffffffffffff87166024820152604481018890529091506001600160a01b038316906380d4027e90606401600060405180830381600087803b15801561106957600080fd5b505af115801561107d573d6000803e3d6000fd5b505050506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156110c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e79190611cdd565b90506000846040015167ffffffffffffffff16856020015167ffffffffffffffff1661111161180b565b61111b908b611c48565b6111259190611cbe565b61112f9190611cbe565b905061113c82848361183b565b6111458861194d565b7fdafd48d1eba2a416b2aca45e9ead3ad18b84e868fa6d2e1a3048bfd37ed10a32828483876001600160a01b0316633a98ef396040518163ffffffff1660e01b81526004016020604051808303816000875af11580156111a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cd9190611cdd565b60408051948552602085019390935291830152606082015260800160405180910390a15050505050505050565b600061122760017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611c48565b80549091508190839082908690811061124257611242611bd9565b60009182526020909120015550505050565b600061128160017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611c48565b805460018101825560009182526020909120019190915550565b60006112c860017f8a8a043b81dd88a581f2aa1faf076f45266d72ec8307cdf217c10a967969249f611c48565b8251815560209092015160019092019190915550565b6040805180820190915260008082526020820152600061131f60017f8a8a043b81dd88a581f2aa1faf076f45266d72ec8307cdf217c10a967969249f611c48565b6040805180820190915281548152600190910154602082015292915050565b6060600061136d60017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611c48565b8054604080516020808402820181019092528281529293508392918391830182828015610f6057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116113a55750505050509250505090565b6000610597610cb760017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611c48565b61143161142c60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611c48565b829055565b50565b6114318161197b565b61143161142c60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611c48565b600061149860017f910cad6638f0b06b72ead1455bffc33be6e9b1c24417cc3f692aaaf0bef75a16611c48565b825181546020850151604086015160609096015167ffffffffffffffff908116600160c01b0277ffffffffffffffffffffffffffffffffffffffffffffffff97821670010000000000000000000000000000000002979097166fffffffffffffffffffffffffffffffff92821668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000000000000000000090941691909416179190911716179290921790915550565b61143161142c60017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611c48565b6000806000611584610ee5565b90508051600114156115dd57836115b2826000815181106115a7576115a7611bd9565b602002602001015190565b61ffff161015816000815181106115cb576115cb611bd9565b60200260200101519250925050915091565b80516115ef5750600093849350915050565b60008060008060005b8551811015611662576116168682815181106115a7576115a7611bd9565b91508261ffff168261ffff1610611652578261ffff168261ffff1614156116475761164084611c2d565b9350611652565b809450819250600093505b61165b81611c2d565b90506115f8565b50878261ffff1610158015611675575082155b85858151811061168757611687611bd9565b6020026020010151965096505050505050915091565b60006116ca60017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611c48565b80546001810182556000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03939093169290921790915550565b6000610597610cb760017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611c48565b61177061176a60017f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611c48565b60009055565b565b600061179f60017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611c48565b9050806102da8160006119a9565b61143161142c60017f45d0d54fdd66220435526b0d20a3e002dad71447d5a32fb8efce72e62d4e0228611c48565b6000610597610cb760017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611c48565b6000610597610cb760017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611c48565b8183106118cd57600061184c6112de565b5190508161185a8483611cbe565b6118649190611cbe565b61186e8486611c48565b61187d9064496cebb800611cbe565b1115610904576040517fd86fb83d00000000000000000000000000000000000000000000000000000000815260048101849052602481018590526044810183905260648101829052608401610299565b60006118d76112de565b6020015190506118e78382611cbe565b6118f18585611c48565b6118fd90612710611cbe565b1115610904576040517f0aa91ae400000000000000000000000000000000000000000000000000000000815260048101849052602481018590526044810183905260648101829052608401610299565b61143161142c60017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611c48565b61143161142c60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611c48565b508054600082559060005260206000209081019061143191905b808211156119d757600081556001016119c3565b5090565b80356001600160a01b03811681146119f257600080fd5b919050565b600060208284031215611a0957600080fd5b6105b3826119db565b803567ffffffffffffffff811681146119f257600080fd5b600080600060608486031215611a3f57600080fd5b83359250611a4f60208501611a12565b9150604084013563ffffffff81168114611a6857600080fd5b809150509250925092565b600060208284031215611a8557600080fd5b5035919050565b60008060408385031215611a9f57600080fd5b50508035926020909101359150565b600080600080600080600080610100898b031215611acb57600080fd5b611ad4896119db565b9750611ae260208a016119db565b9650611af060408a01611a12565b9550611afe60608a01611a12565b9450611b0c60808a01611a12565b9350611b1a60a08a01611a12565b925060c0890135915060e089013590509295985092959890939650565b60008060008060808587031215611b4d57600080fd5b611b5685611a12565b9350611b6460208601611a12565b9250611b7260408601611a12565b9150611b8060608601611a12565b905092959194509250565b634e487b7160e01b600052601160045260246000fd5b60006fffffffffffffffffffffffffffffffff80831681851681830481118215151615611bd057611bd0611b8b565b02949350505050565b634e487b7160e01b600052603260045260246000fd5b600061ffff808316818516808303821115611c0c57611c0c611b8b565b01949350505050565b60008219821115611c2857611c28611b8b565b500190565b6000600019821415611c4157611c41611b8b565b5060010190565b600082821015611c5a57611c5a611b8b565b500390565b634e487b7160e01b600052603160045260246000fd5b600067ffffffffffffffff80831681851681830481118215151615611bd057611bd0611b8b565b600082611cb957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611cd857611cd8611b8b565b500290565b600060208284031215611cef57600080fd5b505191905056fea2646970667358221220cf557c0ff6c5e5c315bc2e71d9c26be02468bab20db48cf1bda95d3b16d4876a64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806393ef451111610097578063c1ba4e5911610066578063c1ba4e59146101dd578063ca6d56dc146101f0578063e547c77c14610203578063e90b2da11461024f57600080fd5b806393ef45111461018c578063a230c524146101af578063a29a839f146101c2578063bc8b8f97146101ca57600080fd5b80635190dce0116100d35780635190dce01461013d578063557ed1ba1461016057806357fa85471461016657806391f10da01461017957600080fd5b80630b1ca49a146100fa57806331f208b31461010f5780634b47b74f14610122575b600080fd5b61010d6101083660046119f7565b610262565b005b61010d61011d366004611a2a565b6102de565b61012a61058d565b6040519081526020015b60405180910390f35b61015061014b3660046119f7565b61059c565b6040519015158152602001610134565b4261012a565b61012a610174366004611a73565b6105ba565b61010d610187366004611a8c565b6105d1565b610194610629565b60408051825181526020928301519281019290925201610134565b6101506101bd3660046119f7565b610645565b61012a6106b5565b61010d6101d8366004611aae565b6106d1565b61010d6101eb366004611a73565b6107cd565b61010d6101fe3660046119f7565b61090a565b61020b61097c565b6040516101349190815167ffffffffffffffff9081168252602080840151821690830152604080840151821690830152606092830151169181019190915260800190565b61010d61025d366004611b37565b6109a8565b61026a610a34565b6001600160a01b0316336001600160a01b0316146102a25760405163472511eb60e11b81523360048201526024015b60405180910390fd5b60006102ad82610a3e565b905060008112156102d15760405163574b16a760e11b815260040160405180910390fd5b6102da81610ad9565b5050565b60006102e8610bdb565b905060006102f4610c87565b90508085101561033a576040517f09ec8ad20000000000000000000000000000000000000000000000000000000081526004810186905260248101829052604401610299565b808511156103a657600061035661035084610cbb565b84610d0b565b905080861461039b576040517f983b67510000000000000000000000000000000000000000000000000000000081526004810187905260248101829052604401610299565b6103a486610d2e565b505b60006103c067ffffffffffffffff8616633b9aca00611ba1565b604080518881526fffffffffffffffffffffffffffffffff8316602082015263ffffffff87168183015233606082015290519192507ff9088c3664056902a1be808c28981aa5e97da5f1a2b3557233d04eed40a9b42a919081900360800190a1600061042b33610a3e565b90508060001914156104525760405163472511eb60e11b8152336004820152602401610299565b61045b81610d7d565b1561049b576040517ff4d521a200000000000000000000000000000000000000000000000000000000815260048101889052336024820152604401610299565b6104a481610dc1565b601085901b65ffffffff000016603087901b6dffffffffffffffff000000000000161760006104d282610e29565b905060006104de610eb5565b9050600082126105545760006104f2610ee5565b838151811061050357610503611bd9565b60200260200101519050816105158290565b610520906001611bef565b61ffff161061053a576105358b878b8b610f6c565b61054e565b61054e83610549836001611c15565b6111fa565b50610581565b806001141561056e576105698a868a8a610f6c565b610581565b61058161057c846001611c15565b611254565b50505050505050505050565b6000610597610c87565b905090565b6000806105a883610a3e565b90506105b381610d7d565b9392505050565b6000806105c5610bdb565b90506105b38382610d0b565b6105d9610a34565b6001600160a01b0316336001600160a01b03161461060c5760405163472511eb60e11b8152336004820152602401610299565b6102da60405180604001604052808481526020018381525061129b565b60408051808201909152600080825260208201526105976112de565b60008061065061133e565b905060005b81518110156106ab57836001600160a01b031682828151811061067a5761067a611bd9565b60200260200101516001600160a01b0316141561069b575060019392505050565b6106a481611c2d565b9050610655565b5060009392505050565b6000806106c0610bdb565b90506106cb81610cbb565b91505090565b60006106db6113ce565b811461072557806106ea6113ce565b6040517fe7e93b3800000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610299565b610738610733826001611c15565b6113fe565b61074188611434565b61074a8961143d565b61079b60405180608001604052808967ffffffffffffffff1681526020018867ffffffffffffffff1681526020018767ffffffffffffffff1681526020018667ffffffffffffffff1681525061146b565b6107b860405180604001604052808581526020018481525061129b565b6107c26001611549565b505050505050505050565b6107d5610a34565b6001600160a01b0316336001600160a01b0316146108085760405163472511eb60e11b8152336004820152602401610299565b8061083f576040517fa9cb9e0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610849610eb5565b90508082141561086c5760405163574b16a760e11b815260040160405180910390fd5b61087582611549565b6040518281527f027863d12a407097e086a48e36475bfc859d0b200b7e6f65b5fd3b218e46632e9060200160405180910390a1818111156102da576000806108bc84611577565b91509150811561090457603081901c601082901c6109016108db610c87565b6108f367ffffffffffffffff8516633b9aca00611ba1565b836108fc610bdb565b610f6c565b50505b50505050565b610912610a34565b6001600160a01b0316336001600160a01b0316146109455760405163472511eb60e11b8152336004820152602401610299565b600061095082610a3e565b9050600081126109735760405163574b16a760e11b815260040160405180910390fd5b6102da8261169d565b604080516080810182526000808252602082018190529181018290526060810191909152610597610bdb565b6109b0610a34565b6001600160a01b0316336001600160a01b0316146109e35760405163472511eb60e11b8152336004820152602401610299565b61090460405180608001604052808667ffffffffffffffff1681526020018567ffffffffffffffff1681526020018467ffffffffffffffff1681526020018367ffffffffffffffff1681525061146b565b600061059761170c565b600080610a6c60017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611c48565b90508060005b8154811015610acd57846001600160a01b0316826000018281548110610a9a57610a9a611bd9565b6000918252602090912001546001600160a01b03161415610abd57949350505050565b610ac681611c2d565b9050610a72565b50600019949350505050565b6000610b0660017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611c48565b80549091508190600090610b1c90600190611c48565b9050838114610b9557816000018181548110610b3a57610b3a611bd9565b60009182526020909120015482546001600160a01b0390911690839086908110610b6657610b66611bd9565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b8154829080610ba657610ba6611c5f565b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff1916905501905550505050565b604080516080810182526000808252602082018190529181018290526060810182905290610c2a60017f910cad6638f0b06b72ead1455bffc33be6e9b1c24417cc3f692aaaf0bef75a16611c48565b60408051608081018252915467ffffffffffffffff8082168452680100000000000000008204811660208501527001000000000000000000000000000000008204811692840192909252600160c01b900416606082015292915050565b6000610597610cb760017f45d0d54fdd66220435526b0d20a3e002dad71447d5a32fb8efce72e62d4e0228611c48565b5490565b600081604001518260200151610cd19190611c75565b67ffffffffffffffff16826060015167ffffffffffffffff16610cf14290565b610cfb9190611c48565b610d059190611c9c565b92915050565b805160009067ffffffffffffffff16610d248185611c9c565b6105b39190611cbe565b610d3661173c565b610d3e611772565b610d47816117ad565b6040518181527fcdcd275f4d96ed683d684f3610a92beacdebcf1ee4d37e2df526fb9001e1ea639060200160405180910390a150565b6000600180831b908190610db590610cb7907f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611c48565b16600114915050919050565b600180821b906102da90610df5907f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611c48565b82610e24610cb760017f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611c48565b179055565b600080610e5760017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611c48565b90508060005b8154811015610acd57846dffffffffffffffffffffffff0000836000018381548110610e8b57610e8b611bd9565b9060005260206000200154161415610ea557949350505050565b610eae81611c2d565b9050610e5d565b6000610597610cb760017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611c48565b60606000610f1460017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611c48565b8054604080516020808402820181019092528281529293508392918391830182828015610f6057602002820191906000526020600020905b815481526020019060010190808311610f4c575b50505050509250505090565b610f7584610d2e565b6000610f7f6117db565b90506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe79190611cdd565b6040517f80d4027e00000000000000000000000000000000000000000000000000000000815263ffffffff861660048201526fffffffffffffffffffffffffffffffff87166024820152604481018890529091506001600160a01b038316906380d4027e90606401600060405180830381600087803b15801561106957600080fd5b505af115801561107d573d6000803e3d6000fd5b505050506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156110c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e79190611cdd565b90506000846040015167ffffffffffffffff16856020015167ffffffffffffffff1661111161180b565b61111b908b611c48565b6111259190611cbe565b61112f9190611cbe565b905061113c82848361183b565b6111458861194d565b7fdafd48d1eba2a416b2aca45e9ead3ad18b84e868fa6d2e1a3048bfd37ed10a32828483876001600160a01b0316633a98ef396040518163ffffffff1660e01b81526004016020604051808303816000875af11580156111a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cd9190611cdd565b60408051948552602085019390935291830152606082015260800160405180910390a15050505050505050565b600061122760017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611c48565b80549091508190839082908690811061124257611242611bd9565b60009182526020909120015550505050565b600061128160017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611c48565b805460018101825560009182526020909120019190915550565b60006112c860017f8a8a043b81dd88a581f2aa1faf076f45266d72ec8307cdf217c10a967969249f611c48565b8251815560209092015160019092019190915550565b6040805180820190915260008082526020820152600061131f60017f8a8a043b81dd88a581f2aa1faf076f45266d72ec8307cdf217c10a967969249f611c48565b6040805180820190915281548152600190910154602082015292915050565b6060600061136d60017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611c48565b8054604080516020808402820181019092528281529293508392918391830182828015610f6057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116113a55750505050509250505090565b6000610597610cb760017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611c48565b61143161142c60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611c48565b829055565b50565b6114318161197b565b61143161142c60017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611c48565b600061149860017f910cad6638f0b06b72ead1455bffc33be6e9b1c24417cc3f692aaaf0bef75a16611c48565b825181546020850151604086015160609096015167ffffffffffffffff908116600160c01b0277ffffffffffffffffffffffffffffffffffffffffffffffff97821670010000000000000000000000000000000002979097166fffffffffffffffffffffffffffffffff92821668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000000000000000000090941691909416179190911716179290921790915550565b61143161142c60017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611c48565b6000806000611584610ee5565b90508051600114156115dd57836115b2826000815181106115a7576115a7611bd9565b602002602001015190565b61ffff161015816000815181106115cb576115cb611bd9565b60200260200101519250925050915091565b80516115ef5750600093849350915050565b60008060008060005b8551811015611662576116168682815181106115a7576115a7611bd9565b91508261ffff168261ffff1610611652578261ffff168261ffff1614156116475761164084611c2d565b9350611652565b809450819250600093505b61165b81611c2d565b90506115f8565b50878261ffff1610158015611675575082155b85858151811061168757611687611bd9565b6020026020010151965096505050505050915091565b60006116ca60017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611c48565b80546001810182556000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03939093169290921790915550565b6000610597610cb760017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611c48565b61177061176a60017f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611c48565b60009055565b565b600061179f60017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611c48565b9050806102da8160006119a9565b61143161142c60017f45d0d54fdd66220435526b0d20a3e002dad71447d5a32fb8efce72e62d4e0228611c48565b6000610597610cb760017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611c48565b6000610597610cb760017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611c48565b8183106118cd57600061184c6112de565b5190508161185a8483611cbe565b6118649190611cbe565b61186e8486611c48565b61187d9064496cebb800611cbe565b1115610904576040517fd86fb83d00000000000000000000000000000000000000000000000000000000815260048101849052602481018590526044810183905260648101829052608401610299565b60006118d76112de565b6020015190506118e78382611cbe565b6118f18585611c48565b6118fd90612710611cbe565b1115610904576040517f0aa91ae400000000000000000000000000000000000000000000000000000000815260048101849052602481018590526044810183905260648101829052608401610299565b61143161142c60017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611c48565b61143161142c60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611c48565b508054600082559060005260206000209081019061143191905b808211156119d757600081556001016119c3565b5090565b80356001600160a01b03811681146119f257600080fd5b919050565b600060208284031215611a0957600080fd5b6105b3826119db565b803567ffffffffffffffff811681146119f257600080fd5b600080600060608486031215611a3f57600080fd5b83359250611a4f60208501611a12565b9150604084013563ffffffff81168114611a6857600080fd5b809150509250925092565b600060208284031215611a8557600080fd5b5035919050565b60008060408385031215611a9f57600080fd5b50508035926020909101359150565b600080600080600080600080610100898b031215611acb57600080fd5b611ad4896119db565b9750611ae260208a016119db565b9650611af060408a01611a12565b9550611afe60608a01611a12565b9450611b0c60808a01611a12565b9350611b1a60a08a01611a12565b925060c0890135915060e089013590509295985092959890939650565b60008060008060808587031215611b4d57600080fd5b611b5685611a12565b9350611b6460208601611a12565b9250611b7260408601611a12565b9150611b8060608601611a12565b905092959194509250565b634e487b7160e01b600052601160045260246000fd5b60006fffffffffffffffffffffffffffffffff80831681851681830481118215151615611bd057611bd0611b8b565b02949350505050565b634e487b7160e01b600052603260045260246000fd5b600061ffff808316818516808303821115611c0c57611c0c611b8b565b01949350505050565b60008219821115611c2857611c28611b8b565b500190565b6000600019821415611c4157611c41611b8b565b5060010190565b600082821015611c5a57611c5a611b8b565b500390565b634e487b7160e01b600052603160045260246000fd5b600067ffffffffffffffff80831681851681830481118215151615611bd057611bd0611b8b565b600082611cb957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611cd857611cd8611b8b565b500290565b600060208284031215611cef57600080fd5b505191905056fea2646970667358221220cf557c0ff6c5e5c315bc2e71d9c26be02468bab20db48cf1bda95d3b16d4876a64736f6c634300080a0033",
  "devdoc": {
    "author": "Iulian Rotaru",
    "kind": "dev",
    "methods": {
      "addMember(address)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_newOracleMember": "Address of the new member"
        }
      },
      "getFrameFirstEpochId(uint256)": {
        "params": {
          "_epochId": "Epoch id used to get the frame"
        }
      },
      "initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)": {
        "params": {
          "_administratorAddress": "Address able to call administrative methods",
          "_annualAprUpperBound": "Beacon bound parameter. Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.",
          "_epochsPerFrame": "Beacon spec parameter. Number of epochs in a frame.",
          "_genesisTime": "Beacon spec parameter. Timestamp of the genesis slot.",
          "_relativeLowerBound": "Beacon bound parameter. Maximum relative balance decrease.",
          "_riverContractAddress": "Address of the River contract, able to receive oracle input data after quorum is met",
          "_secondsPerSlot": "Beacon spec parameter. Number of seconds between slots.",
          "_slotsPerEpoch": "Beacon spec parameter. Number of slots in one epoch."
        }
      },
      "isMember(address)": {
        "details": "Performs a naive search, do not call this on-chain, used as an off-chain helper",
        "params": {
          "_memberAddress": "Address of the member"
        }
      },
      "removeMember(address)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_oracleMember": "Address to remove"
        }
      },
      "reportBeacon(uint256,uint64,uint32)": {
        "details": "Only callable by an oracle member",
        "params": {
          "_beaconBalance": "Total balance of River validators",
          "_beaconValidators": "Total River validator count",
          "_epochId": "Epoch where the balance and validator count has been computed"
        }
      },
      "setBeaconBounds(uint256,uint256)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_annualAprUpperBound": "Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.",
          "_relativeLowerBound": "Maximum relative balance decrease."
        }
      },
      "setBeaconSpec(uint64,uint64,uint64,uint64)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_epochsPerFrame": "Number of epochs in a frame.",
          "_genesisTime": "Timestamp of the genesis slot.",
          "_secondsPerSlot": "Number of seconds between slots.",
          "_slotsPerEpoch": "Number of slots in one epoch."
        }
      },
      "setQuorum(uint256)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_newQuorum": "New quorum parameter"
        }
      }
    },
    "title": "Oracle (v1)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMember(address)": {
        "notice": "Adds new address as oracle member, giving the ability to push beacon reports."
      },
      "getCurrentEpochId()": {
        "notice": "Retrieve the current epoch id based on block timestamp"
      },
      "getFrameFirstEpochId(uint256)": {
        "notice": "Retrieve the first epoch id of the frame of the provided epoch id"
      },
      "getTime()": {
        "notice": "Retrieve the block timestamp"
      },
      "initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)": {
        "notice": "Initializes the oracle"
      },
      "isMember(address)": {
        "notice": "Returns true if address is member"
      },
      "removeMember(address)": {
        "notice": "Removes an address from the oracle members."
      },
      "reportBeacon(uint256,uint64,uint32)": {
        "notice": "Report beacon chain data"
      },
      "setBeaconBounds(uint256,uint256)": {
        "notice": "Edits the beacon bounds parameters"
      },
      "setBeaconSpec(uint64,uint64,uint64,uint64)": {
        "notice": "Edits the beacon spec parameters"
      },
      "setQuorum(uint256)": {
        "notice": "Edits the quorum required to forward beacon data to River"
      }
    },
    "notice": "This contract handles the input from the whitelisted oracle members. Highly inspired by Lido's implementation.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}