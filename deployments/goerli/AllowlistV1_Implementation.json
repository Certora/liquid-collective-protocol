{
  "address": "0x59E54c65307Dcd0A5C59cD6361bF225660dD89A4",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidAlloweeCount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MismatchedAlloweeAndStatusCount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "statuses",
          "type": "uint256[]"
        }
      ],
      "name": "ChangedAllowlistStatuses",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_statuses",
          "type": "uint256[]"
        }
      ],
      "name": "allow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllower",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allower",
          "type": "address"
        }
      ],
      "name": "initAllowlistV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "isAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAllowerAddress",
          "type": "address"
        }
      ],
      "name": "setAllower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x58a5fb80356f25b93eb61ede70a925b76a84d9bd1a53a6eab5f21c93d0b131fe",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0x59E54c65307Dcd0A5C59cD6361bF225660dD89A4",
    "transactionIndex": 2,
    "gasUsed": "476222",
    "logsBloom": "0x
    "blockHash": "0x0d5f5627eb6dc7f48bbc30d4a05c276ccd2db394878d5b2ccfdb974c22ff924a",
    "transactionHash": "0x58a5fb80356f25b93eb61ede70a925b76a84d9bd1a53a6eab5f21c93d0b131fe",
    "logs": [],
    "blockNumber": 6946928,
    "cumulativeGasUsed": "777060",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7033459a833c3a6a9cee0bc416b032e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidAlloweeCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedAlloweeAndStatusCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"statuses\",\"type\":\"uint256[]\"}],\"name\":\"ChangedAllowlistStatuses\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_statuses\",\"type\":\"uint256[]\"}],\"name\":\"allow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allower\",\"type\":\"address\"}],\"name\":\"initAllowlistV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAllowerAddress\",\"type\":\"address\"}],\"name\":\"setAllower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SkillZ\",\"kind\":\"dev\",\"methods\":{\"allow(address[],uint256[])\":{\"params\":{\"_accounts\":\"Accounts with statuses to edit\",\"_statuses\":\"Allowlist statuses for each account, in the same order as _accounts\"}},\"initAllowlistV1(address,address)\":{\"params\":{\"_admin\":\"Address of the Allowlist administrator\",\"_allower\":\"Address of the allower\"}},\"isAllowed(address,uint256)\":{\"params\":{\"_account\":\"Address to verify\",\"_mask\":\"Right represented as a bit mask\"}},\"setAllower(address)\":{\"params\":{\"_newAllowerAddress\":\"New address allowed to edit the allowlist\"}}},\"title\":\"Allowlist (v1)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allow(address[],uint256[])\":{\"notice\":\"Sets the allowlisting status for one or more accounts\"},\"getAllower()\":{\"notice\":\"Retrieves the allower address\"},\"initAllowlistV1(address,address)\":{\"notice\":\"Initializes the allowlist\"},\"isAllowed(address,uint256)\":{\"notice\":\"Verify if a user has a specific right\"},\"setAllower(address)\":{\"notice\":\"Changes the allower address\"}},\"notice\":\"This contract handles the list of allowed recipients.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/Allowlist.1.sol\":\"AllowlistV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/src/Allowlist.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./libraries/LibOwnable.sol\\\";\\nimport \\\"./interfaces/IRiverOracleInput.sol\\\";\\n\\nimport \\\"./state/allowlist/AllowerAddress.sol\\\";\\nimport \\\"./state/allowlist/Allowlist.sol\\\";\\n\\n/// @title Allowlist (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the list of allowed recipients.\\ncontract AllowlistV1 is Initializable {\\n    error InvalidAlloweeCount();\\n    error MismatchedAlloweeAndStatusCount();\\n    event ChangedAllowlistStatuses(address[] indexed accounts, uint256[] statuses);\\n\\n    /// @notice Initializes the allowlist\\n    /// @param _admin Address of the Allowlist administrator\\n    /// @param _allower Address of the allower\\n    function initAllowlistV1(address _admin, address _allower) external init(0) {\\n        LibOwnable._setAdmin(_admin);\\n        AllowerAddress.set(_allower);\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() virtual {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Changes the allower address\\n    /// @param _newAllowerAddress New address allowed to edit the allowlist\\n    function setAllower(address _newAllowerAddress) external onlyAdmin {\\n        AllowerAddress.set(_newAllowerAddress);\\n    }\\n\\n    /// @notice Retrieves the allower address\\n    function getAllower() external view returns (address) {\\n        return AllowerAddress.get();\\n    }\\n\\n    /// @notice Sets the allowlisting status for one or more accounts\\n    /// @param _accounts Accounts with statuses to edit\\n    /// @param _statuses Allowlist statuses for each account, in the same order as _accounts\\n    function allow(address[] calldata _accounts, uint256[] calldata _statuses) external {\\n        if (msg.sender != AllowerAddress.get() && msg.sender != AdministratorAddress.get()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n\\n        if (_accounts.length == 0) {\\n            revert InvalidAlloweeCount();\\n        }\\n\\n        if (_accounts.length != _statuses.length) {\\n            revert MismatchedAlloweeAndStatusCount();\\n        }\\n\\n        for (uint256 i = 0; i < _accounts.length; ) {\\n            Allowlist.set(_accounts[i], _statuses[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit ChangedAllowlistStatuses(_accounts, _statuses);\\n    }\\n\\n    /// @notice Verify if a user has a specific right\\n    /// @param _account Address to verify\\n    /// @param _mask Right represented as a bit mask\\n    function isAllowed(address _account, uint256 _mask) external view returns (bool) {\\n        return Allowlist.get(_account) & _mask == _mask;\\n    }\\n}\\n\",\"keccak256\":\"0x0bbfc42543ccfdc0199bb091dbbcb204219b74a92653a8b455953d54627c1c32\",\"license\":\"BUSL-1.1\"},\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\ncontract Initializable {\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    modifier init(uint256 version) {\\n        if (version != Version.get()) {\\n            revert InvalidInitialization(version, Version.get());\\n        }\\n        Version.set(version + 1); // prevents reentrency on the called method\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc93555f4bd660f91e565f20753e0d3a01e783e673bc0209d0d1e33c7b6941053\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiverOracleInput.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IRiverOracleInput {\\n    function setBeaconData(\\n        uint256 _validatorCount,\\n        uint256 _validatorBalanceSum,\\n        bytes32 _roundId\\n    ) external;\\n\\n    function totalSupply() external returns (uint256);\\n\\n    function totalShares() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x3c81f37602d3f604c7b2809325a49cee466e14cd8d244d91072fcd3c5a503d46\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    error Unauthorized(address caller);\\n    error InvalidCall();\\n    error InvalidArgument();\\n}\\n\",\"keccak256\":\"0xf3d3cec3d3d583aac19da0ace05f7ee067d47fd67e2a1f5f3195d7cbc5329325\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\n\\nlibrary LibOwnable {\\n    function _setAdmin(address newAdmin) internal {\\n        AdministratorAddress.set(newAdmin);\\n    }\\n\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n}\\n\",\"keccak256\":\"0xc189956546f854193e5fea6225b6eb0262ab192a97c4e32575eefe8205549794\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52ccf1daa33de9c72831e0d7458928c37ca7b5f8d8f732114095edeb81339920\",\"license\":\"MIT\"},\"contracts/src/state/allowlist/AllowerAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary AllowerAddress {\\n    bytes32 internal constant ALLOWER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowerAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ALLOWER_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ALLOWER_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x7e16007dba29cf60e7439b8bca3a27e1cb2ef29854d09e7cdd9a1151c771dfff\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/allowlist/Allowlist.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Allowlist {\\n    bytes32 internal constant ALLOWLIST_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowlist\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => uint256) value;\\n    }\\n\\n    function get(address account) internal view returns (uint256) {\\n        bytes32 slot = ALLOWLIST_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[account];\\n    }\\n\\n    function set(address account, uint256 status) internal {\\n        bytes32 slot = ALLOWLIST_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[account] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x5e9e8221908bc75cb519a2ae49855a8f1006d3056248690d55894c75c2e62c4c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary AdministratorAddress {\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x6c103a106ff958994c38f055a316144416df36aeb299ba660e7b8af063931b72\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Version {\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VERSION_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf90d1ecf583061aa70dc464ec1fde21da6e9309601bcbba38f47d26257a1c656\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506107ac806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80636e8cac11116100505780636e8cac11146100a6578063e580d994146100b9578063f8350ed0146100cc57600080fd5b806307a400081461006c5780634679a9e114610091575b600080fd5b6100746100ef565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a461009f36600461054f565b6100fe565b005b6100a46100b4366004610571565b61014a565b6100a46100c73660046105f0565b6101c8565b6100df6100da36600461065c565b61034d565b6040519015158152602001610088565b60006100f9610363565b905090565b610106610397565b6001600160a01b0316336001600160a01b03161461013e5760405163472511eb60e11b81523360048201526024015b60405180910390fd5b610147816103a1565b50565b60006101546103d4565b811461019e57806101636103d4565b6040517fe7e93b3800000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610135565b6101b16101ac82600161069c565b610404565b6101ba83610432565b6101c3826103a1565b505050565b6101d0610363565b6001600160a01b0316336001600160a01b03161415801561020a57506101f461043b565b6001600160a01b0316336001600160a01b031614155b1561022a5760405163472511eb60e11b8152336004820152602401610135565b82610261576040517f6b0f2f7c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82811461029a576040517fb7c599df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b838110156102f5576102ed8585838181106102ba576102ba6106b4565b90506020020160208101906102cf919061054f565b8484848181106102e1576102e16106b4565b9050602002013561046b565b60010161029d565b5083836040516103069291906106ca565b60405180910390207f4caf22f66c30786a07375d69e72415b42a7c7b79774bb0cf692f166bcc08f86b838360405161033f92919061070a565b60405180910390a250505050565b6000818261035a856104b7565b16149392505050565b60006100f961039360017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b8061075f565b5490565b60006100f961043b565b6101476103cf60017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b8061075f565b829055565b60006100f961039360017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd61075f565b6101476103cf60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd61075f565b61014781610505565b60006100f961039360017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb11361075f565b600061049860017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a413561075f565b6001600160a01b03909316600090815260209390935250604090912055565b6000806104e560017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a413561075f565b6001600160a01b0390931660009081526020939093525050604090205490565b6101476103cf60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb11361075f565b80356001600160a01b038116811461054a57600080fd5b919050565b60006020828403121561056157600080fd5b61056a82610533565b9392505050565b6000806040838503121561058457600080fd5b61058d83610533565b915061059b60208401610533565b90509250929050565b60008083601f8401126105b657600080fd5b50813567ffffffffffffffff8111156105ce57600080fd5b6020830191508360208260051b85010111156105e957600080fd5b9250929050565b6000806000806040858703121561060657600080fd5b843567ffffffffffffffff8082111561061e57600080fd5b61062a888389016105a4565b9096509450602087013591508082111561064357600080fd5b50610650878288016105a4565b95989497509550505050565b6000806040838503121561066f57600080fd5b61067883610533565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156106af576106af610686565b500190565b634e487b7160e01b600052603260045260246000fd5b60008184825b858110156106ff576001600160a01b036106e983610533565b16835260209283019291909101906001016106d0565b509095945050505050565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561074357600080fd5b8260051b80856040850137600092016040019182525092915050565b60008282101561077157610771610686565b50039056fea26469706673582212203e7ab6df8134053395017ef287cf811ad799b15f579f20f78e298e754456c21564736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80636e8cac11116100505780636e8cac11146100a6578063e580d994146100b9578063f8350ed0146100cc57600080fd5b806307a400081461006c5780634679a9e114610091575b600080fd5b6100746100ef565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a461009f36600461054f565b6100fe565b005b6100a46100b4366004610571565b61014a565b6100a46100c73660046105f0565b6101c8565b6100df6100da36600461065c565b61034d565b6040519015158152602001610088565b60006100f9610363565b905090565b610106610397565b6001600160a01b0316336001600160a01b03161461013e5760405163472511eb60e11b81523360048201526024015b60405180910390fd5b610147816103a1565b50565b60006101546103d4565b811461019e57806101636103d4565b6040517fe7e93b3800000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610135565b6101b16101ac82600161069c565b610404565b6101ba83610432565b6101c3826103a1565b505050565b6101d0610363565b6001600160a01b0316336001600160a01b03161415801561020a57506101f461043b565b6001600160a01b0316336001600160a01b031614155b1561022a5760405163472511eb60e11b8152336004820152602401610135565b82610261576040517f6b0f2f7c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82811461029a576040517fb7c599df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b838110156102f5576102ed8585838181106102ba576102ba6106b4565b90506020020160208101906102cf919061054f565b8484848181106102e1576102e16106b4565b9050602002013561046b565b60010161029d565b5083836040516103069291906106ca565b60405180910390207f4caf22f66c30786a07375d69e72415b42a7c7b79774bb0cf692f166bcc08f86b838360405161033f92919061070a565b60405180910390a250505050565b6000818261035a856104b7565b16149392505050565b60006100f961039360017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b8061075f565b5490565b60006100f961043b565b6101476103cf60017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b8061075f565b829055565b60006100f961039360017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd61075f565b6101476103cf60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd61075f565b61014781610505565b60006100f961039360017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb11361075f565b600061049860017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a413561075f565b6001600160a01b03909316600090815260209390935250604090912055565b6000806104e560017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a413561075f565b6001600160a01b0390931660009081526020939093525050604090205490565b6101476103cf60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb11361075f565b80356001600160a01b038116811461054a57600080fd5b919050565b60006020828403121561056157600080fd5b61056a82610533565b9392505050565b6000806040838503121561058457600080fd5b61058d83610533565b915061059b60208401610533565b90509250929050565b60008083601f8401126105b657600080fd5b50813567ffffffffffffffff8111156105ce57600080fd5b6020830191508360208260051b85010111156105e957600080fd5b9250929050565b6000806000806040858703121561060657600080fd5b843567ffffffffffffffff8082111561061e57600080fd5b61062a888389016105a4565b9096509450602087013591508082111561064357600080fd5b50610650878288016105a4565b95989497509550505050565b6000806040838503121561066f57600080fd5b61067883610533565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156106af576106af610686565b500190565b634e487b7160e01b600052603260045260246000fd5b60008184825b858110156106ff576001600160a01b036106e983610533565b16835260209283019291909101906001016106d0565b509095945050505050565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561074357600080fd5b8260051b80856040850137600092016040019182525092915050565b60008282101561077157610771610686565b50039056fea26469706673582212203e7ab6df8134053395017ef287cf811ad799b15f579f20f78e298e754456c21564736f6c634300080a0033",
  "devdoc": {
    "author": "SkillZ",
    "kind": "dev",
    "methods": {
      "allow(address[],uint256[])": {
        "params": {
          "_accounts": "Accounts with statuses to edit",
          "_statuses": "Allowlist statuses for each account, in the same order as _accounts"
        }
      },
      "initAllowlistV1(address,address)": {
        "params": {
          "_admin": "Address of the Allowlist administrator",
          "_allower": "Address of the allower"
        }
      },
      "isAllowed(address,uint256)": {
        "params": {
          "_account": "Address to verify",
          "_mask": "Right represented as a bit mask"
        }
      },
      "setAllower(address)": {
        "params": {
          "_newAllowerAddress": "New address allowed to edit the allowlist"
        }
      }
    },
    "title": "Allowlist (v1)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allow(address[],uint256[])": {
        "notice": "Sets the allowlisting status for one or more accounts"
      },
      "getAllower()": {
        "notice": "Retrieves the allower address"
      },
      "initAllowlistV1(address,address)": {
        "notice": "Initializes the allowlist"
      },
      "isAllowed(address,uint256)": {
        "notice": "Verify if a user has a specific right"
      },
      "setAllower(address)": {
        "notice": "Changes the allower address"
      }
    },
    "notice": "This contract handles the list of allowed recipients.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}