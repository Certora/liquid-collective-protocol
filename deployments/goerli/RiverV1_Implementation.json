{
  "address": "0x66a191Be5733c2a824c53C4c32d298bF1bB549A5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "AllowanceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyDonation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "InactiveOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentPublicKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentSignatures",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFundedKeyDeletionAttempt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidKeyCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPublicKeyCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPublicKeysLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUnsortedIndexes",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_providedValidatorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "InvalidValidatorCountReport",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWithdrawalCredentials",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoAvailableValidatorKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullTransfer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "OperatorAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "OperatorNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OperatorNotFoundAtIndex",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operatorAddress",
          "type": "address"
        }
      ],
      "name": "AddedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalKeyCount",
          "type": "uint256"
        }
      ],
      "name": "AddedValidatorKeys",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validatorCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validatorBalanceSum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "roundId",
          "type": "bytes32"
        }
      ],
      "name": "BeaconDataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "donator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Donation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "keyCount",
          "type": "uint256"
        }
      ],
      "name": "RemovedValidatorKeys",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOperatorAddress",
          "type": "address"
        }
      ],
      "name": "SetOperatorAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "SetOperatorLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "SetOperatorStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStoppedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "SetOperatorStoppedValidatorCount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserDeposit",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_KEY_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNATURE_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_keyCount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_publicKeys",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_signatures",
          "type": "bytes"
        }
      ],
      "name": "addValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxCount",
          "type": "uint256"
        }
      ],
      "name": "depositToConsensusLayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdministrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconValidatorBalanceSum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beaconValidatorBalanceSum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconValidatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beaconValidatorCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositedValidatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositedValidatorCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getOperator",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keys",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopped",
              "type": "uint256"
            }
          ],
          "internalType": "struct Operators.Operator",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getOperatorByName",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keys",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopped",
              "type": "uint256"
            }
          ],
          "internalType": "struct Operators.Operator",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getOperatorDetails",
      "outputs": [
        {
          "internalType": "int256",
          "name": "_index",
          "type": "int256"
        },
        {
          "internalType": "address",
          "name": "_operatorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorIndex",
          "type": "uint256"
        }
      ],
      "name": "getValidator",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "funded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawalCredentials",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositContractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_withdrawalCredentials",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_systemAdministratorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allowlistAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_globalFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_operatorRewardsShare",
          "type": "uint256"
        }
      ],
      "name": "initRiverV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "removeValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_validatorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorBalanceSum",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_roundId",
          "type": "bytes32"
        }
      ],
      "name": "setBeaconData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "setGlobalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newOperatorAddress",
          "type": "address"
        }
      ],
      "name": "setOperatorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newLimit",
          "type": "uint256"
        }
      ],
      "name": "setOperatorLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newOperatorRewardsShare",
          "type": "uint256"
        }
      ],
      "name": "setOperatorRewardsShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_newStatus",
          "type": "bool"
        }
      ],
      "name": "setOperatorStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newStoppedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "setOperatorStoppedValidatorCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "sharesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf99160c331100ff566a0256ceb4041a1ddc4007626f24bf04e4350a9b138d4ca",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0x66a191Be5733c2a824c53C4c32d298bF1bB549A5",
    "transactionIndex": 17,
    "gasUsed": "4542192",
    "logsBloom": "0x
    "blockHash": "0x845004210fae2440fb6e26670705106e7e7baf1884f6d03b079fe369d06b3b6c",
    "transactionHash": "0xf99160c331100ff566a0256ceb4041a1ddc4007626f24bf04e4350a9b138d4ca",
    "logs": [],
    "blockNumber": 6946932,
    "cumulativeGasUsed": "5501294",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7033459a833c3a6a9cee0bc416b032e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllowanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyDonation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InactiveOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentPublicKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFundedKeyDeletionAttempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeysLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUnsortedIndexes\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providedValidatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"InvalidValidatorCountReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawalCredentials\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAvailableValidatorKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"OperatorAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"OperatorNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OperatorNotFoundAtIndex\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"}],\"name\":\"AddedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalKeyCount\",\"type\":\"uint256\"}],\"name\":\"AddedValidatorKeys\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorBalanceSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"roundId\",\"type\":\"bytes32\"}],\"name\":\"BeaconDataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"donator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyCount\",\"type\":\"uint256\"}],\"name\":\"RemovedValidatorKeys\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperatorAddress\",\"type\":\"address\"}],\"name\":\"SetOperatorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"SetOperatorLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetOperatorStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStoppedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"SetOperatorStoppedValidatorCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserDeposit\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_KEY_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNATURE_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keyCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_publicKeys\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"addValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"}],\"name\":\"depositToConsensusLayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdministrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconValidatorBalanceSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beaconValidatorBalanceSum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beaconValidatorCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositedValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositedValidatorCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopped\",\"type\":\"uint256\"}],\"internalType\":\"struct Operators.Operator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getOperatorByName\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopped\",\"type\":\"uint256\"}],\"internalType\":\"struct Operators.Operator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getOperatorDetails\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"_index\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorIndex\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"funded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalCredentials\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_withdrawalCredentials\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_systemAdministratorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowlistAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_globalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operatorRewardsShare\",\"type\":\"uint256\"}],\"name\":\"initRiverV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"removeValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorBalanceSum\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_roundId\",\"type\":\"bytes32\"}],\"name\":\"setBeaconData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setGlobalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOperatorAddress\",\"type\":\"address\"}],\"name\":\"setOperatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setOperatorLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newOperatorRewardsShare\",\"type\":\"uint256\"}],\"name\":\"setOperatorRewardsShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setOperatorStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newStoppedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"setOperatorStoppedValidatorCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"SkillZ\",\"kind\":\"dev\",\"methods\":{\"addOperator(string,address)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_name\":\"The name identifying the operator\",\"_operator\":\"The address representing the operator, receiving the rewards\"}},\"addValidators(uint256,uint256,bytes,bytes)\":{\"details\":\"Only callable by the administrator or the operator address\",\"params\":{\"_index\":\"The operator index\",\"_keyCount\":\"The amount of keys provided\",\"_publicKeys\":\"Public keys of the validator, concatenated\",\"_signatures\":\"Signatures of the validator keys, concatenated\"}},\"deposit(address)\":{\"params\":{\"_referral\":\"Referral address, address(0) if none\"}},\"depositToConsensusLayer(uint256)\":{\"params\":{\"_maxCount\":\"The maximum amount of validator keys to fund\"}},\"donate()\":{\"details\":\"This method should be mainly used by the execution layer fee recipient to compound any collected fee\"},\"getOperator(uint256)\":{\"params\":{\"_index\":\"The index of the operator\"}},\"getOperatorByName(string)\":{\"params\":{\"_name\":\"The name identifying the operator\"}},\"getValidator(uint256,uint256)\":{\"params\":{\"_operatorIndex\":\"The index of the operator\",\"_validatorIndex\":\"The index of the validator\"}},\"initRiverV1(address,bytes32,address,address,address,address,uint256,uint256)\":{\"params\":{\"_allowlistAddress\":\"Address of the allowlist contract\",\"_depositContractAddress\":\"Address to make Consensus Layer deposits\",\"_globalFee\":\"Amount retained when the eth balance increases, splitted between the treasury and the operators\",\"_operatorRewardsShare\":\"Share of the global fee used to reward node operators\",\"_systemAdministratorAddress\":\"Administrator address\",\"_treasuryAddress\":\"Address receiving the fee minus the operator share\",\"_withdrawalCredentials\":\"Credentials to use for every validator deposit\"}},\"removeValidators(uint256,uint256[])\":{\"details\":\"Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order, otherwise the method will revert\",\"params\":{\"_index\":\"The operator index\",\"_indexes\":\"The indexes of the keys to remove\"}},\"setBeaconData(uint256,uint256,bytes32)\":{\"details\":\"Can only be called by the oracle address\",\"params\":{\"_roundId\":\"An identifier for this update\",\"_validatorBalanceSum\":\"The validator balance sum of the active validators on the consensus layer\",\"_validatorCount\":\"The number of active validators on the consensus layer\"}},\"setGlobalFee(uint256)\":{\"params\":{\"newFee\":\"New fee value\"}},\"setOperatorAddress(uint256,address)\":{\"details\":\"Only callable by the administrator or the previous operator address\",\"params\":{\"_index\":\"The operator index\",\"_newOperatorAddress\":\"The new address representing the operator\"}},\"setOperatorLimit(uint256,uint256)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_index\":\"The operator index\",\"_newLimit\":\"The new staking limit of the operator\"}},\"setOperatorRewardsShare(uint256)\":{\"params\":{\"newOperatorRewardsShare\":\"New share value\"}},\"setOperatorStatus(uint256,bool)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_index\":\"The operator index\",\"_newStatus\":\"The new status of the operator\"}},\"setOperatorStoppedValidatorCount(uint256,uint256)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_index\":\"The operator index\",\"_newStoppedValidatorCount\":\"The new stopped validator count of the operator\"}},\"setOracle(address)\":{\"params\":{\"_oracleAddress\":\"Address of the oracle\"}}},\"title\":\"River (v1)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOperator(string,address)\":{\"notice\":\"Adds an operator to the registry\"},\"addValidators(uint256,uint256,bytes,bytes)\":{\"notice\":\"Adds new keys for an operator\"},\"deposit(address)\":{\"notice\":\"Explicit deposit method\"},\"depositToConsensusLayer(uint256)\":{\"notice\":\"Deposits current balance to the Consensus Layer by batches of 32 ETH\"},\"donate()\":{\"notice\":\"Allows anyone to add ethers to river without minting new shares\"},\"getAdministrator()\":{\"notice\":\"Retrieve system administrator address\"},\"getBeaconValidatorBalanceSum()\":{\"notice\":\"Get Beacon validator balance sum\"},\"getBeaconValidatorCount()\":{\"notice\":\"Get Beacon validator count (the amount of validator reported by the oracles)\"},\"getDepositedValidatorCount()\":{\"notice\":\"Get the deposited validator count (the count of deposits made by the contract)\"},\"getOperator(uint256)\":{\"notice\":\"Get operator details\"},\"getOperatorByName(string)\":{\"notice\":\"Get operator details by name\"},\"getOperatorCount()\":{\"notice\":\"Get operator count\"},\"getOracle()\":{\"notice\":\"Get Oracle address\"},\"getValidator(uint256,uint256)\":{\"notice\":\"Get the details of a validator\"},\"getWithdrawalCredentials()\":{\"notice\":\"Retrieve the withdrawal credentials\"},\"initRiverV1(address,bytes32,address,address,address,address,uint256,uint256)\":{\"notice\":\"Initializes the River system\"},\"removeValidators(uint256,uint256[])\":{\"notice\":\"Remove validator keys\"},\"setBeaconData(uint256,uint256,bytes32)\":{\"notice\":\"Sets the validator count and validator balance sum reported by the oracle\"},\"setGlobalFee(uint256)\":{\"notice\":\"Changes the global fee parameter\"},\"setOperatorAddress(uint256,address)\":{\"notice\":\"Changes the operator address of an operator\"},\"setOperatorLimit(uint256,uint256)\":{\"notice\":\"Changes the operator staking limit\"},\"setOperatorRewardsShare(uint256)\":{\"notice\":\"Changes the operator rewards share.\"},\"setOperatorStatus(uint256,bool)\":{\"notice\":\"Changes the operator status\"},\"setOperatorStoppedValidatorCount(uint256,uint256)\":{\"notice\":\"Changes the operator stopped validator cound\"},\"setOracle(address)\":{\"notice\":\"Set Oracle address\"}},\"notice\":\"This contract merges all the manager contracts and implements all the virtual methods stitching all components together\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/River.1.sol\":\"RiverV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\ncontract Initializable {\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    modifier init(uint256 version) {\\n        if (version != Version.get()) {\\n            revert InvalidInitialization(version, Version.get());\\n        }\\n        Version.set(version + 1); // prevents reentrency on the called method\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc93555f4bd660f91e565f20753e0d3a01e783e673bc0209d0d1e33c7b6941053\",\"license\":\"BUSL-1.1\"},\"contracts/src/River.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./components/DepositManager.1.sol\\\";\\nimport \\\"./components/TransferManager.1.sol\\\";\\nimport \\\"./components/SharesManager.1.sol\\\";\\nimport \\\"./components/OracleManager.1.sol\\\";\\nimport \\\"./components/OperatorsManager.1.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./libraries/LibOwnable.sol\\\";\\n\\nimport \\\"./state/shared/AdministratorAddress.sol\\\";\\nimport \\\"./state/river/AllowlistAddress.sol\\\";\\nimport \\\"./state/river/TreasuryAddress.sol\\\";\\nimport \\\"./state/river/OperatorRewardsShare.sol\\\";\\nimport \\\"./state/river/GlobalFee.sol\\\";\\n\\n/// @title River (v1)\\n/// @author SkillZ\\n/// @notice This contract merges all the manager contracts and implements all the virtual methods stitching all components together\\ncontract RiverV1 is\\n    DepositManagerV1,\\n    TransferManagerV1,\\n    SharesManagerV1,\\n    OracleManagerV1,\\n    OperatorsManagerV1,\\n    Initializable\\n{\\n    uint256 public constant BASE = 100000;\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() override(OperatorsManagerV1, OracleManagerV1) {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _allowlistAddress Address of the allowlist contract\\n    /// @param _treasuryAddress Address receiving the fee minus the operator share\\n    /// @param _globalFee Amount retained when the eth balance increases, splitted between the treasury and the operators\\n    /// @param _operatorRewardsShare Share of the global fee used to reward node operators\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _treasuryAddress,\\n        uint256 _globalFee,\\n        uint256 _operatorRewardsShare\\n    ) external init(0) {\\n        LibOwnable._setAdmin(_systemAdministratorAddress);\\n        TreasuryAddress.set(_treasuryAddress);\\n        GlobalFee.set(_globalFee);\\n        OperatorRewardsShare.set(_operatorRewardsShare);\\n\\n        DepositManagerV1.initDepositManagerV1(_depositContractAddress, _withdrawalCredentials);\\n        OracleManagerV1.initOracleManagerV1(_oracleAddress);\\n        AllowlistAddress.set(_allowlistAddress);\\n    }\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param newFee New fee value\\n    function setGlobalFee(uint256 newFee) external onlyAdmin {\\n        if (newFee > BASE) {\\n            revert Errors.InvalidArgument();\\n        }\\n\\n        GlobalFee.set(newFee);\\n    }\\n\\n    /// @notice Changes the operator rewards share.\\n    /// @param newOperatorRewardsShare New share value\\n    function setOperatorRewardsShare(uint256 newOperatorRewardsShare) external onlyAdmin {\\n        if (newOperatorRewardsShare > BASE) {\\n            revert Errors.InvalidArgument();\\n        }\\n\\n        OperatorRewardsShare.set(newOperatorRewardsShare);\\n    }\\n\\n    /// @notice Retrieve system administrator address\\n    function getAdministrator() external view returns (address) {\\n        return LibOwnable._getAdmin();\\n    }\\n\\n    uint256 internal constant DEPOSIT_MASK = 0x1;\\n    uint256 internal constant TRANSFER_MASK = 0x1 << 1;\\n\\n    /// @notice Handler called whenever a user deposits ETH to the system. Mints the adequate amount of shares.\\n    /// @param _depositor User address that made the deposit\\n    /// @param _amount Amount of ETH deposited\\n    function _onDeposit(address _depositor, uint256 _amount) internal override {\\n        if ((AllowlistAddress.get()).isAllowed(_depositor, DEPOSIT_MASK) == false) {\\n            revert Errors.Unauthorized(_depositor);\\n        }\\n        SharesManagerV1._mintShares(_depositor, _amount);\\n    }\\n\\n    /// @notice Handler called whenever an allowlist check is made for an address. Asks the Allowlist Manager component.\\n    /// @param _account Address to verify\\n    function _isAccountAllowed(address _account) internal view override returns (bool) {\\n        return (AllowlistAddress.get()).isAllowed(_account, TRANSFER_MASK);\\n    }\\n\\n    /// @notice Handler called whenever a deposit to the consensus layer is made. Should retrieve _requestedAmount or lower keys\\n    /// @param _requestedAmount Amount of keys required. Contract is expected to send _requestedAmount or lower.\\n    function _getNextValidators(uint256 _requestedAmount)\\n        internal\\n        override\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        return OperatorsManagerV1._getNextValidatorsFromActiveOperators(_requestedAmount);\\n    }\\n\\n    /// @notice Internal utility managing reward distribution amongst node operators\\n    /// @param _reward Amount of shares to split between operators\\n    function _rewardOperators(uint256 _reward) internal returns (uint256) {\\n        Operators.Operator[] memory operators = Operators.getAllActive();\\n        uint256[] memory validatorCounts = new uint256[](operators.length);\\n\\n        uint256 totalActiveValidators = 0;\\n        for (uint256 idx = 0; idx < operators.length; ++idx) {\\n            uint256 operatorActiveValidatorCount = operators[idx].funded - operators[idx].stopped;\\n            totalActiveValidators += operatorActiveValidatorCount;\\n            validatorCounts[idx] = operatorActiveValidatorCount;\\n        }\\n\\n        if (totalActiveValidators > 0) {\\n            uint256 rewardsPerActiveValidator = _reward / totalActiveValidators;\\n\\n            for (uint256 idx = 0; idx < validatorCounts.length; ++idx) {\\n                _mintRawShares(operators[idx].operator, validatorCounts[idx] * rewardsPerActiveValidator);\\n            }\\n        } else {\\n            _reward = 0;\\n        }\\n\\n        return _reward;\\n    }\\n\\n    /// @notice Handler called whenever a donation of ETH has been made to the system. It calls the same logic as when revenues are earned.\\n    /// @param _amount Additional eth donated\\n    function _onDonation(uint256 _amount) internal override {\\n        _onEarnings(_amount);\\n    }\\n\\n    /// @notice Handler called whenever the balance of ETH handled by the system increases. Splits funds between operators and treasury.\\n    /// @param _amount Additional eth received\\n    function _onEarnings(uint256 _amount) internal override {\\n        uint256 globalFee = GlobalFee.get();\\n        uint256 sharesToMint = (_amount * _totalShares() * globalFee) /\\n            ((_assetBalance() * BASE) - (_amount * globalFee));\\n\\n        uint256 operatorRewards = (sharesToMint * OperatorRewardsShare.get()) / BASE;\\n\\n        uint256 mintedRewards = _rewardOperators(operatorRewards);\\n\\n        _mintRawShares(TreasuryAddress.get(), sharesToMint - mintedRewards);\\n    }\\n\\n    /// @notice Handler called whenever the total balance of ETH is requested\\n    function _assetBalance() internal view override returns (uint256) {\\n        uint256 beaconValidatorCount = BeaconValidatorCount.get();\\n        uint256 depositedValidatorCount = DepositedValidatorCount.get();\\n        if (beaconValidatorCount < depositedValidatorCount) {\\n            return\\n                BeaconValidatorBalanceSum.get() +\\n                address(this).balance +\\n                (depositedValidatorCount - beaconValidatorCount) *\\n                DepositManagerV1.DEPOSIT_SIZE;\\n        } else {\\n            return BeaconValidatorBalanceSum.get() + address(this).balance;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd284ca5bd9d7822237137dfaf2d7c4de441e0d899c1734ac2794a8ddf1d35d6e\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/DepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IDepositContract.sol\\\";\\n\\nimport \\\"../libraries/BytesLib.sol\\\";\\nimport \\\"../libraries/Uint256Lib.sol\\\";\\n\\nimport \\\"../state/river/DepositContractAddress.sol\\\";\\nimport \\\"../state/river/WithdrawalCredentials.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\n\\n/// @title Deposit Manager (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the interactions with the official deposit contract, funding all validators\\n/// @dev _onValidatorKeyRequest must be overriden.\\nabstract contract DepositManagerV1 {\\n    error NotEnoughFunds();\\n    error InconsistentPublicKeys();\\n    error InconsistentSignatures();\\n    error NoAvailableValidatorKeys();\\n    error InvalidPublicKeyCount();\\n    error InvalidSignatureCount();\\n    error InvalidWithdrawalCredentials();\\n\\n    uint256 public constant PUBLIC_KEY_LENGTH = 48;\\n    uint256 public constant SIGNATURE_LENGTH = 96;\\n    uint256 public constant DEPOSIT_SIZE = 32 ether;\\n\\n    /// @notice Initializer to set the deposit contract address and the withdrawal credentials to use\\n    /// @param _depositContractAddress The address of the deposit contract\\n    /// @param _withdrawalCredentials The withdrawal credentials to apply to all deposits\\n    function initDepositManagerV1(address _depositContractAddress, bytes32 _withdrawalCredentials) internal {\\n        DepositContractAddress.set(IDepositContract(_depositContractAddress));\\n\\n        WithdrawalCredentials.set(_withdrawalCredentials);\\n    }\\n\\n    /// @notice Retrieve the withdrawal credentials\\n    function getWithdrawalCredentials() external view returns (bytes32) {\\n        return WithdrawalCredentials.get();\\n    }\\n\\n    /// @notice Internal helper to retrieve validator keys ready to be funded\\n    /// @dev Must be overriden with an implementation that provides keyCount or less keys upon call\\n    /// @param _keyCount The amount of keys (or less) to return.\\n    function _getNextValidators(uint256 _keyCount)\\n        internal\\n        virtual\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    function depositToConsensusLayer(uint256 _maxCount) external {\\n        uint256 validatorsToDeposit = Uint256Lib.min(address(this).balance / DEPOSIT_SIZE, _maxCount);\\n\\n        if (validatorsToDeposit == 0) {\\n            revert NotEnoughFunds();\\n        }\\n\\n        (bytes[] memory publicKeys, bytes[] memory signatures) = _getNextValidators(validatorsToDeposit);\\n\\n        uint256 receivedPublicKeyCount = publicKeys.length;\\n\\n        if (receivedPublicKeyCount == 0) {\\n            revert NoAvailableValidatorKeys();\\n        }\\n\\n        if (receivedPublicKeyCount > validatorsToDeposit) {\\n            revert InvalidPublicKeyCount();\\n        }\\n\\n        uint256 receivedSignatureCount = signatures.length;\\n\\n        if (receivedSignatureCount != receivedPublicKeyCount) {\\n            revert InvalidSignatureCount();\\n        }\\n\\n        bytes32 withdrawalCredentials = WithdrawalCredentials.get();\\n\\n        if (withdrawalCredentials == 0) {\\n            revert InvalidWithdrawalCredentials();\\n        }\\n\\n        for (uint256 idx = 0; idx < receivedPublicKeyCount; idx += 1) {\\n            _depositValidator(publicKeys[idx], signatures[idx], withdrawalCredentials);\\n        }\\n\\n        DepositedValidatorCount.set(DepositedValidatorCount.get() + receivedPublicKeyCount);\\n    }\\n\\n    /// @notice Deposits 32 ETH to the official Deposit contract\\n    /// @param _publicKey The public key of the validator\\n    /// @param _signature The signature provided by the operator\\n    /// @param _withdrawalCredentials The withdrawal credentials provided by River\\n    function _depositValidator(\\n        bytes memory _publicKey,\\n        bytes memory _signature,\\n        bytes32 _withdrawalCredentials\\n    ) internal {\\n        if (_publicKey.length != PUBLIC_KEY_LENGTH) {\\n            revert InconsistentPublicKeys();\\n        }\\n\\n        if (_signature.length != SIGNATURE_LENGTH) {\\n            revert InconsistentSignatures();\\n        }\\n        uint256 value = DEPOSIT_SIZE;\\n\\n        uint256 depositAmount = value / 1000000000 wei;\\n        assert(depositAmount * 1000000000 wei == value);\\n\\n        bytes32 pubkeyRoot = sha256(BytesLib.pad64(_publicKey));\\n        bytes32 signatureRoot = sha256(\\n            abi.encodePacked(\\n                sha256(BytesLib.slice(_signature, 0, 64)),\\n                sha256(BytesLib.pad64(BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)))\\n            )\\n        );\\n\\n        bytes32 depositDataRoot = sha256(\\n            abi.encodePacked(\\n                sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\n                sha256(abi.encodePacked(Uint256Lib.toLittleEndian64(depositAmount), signatureRoot))\\n            )\\n        );\\n\\n        uint256 targetBalance = address(this).balance - value;\\n\\n        DepositContractAddress.get().deposit{value: value}(\\n            _publicKey,\\n            abi.encodePacked(_withdrawalCredentials),\\n            _signature,\\n            depositDataRoot\\n        );\\n        require(address(this).balance == targetBalance, \\\"EXPECTING_DEPOSIT_TO_HAPPEN\\\");\\n    }\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    function getDepositedValidatorCount() external view returns (uint256 depositedValidatorCount) {\\n        depositedValidatorCount = DepositedValidatorCount.get();\\n    }\\n}\\n\",\"keccak256\":\"0xe6a3a67c018cbda8cb4e3e4faa1afe5e87354858e0891df24c463fc8d3f37077\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/OperatorsManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../libraries/Uint256Lib.sol\\\";\\nimport \\\"../libraries/LibOwnable.sol\\\";\\n\\nimport \\\"../state/river/Operators.sol\\\";\\nimport \\\"../state/river/ValidatorKeys.sol\\\";\\n\\n/// @title Operators Manager (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the operator and key list\\ncontract OperatorsManagerV1 {\\n    error OperatorAlreadyExists(string name);\\n    error InactiveOperator(uint256 index);\\n    error InvalidFundedKeyDeletionAttempt();\\n    error InvalidUnsortedIndexes();\\n    error InvalidKeyCount();\\n    error InvalidPublicKeysLength();\\n    error InvalidSignatureLength();\\n    error InvalidIndexOutOfBounds();\\n\\n    event AddedOperator(uint256 indexed index, string name, address operatorAddress);\\n    event SetOperatorStatus(uint256 indexed index, bool active);\\n    event SetOperatorLimit(uint256 indexed index, uint256 newLimit);\\n    event SetOperatorStoppedValidatorCount(uint256 indexed index, uint256 newStoppedValidatorCount);\\n    event SetOperatorAddress(uint256 indexed index, address newOperatorAddress);\\n    event AddedValidatorKeys(uint256 indexed index, uint256 totalKeyCount);\\n    event RemovedValidatorKeys(uint256 indexed index, uint256 keyCount);\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() virtual {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents the call from working if the operator is not active\\n    /// @param _index The name identifying the operator\\n    modifier active(uint256 _index) {\\n        if (Operators.getByIndex(_index).active == false) {\\n            revert InactiveOperator(_index);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents anyone except the admin or the given operator to make the call. Also checks if operator is active\\n    /// @param _index The name identifying the operator\\n    modifier operatorOrAdmin(uint256 _index) {\\n        if (msg.sender == LibOwnable._getAdmin()) {\\n            _;\\n            return;\\n        }\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n        if (operator.active == false) {\\n            revert InactiveOperator(_index);\\n        }\\n        if (msg.sender != operator.operator) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    function getOperatorDetails(string calldata _name) external view returns (int256 _index, address _operatorAddress) {\\n        _index = Operators.indexOf(_name);\\n        _operatorAddress = Operators.get(_name).operator;\\n    }\\n\\n    /// @notice Adds an operator to the registry\\n    /// @dev Only callable by the administrator\\n    /// @param _name The name identifying the operator\\n    /// @param _operator The address representing the operator, receiving the rewards\\n    function addOperator(string calldata _name, address _operator) external onlyAdmin {\\n        if (Operators.exists(_name) == true) {\\n            revert OperatorAlreadyExists(_name);\\n        }\\n\\n        Operators.Operator memory newOperator = Operators.Operator({\\n            active: true,\\n            operator: _operator,\\n            name: _name,\\n            limit: 0,\\n            funded: 0,\\n            keys: 0,\\n            stopped: 0\\n        });\\n\\n        uint256 operatorIndex = Operators.set(_name, newOperator);\\n\\n        emit AddedOperator(operatorIndex, newOperator.name, newOperator.operator);\\n    }\\n\\n    /// @notice Changes the operator address of an operator\\n    /// @dev Only callable by the administrator or the previous operator address\\n    /// @param _index The operator index\\n    /// @param _newOperatorAddress The new address representing the operator\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external operatorOrAdmin(_index) {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        operator.operator = _newOperatorAddress;\\n\\n        emit SetOperatorAddress(_index, operator.operator);\\n    }\\n\\n    /// @notice Changes the operator status\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStatus The new status of the operator\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external onlyAdmin {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        operator.active = _newStatus;\\n\\n        emit SetOperatorStatus(_index, _newStatus);\\n    }\\n\\n    /// @notice Changes the operator stopped validator cound\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStoppedValidatorCount The new stopped validator count of the operator\\n    function setOperatorStoppedValidatorCount(uint256 _index, uint256 _newStoppedValidatorCount) external onlyAdmin {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        if (_newStoppedValidatorCount > operator.funded) {\\n            revert Errors.InvalidArgument();\\n        }\\n\\n        operator.stopped = _newStoppedValidatorCount;\\n\\n        emit SetOperatorStoppedValidatorCount(_index, operator.stopped);\\n    }\\n\\n    /// @notice Changes the operator staking limit\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newLimit The new staking limit of the operator\\n    function setOperatorLimit(uint256 _index, uint256 _newLimit) external onlyAdmin {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        operator.limit = _newLimit;\\n\\n        emit SetOperatorLimit(_index, operator.limit);\\n    }\\n\\n    /// @notice Adds new keys for an operator\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @param _index The operator index\\n    /// @param _keyCount The amount of keys provided\\n    /// @param _publicKeys Public keys of the validator, concatenated\\n    /// @param _signatures Signatures of the validator keys, concatenated\\n    function addValidators(\\n        uint256 _index,\\n        uint256 _keyCount,\\n        bytes calldata _publicKeys,\\n        bytes calldata _signatures\\n    ) external operatorOrAdmin(_index) {\\n        if (_keyCount == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        if (_publicKeys.length != _keyCount * ValidatorKeys.PUBLIC_KEY_LENGTH) {\\n            revert InvalidPublicKeysLength();\\n        }\\n\\n        if (_signatures.length != _keyCount * ValidatorKeys.SIGNATURE_LENGTH) {\\n            revert InvalidSignatureLength();\\n        }\\n\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        for (uint256 idx = 0; idx < _keyCount; ++idx) {\\n            bytes memory publicKey = BytesLib.slice(\\n                _publicKeys,\\n                idx * ValidatorKeys.PUBLIC_KEY_LENGTH,\\n                ValidatorKeys.PUBLIC_KEY_LENGTH\\n            );\\n            bytes memory signature = BytesLib.slice(\\n                _signatures,\\n                idx * ValidatorKeys.SIGNATURE_LENGTH,\\n                ValidatorKeys.SIGNATURE_LENGTH\\n            );\\n            ValidatorKeys.set(_index, operator.keys + idx, publicKey, signature);\\n        }\\n\\n        operator.keys += _keyCount;\\n\\n        emit AddedValidatorKeys(_index, operator.keys);\\n    }\\n\\n    /// @notice Remove validator keys\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @dev The indexes must be provided sorted in decreasing order, otherwise the method will revert\\n    /// @param _index The operator index\\n    /// @param _indexes The indexes of the keys to remove\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external operatorOrAdmin(_index) {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        if (_indexes.length == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        for (uint256 idx = 0; idx < _indexes.length; ++idx) {\\n            uint256 keyIndex = _indexes[idx];\\n\\n            if (keyIndex < operator.funded) {\\n                revert InvalidFundedKeyDeletionAttempt();\\n            }\\n\\n            if (keyIndex >= operator.keys) {\\n                revert InvalidIndexOutOfBounds();\\n            }\\n\\n            if (idx > 0 && _indexes[idx] >= _indexes[idx - 1]) {\\n                revert InvalidUnsortedIndexes();\\n            }\\n\\n            uint256 lastKeyIndex = operator.keys - 1;\\n            (bytes memory lastPublicKey, bytes memory lastSignature) = ValidatorKeys.get(_index, lastKeyIndex);\\n            ValidatorKeys.set(_index, keyIndex, lastPublicKey, lastSignature);\\n            ValidatorKeys.set(_index, lastKeyIndex, new bytes(0), new bytes(0));\\n            operator.keys -= 1;\\n        }\\n\\n        emit RemovedValidatorKeys(_index, operator.keys);\\n    }\\n\\n    /// @notice Get operator details by name\\n    /// @param _name The name identifying the operator\\n    function getOperatorByName(string calldata _name) external view returns (Operators.Operator memory) {\\n        return Operators.get(_name);\\n    }\\n\\n    /// @notice Get operator details\\n    /// @param _index The index of the operator\\n    function getOperator(uint256 _index) external view returns (Operators.Operator memory) {\\n        return Operators.getByIndex(_index);\\n    }\\n\\n    /// @notice Get operator count\\n    function getOperatorCount() external view returns (uint256) {\\n        return Operators.getCount();\\n    }\\n\\n    /// @notice Get the details of a validator\\n    /// @param _operatorIndex The index of the operator\\n    /// @param _validatorIndex The index of the validator\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (\\n            bytes memory publicKey,\\n            bytes memory signature,\\n            bool funded\\n        )\\n    {\\n        (publicKey, signature) = ValidatorKeys.get(_operatorIndex, _validatorIndex);\\n        funded = _validatorIndex < Operators.getByIndex(_operatorIndex).funded;\\n    }\\n\\n    /// @notice Internal utility to concatenate bytes arrays together\\n    function _concatenateByteArrays(bytes[] memory arr1, bytes[] memory arr2)\\n        internal\\n        pure\\n        returns (bytes[] memory res)\\n    {\\n        res = new bytes[](arr1.length + arr2.length);\\n        for (uint256 idx = 0; idx < arr1.length; ++idx) {\\n            res[idx] = arr1[idx];\\n        }\\n        for (uint256 idx = 0; idx < arr2.length; ++idx) {\\n            res[idx + arr1.length] = arr2[idx];\\n        }\\n    }\\n\\n    /// @notice Handler called whenever a deposit to the consensus layer is made. Should retrieve _requestedAmount or lower keys\\n    /// @param _requestedAmount Amount of keys required. Contract is expected to send _requestedAmount or lower.\\n    function _getNextValidatorsFromActiveOperators(uint256 _requestedAmount)\\n        internal\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        Operators.CachedOperator[] memory operators = Operators.getAllFundable();\\n\\n        if (operators.length == 0) {\\n            return (new bytes[](0), new bytes[](0));\\n        }\\n\\n        uint256 selectedOperatorIndex = 0;\\n        for (uint256 idx = 1; idx < operators.length; ++idx) {\\n            if (\\n                operators[idx].funded - operators[idx].stopped <\\n                operators[selectedOperatorIndex].funded - operators[selectedOperatorIndex].stopped\\n            ) {\\n                selectedOperatorIndex = idx;\\n            }\\n        }\\n\\n        uint256 selectedOperatorAvailableKeys = Uint256Lib.min(\\n            operators[selectedOperatorIndex].keys,\\n            operators[selectedOperatorIndex].limit\\n        ) - operators[selectedOperatorIndex].funded;\\n\\n        if (selectedOperatorAvailableKeys == 0) {\\n            return (new bytes[](0), new bytes[](0));\\n        }\\n\\n        Operators.Operator storage operator = Operators.get(operators[selectedOperatorIndex].name);\\n        if (selectedOperatorAvailableKeys >= _requestedAmount) {\\n            (publicKeys, signatures) = ValidatorKeys.getKeys(\\n                operators[selectedOperatorIndex].index,\\n                operators[selectedOperatorIndex].funded,\\n                _requestedAmount\\n            );\\n            operator.funded += _requestedAmount;\\n        } else {\\n            (publicKeys, signatures) = ValidatorKeys.getKeys(\\n                operators[selectedOperatorIndex].index,\\n                operators[selectedOperatorIndex].funded,\\n                selectedOperatorAvailableKeys\\n            );\\n            operator.funded += selectedOperatorAvailableKeys;\\n            (\\n                bytes[] memory additionalPublicKeys,\\n                bytes[] memory additionalSignatures\\n            ) = _getNextValidatorsFromActiveOperators(_requestedAmount - selectedOperatorAvailableKeys);\\n            publicKeys = _concatenateByteArrays(publicKeys, additionalPublicKeys);\\n            signatures = _concatenateByteArrays(signatures, additionalSignatures);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x56665360cbf9a9e484de6d06dcd342a8f5d82c22422c22a468507fd464b98c25\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/OracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../libraries/LibOwnable.sol\\\";\\n\\nimport \\\"../state/river/OracleAddress.sol\\\";\\nimport \\\"../state/river/LastOracleRoundId.sol\\\";\\nimport \\\"../state/river/BeaconValidatorBalanceSum.sol\\\";\\nimport \\\"../state/river/BeaconValidatorCount.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\n\\n/// @title Oracle Manager (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the inputs provided by the oracle\\nabstract contract OracleManagerV1 {\\n    event BeaconDataUpdate(uint256 validatorCount, uint256 validatorBalanceSum, bytes32 roundId);\\n\\n    error InvalidValidatorCountReport(uint256 _providedValidatorCount, uint256 _depositedValidatorCount);\\n\\n    /// @notice Handler called if the delta between the last and new validator balance sum is positive\\n    /// @dev Must be overriden\\n    /// @param _profits The positive increase in the validator balance sum (staking rewards)\\n    function _onEarnings(uint256 _profits) internal virtual;\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() virtual {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Set the initial oracle address\\n    /// @param _oracle Address of the oracle\\n    function initOracleManagerV1(address _oracle) internal {\\n        OracleAddress.set(_oracle);\\n    }\\n\\n    /// @notice Sets the validator count and validator balance sum reported by the oracle\\n    /// @dev Can only be called by the oracle address\\n    /// @param _validatorCount The number of active validators on the consensus layer\\n    /// @param _validatorBalanceSum The validator balance sum of the active validators on the consensus layer\\n    /// @param _roundId An identifier for this update\\n    function setBeaconData(\\n        uint256 _validatorCount,\\n        uint256 _validatorBalanceSum,\\n        bytes32 _roundId\\n    ) external {\\n        if (msg.sender != OracleAddress.get()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n\\n        if (_validatorCount > DepositedValidatorCount.get()) {\\n            revert InvalidValidatorCountReport(_validatorCount, DepositedValidatorCount.get());\\n        }\\n\\n        uint256 previousValidatorBalanceSum = BeaconValidatorBalanceSum.get();\\n        uint256 newValidators = _validatorCount - BeaconValidatorCount.get();\\n\\n        BeaconValidatorBalanceSum.set(_validatorBalanceSum);\\n        BeaconValidatorCount.set(_validatorCount);\\n        LastOracleRoundId.set(_roundId);\\n\\n        if (previousValidatorBalanceSum < _validatorBalanceSum) {\\n            _onEarnings(_validatorBalanceSum - previousValidatorBalanceSum - newValidators * 32 ether);\\n        }\\n\\n        emit BeaconDataUpdate(_validatorCount, _validatorBalanceSum, _roundId);\\n    }\\n\\n    /// @notice Get Oracle address\\n    function getOracle() external view returns (address oracle) {\\n        oracle = OracleAddress.get();\\n    }\\n\\n    /// @notice Set Oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external onlyAdmin {\\n        OracleAddress.set(_oracleAddress);\\n    }\\n\\n    /// @notice Get Beacon validator balance sum\\n    function getBeaconValidatorBalanceSum() external view returns (uint256 beaconValidatorBalanceSum) {\\n        beaconValidatorBalanceSum = BeaconValidatorBalanceSum.get();\\n    }\\n\\n    /// @notice Get Beacon validator count (the amount of validator reported by the oracles)\\n    function getBeaconValidatorCount() external view returns (uint256 beaconValidatorCount) {\\n        beaconValidatorCount = BeaconValidatorCount.get();\\n    }\\n}\\n\",\"keccak256\":\"0xcf80ce2fb376557c6ded4ca34f8649ae983678a905009c1e9a1a6d8a930507b9\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/SharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nimport \\\"../state/river/Shares.sol\\\";\\nimport \\\"../state/river/SharesPerOwner.sol\\\";\\nimport \\\"../state/river/ApprovalsPerOwner.sol\\\";\\n\\n/// @title Shares Manager (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the shares of the depositor and the rebasing effect depending on the oracle data\\nabstract contract SharesManagerV1 is IERC20 {\\n    error BalanceTooLow();\\n    error UnauthorizedOperation();\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n    error NullTransfer();\\n\\n    function _isAccountAllowed(address _account) internal view virtual returns (bool);\\n\\n    modifier allowed(address _account) {\\n        if (!_isAccountAllowed(_account)) {\\n            revert Errors.Unauthorized(_account);\\n        }\\n        _;\\n    }\\n\\n    modifier isNotNull(uint256 _value) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        _;\\n    }\\n\\n    modifier hasFunds(address _owner, uint256 _value) {\\n        if (_balanceOf(_owner) < _value) {\\n            revert BalanceTooLow();\\n        }\\n        _;\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"River\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"lsETH\\\";\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _assetBalance();\\n    }\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance) {\\n        return _balanceOf(_owner);\\n    }\\n\\n    function balanceOfUnderlying(address _owner) public view returns (uint256 balance) {\\n        return _balanceFromShares(SharesPerOwner.get(_owner));\\n    }\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining) {\\n        return ApprovalsPerOwner.get(_owner, _spender);\\n    }\\n\\n    function sharesOf(address _owner) external view returns (uint256 shares) {\\n        return SharesPerOwner.get(_owner);\\n    }\\n\\n    function transfer(address _to, uint256 _value)\\n        external\\n        allowed(msg.sender)\\n        isNotNull(_value)\\n        hasFunds(msg.sender, _value)\\n        returns (bool)\\n    {\\n        return _transfer(msg.sender, _to, _value);\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external allowed(_from) isNotNull(_value) hasFunds(_from, _value) returns (bool) {\\n        if (_from != msg.sender) {\\n            uint256 currentAllowance = ApprovalsPerOwner.get(_from, msg.sender);\\n            if (currentAllowance < _value) {\\n                revert AllowanceTooLow(_from, msg.sender, currentAllowance, _value);\\n            }\\n            ApprovalsPerOwner.set(_from, msg.sender, currentAllowance - _value);\\n        }\\n        return _transfer(_from, _to, _value);\\n    }\\n\\n    function approve(address _spender, uint256 _value) external allowed(msg.sender) returns (bool success) {\\n        ApprovalsPerOwner.set(msg.sender, _spender, _value);\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal returns (bool) {\\n        SharesPerOwner.set(_from, SharesPerOwner.get(_from) - _value);\\n        SharesPerOwner.set(_to, SharesPerOwner.get(_to) + _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function _assetBalance() internal view virtual returns (uint256);\\n\\n    function _balanceFromShares(uint256 shares) internal view returns (uint256) {\\n        uint256 _totalSharesValue = Shares.get();\\n\\n        if (_totalSharesValue == 0) {\\n            return 0;\\n        }\\n\\n        return ((shares * _assetBalance())) / _totalSharesValue;\\n    }\\n\\n    // assuming funds are received, _assetBalance should have taken _value into account\\n    function _mintShares(address _owner, uint256 _value) internal {\\n        uint256 assetBalance = _assetBalance();\\n        uint256 oldTotalAssetBalance = _assetBalance() - _value;\\n\\n        if (oldTotalAssetBalance == 0) {\\n            _mintRawShares(_owner, assetBalance);\\n        } else {\\n            uint256 sharesToMint = (_value * _totalShares()) / oldTotalAssetBalance;\\n            _mintRawShares(_owner, sharesToMint);\\n        }\\n    }\\n\\n    // assuming funds are received, _assetBalance should have taken _value into account\\n    function _mintRawShares(address _owner, uint256 _value) internal {\\n        Shares.set(Shares.get() + _value);\\n        SharesPerOwner.set(_owner, SharesPerOwner.get(_owner) + _value);\\n        emit Transfer(address(0), _owner, _value);\\n    }\\n\\n    function _balanceOf(address _owner) internal view returns (uint256 balance) {\\n        return SharesPerOwner.get(_owner);\\n    }\\n\\n    function _totalShares() internal view returns (uint256) {\\n        return Shares.get();\\n    }\\n\\n    function totalShares() external view returns (uint256) {\\n        return _totalShares();\\n    }\\n}\\n\",\"keccak256\":\"0xcd0ee9c0a9b2fcd36eec3c6c1eb0ae4c3d50914db89381e5a48c3baed18ba60b\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/TransferManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\n\\n/// @title Transfer Manager (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the inbound transfers cases or the explicit submissions\\nabstract contract TransferManagerV1 {\\n    event UserDeposit(address indexed user, address indexed referral, uint256 amount);\\n    event Donation(address donator, uint256 amount);\\n\\n    error EmptyDeposit();\\n    error EmptyDonation();\\n\\n    /// @notice Handler called whenever a user has sent funds to the contract\\n    /// @dev Must be overriden\\n    /// @param _depositor Address that made the deposit\\n    /// @param _amount Amount deposited\\n    function _onDeposit(address _depositor, uint256 _amount) internal virtual;\\n\\n    /// @notice Handler called whenever a donation is received by the contract\\n    /// @dev Must be overriden\\n    /// @param _amount Amount donated\\n    function _onDonation(uint256 _amount) internal virtual;\\n\\n    /// @notice Internal utility calling the deposit handler and emitting the deposit details and the referral address\\n    /// @param _referral Referral address, address(0) if none\\n    function _deposit(address _referral) internal {\\n        if (msg.value == 0) {\\n            revert EmptyDeposit();\\n        }\\n\\n        _onDeposit(msg.sender, msg.value);\\n\\n        emit UserDeposit(msg.sender, _referral, msg.value);\\n    }\\n\\n    /// @notice Explicit deposit method\\n    /// @param _referral Referral address, address(0) if none\\n    function deposit(address _referral) external payable {\\n        _deposit(_referral);\\n    }\\n\\n    /// @notice Allows anyone to add ethers to river without minting new shares\\n    /// @dev This method should be mainly used by the execution layer fee recipient to compound any collected fee\\n    function donate() external payable {\\n        if (msg.value == 0) {\\n            revert EmptyDonation();\\n        }\\n\\n        _onDonation(msg.value);\\n\\n        emit Donation(msg.sender, msg.value);\\n    }\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable {\\n        _deposit(address(0));\\n    }\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable {\\n        revert Errors.InvalidCall();\\n    }\\n}\\n\",\"keccak256\":\"0x9b9e3f076cb5409b52c178be5202c54b106164b83ca2c13826a1db389b5fb318\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IAllowlist.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IAllowlist {\\n    function isAllowed(address _user, uint256 _mask) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb23d1d9dd56e0add97a774c13274b4dd37992d3c5656170c1add72882dfdd035\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IDepositContract.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IDepositContract {\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawalCredentials,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa5b1f77965814e1cc883111cb2909bf58647c401d03ada85b95a65cf54f8b029\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n}\\n\",\"keccak256\":\"0x3fdc46f7b30b29d3b9d540ba1b06cfaede61a7c6ce31c8fe434a9af6f411a920\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/BytesLib.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary BytesLib {\\n    function pad64(bytes memory _b) internal pure returns (bytes memory) {\\n        assert(_b.length >= 32 && _b.length <= 64);\\n        if (64 == _b.length) return _b;\\n\\n        bytes memory zero32 = new bytes(32);\\n        assembly {\\n            mstore(add(zero32, 0x20), 0)\\n        }\\n\\n        if (32 == _b.length) return BytesLib.concat(_b, zero32);\\n        else return BytesLib.concat(_b, BytesLib.slice(zero32, 0, uint256(64) - _b.length));\\n    }\\n\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xb7520fc078933f9e1db774a3040baee1f915a70475d76e4731f6ef34d386e8f9\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    error Unauthorized(address caller);\\n    error InvalidCall();\\n    error InvalidArgument();\\n}\\n\",\"keccak256\":\"0xf3d3cec3d3d583aac19da0ace05f7ee067d47fd67e2a1f5f3195d7cbc5329325\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\n\\nlibrary LibOwnable {\\n    function _setAdmin(address newAdmin) internal {\\n        AdministratorAddress.set(newAdmin);\\n    }\\n\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n}\\n\",\"keccak256\":\"0xc189956546f854193e5fea6225b6eb0262ab192a97c4e32575eefe8205549794\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Uint256Lib.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Uint256Lib {\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 temp_value = _value;\\n        for (uint256 i = 0; i < 8; ++i) {\\n            result = (result << 8) | (temp_value & 0xFF);\\n            temp_value >>= 8;\\n        }\\n\\n        assert(0 == temp_value); // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256 max) {\\n        return (a > b ? b : a);\\n    }\\n}\\n\",\"keccak256\":\"0x0cba10266338d44e5778d43600eb69e2089c45124625f77ee935f06788af15f8\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52ccf1daa33de9c72831e0d7458928c37ca7b5f8d8f732114095edeb81339920\",\"license\":\"MIT\"},\"contracts/src/state/river/AllowlistAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\nimport \\\"../../interfaces/IAllowlist.sol\\\";\\n\\nlibrary AllowlistAddress {\\n    bytes32 internal constant ALLOWLIST_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowlistAddress\\\")) - 1);\\n\\n    function get() internal view returns (IAllowlist) {\\n        return IAllowlist(UnstructuredStorage.getStorageAddress(ALLOWLIST_ADDRESS_SLOT));\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ALLOWLIST_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x63b8de2458f5574d5fc730c6f811bfcedafcb772d7bcc3eb87b55837464700c9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ApprovalsPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary ApprovalsPerOwner {\\n    bytes32 internal constant APPROVALS_PER_OWNER_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.approvalsPerOwner\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => mapping(address => uint256)) value;\\n    }\\n\\n    function get(address owner, address operator) internal view returns (uint256) {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[owner][operator];\\n    }\\n\\n    function set(\\n        address owner,\\n        address operator,\\n        uint256 newValue\\n    ) internal {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[owner][operator] = newValue;\\n    }\\n}\\n\",\"keccak256\":\"0xcf3ab7ba843246663850deb26b5f6aeabc3b7133d0b0ab26d1578db9811034ef\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/BeaconValidatorBalanceSum.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary BeaconValidatorBalanceSum {\\n    bytes32 internal constant VALIDATOR_BALANCE_SUM_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.beaconValidatorBalanceSum\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VALIDATOR_BALANCE_SUM_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VALIDATOR_BALANCE_SUM_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x48995ea16b0e6fa95c74fe37fccb5b1240f697bad7e36bbce1547abedacfae4a\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/BeaconValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary BeaconValidatorCount {\\n    bytes32 internal constant BEACON_VALIDATOR_COUNT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.beaconValidatorCount\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(BEACON_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(BEACON_VALIDATOR_COUNT_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x866375c8488248156dd37fe77873e45c3dfa5b82f3d67952c564bb9771cbd177\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositContractAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../interfaces/IDepositContract.sol\\\";\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary DepositContractAddress {\\n    bytes32 internal constant DEPOSIT_CONTRACT_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositContractAddress\\\")) - 1);\\n\\n    function get() internal view returns (IDepositContract) {\\n        return IDepositContract(UnstructuredStorage.getStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT));\\n    }\\n\\n    function set(IDepositContract newValue) internal {\\n        return UnstructuredStorage.setStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT, address(newValue));\\n    }\\n}\\n\",\"keccak256\":\"0x29ea6fbcc963e658d38820b5cc110da4ae52345b74e7767bb47bdd5ad0a5f498\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositedValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary DepositedValidatorCount {\\n    bytes32 internal constant DEPOSITED_VALIDATOR_COUNT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositedValidatorCount\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x60cc15ed3078f7faf654c5ff5ddd8444fe7fb9cdded552cc754e474d79507a40\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/GlobalFee.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary GlobalFee {\\n    bytes32 internal constant GLOBAL_FEE_SLOT = bytes32(uint256(keccak256(\\\"river.state.globalFee\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(GLOBAL_FEE_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(GLOBAL_FEE_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xbe84f50b90b7e0afe2b85593493ca950ebaf60b5ce00206cf31e6dcdfa9dffe0\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/LastOracleRoundId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary LastOracleRoundId {\\n    bytes32 internal constant LAST_ORACLE_ROUND_ID_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.lastOracleRoundId\\\")) - 1);\\n\\n    function get() internal view returns (bytes32) {\\n        return UnstructuredStorage.getStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT);\\n    }\\n\\n    function set(bytes32 newValue) internal {\\n        UnstructuredStorage.setStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x9cd4be635b16daef58d101f2655ae3c8c3b6907f84a2d77ef47aa43089531548\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OperatorRewardsShare.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary OperatorRewardsShare {\\n    bytes32 internal constant OPERATOR_REWARDS_SHARE_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.operatorRewardsShare\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(OPERATOR_REWARDS_SHARE_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(OPERATOR_REWARDS_SHARE_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xe0d3789bdd6dd1963e3ec312e123a699af70aca4aae51c151e367e9d784a958d\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Operators.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Operators {\\n    bytes32 internal constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.operators\\\")) - 1);\\n\\n    bytes32 internal constant OPERATORS_MAPPING_SLOT = bytes32(uint256(keccak256(\\\"river.state.operatorsMapping\\\")) - 1);\\n\\n    struct Operator {\\n        bool active;\\n        string name;\\n        address operator;\\n        uint256 limit;\\n        uint256 funded;\\n        uint256 keys;\\n        uint256 stopped;\\n    }\\n\\n    struct CachedOperator {\\n        bool active;\\n        string name;\\n        address operator;\\n        uint256 limit;\\n        uint256 funded;\\n        uint256 keys;\\n        uint256 stopped;\\n        uint256 index;\\n    }\\n\\n    struct OperatorResolution {\\n        bool active;\\n        uint256 index;\\n    }\\n\\n    struct SlotOperator {\\n        Operator[] value;\\n    }\\n\\n    struct SlotOperatorMapping {\\n        mapping(string => OperatorResolution) value;\\n    }\\n\\n    error OperatorNotFound(string name);\\n    error OperatorNotFoundAtIndex(uint256 index);\\n\\n    function _getOperatorIndex(string memory name) internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n\\n        if (opm.value[name].active == false) {\\n            revert OperatorNotFound(name);\\n        }\\n\\n        return opm.value[name].index;\\n    }\\n\\n    function _getOperatorActive(string memory name) internal view returns (bool) {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n        return opm.value[name].active;\\n    }\\n\\n    function _setOperatorIndex(\\n        string memory name,\\n        bool active,\\n        uint256 index\\n    ) internal {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n        opm.value[name] = OperatorResolution({active: active, index: index});\\n    }\\n\\n    function exists(string memory name) internal view returns (bool) {\\n        return _getOperatorActive(name);\\n    }\\n\\n    function indexOf(string memory name) internal view returns (int256) {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n\\n        if (opm.value[name].active == false) {\\n            return -1;\\n        }\\n\\n        return int256(opm.value[name].index);\\n    }\\n\\n    function get(string memory name) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n        uint256 index = _getOperatorIndex(name);\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[index];\\n    }\\n\\n    function getByIndex(uint256 index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= index) {\\n            revert OperatorNotFoundAtIndex(index);\\n        }\\n\\n        return r.value[index];\\n    }\\n\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    function _hasFundableKeys(Operators.Operator memory operator) internal pure returns (bool) {\\n        return (operator.active &&\\n            operator.keys > operator.funded - operator.stopped &&\\n            operator.limit > operator.funded - operator.stopped);\\n    }\\n\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (r.value[idx].active == true) {\\n                ++activeCount;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (r.value[idx].active == true) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                ++activeIdx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    function getAllFundable() internal view returns (CachedOperator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (_hasFundableKeys(r.value[idx])) {\\n                ++activeCount;\\n            }\\n        }\\n\\n        CachedOperator[] memory activeOperators = new CachedOperator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            Operator memory op = r.value[idx];\\n            if (_hasFundableKeys(op)) {\\n                activeOperators[activeIdx] = CachedOperator({\\n                    active: op.active,\\n                    name: op.name,\\n                    operator: op.operator,\\n                    limit: op.limit,\\n                    funded: op.funded,\\n                    keys: op.keys,\\n                    stopped: op.stopped,\\n                    index: idx\\n                });\\n                ++activeIdx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    function set(string memory name, Operator memory newValue) internal returns (uint256) {\\n        bool opExists = _getOperatorActive(name);\\n\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (opExists == false) {\\n            r.value.push(newValue);\\n            _setOperatorIndex(name, newValue.active, r.value.length - 1);\\n            return (r.value.length - 1);\\n        } else {\\n            uint256 index = _getOperatorIndex(name);\\n            r.value[index] = newValue;\\n            if (opExists != newValue.active) {\\n                _setOperatorIndex(name, newValue.active, index);\\n            }\\n            return (index);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x632b70b074efe266ec39f6d63c47152a95d8c2fbc021b977ef89438e32c77df8\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OracleAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary OracleAddress {\\n    bytes32 internal constant ORACLE_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.oracleAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ORACLE_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ORACLE_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x36b8eeb0577c07eae78d4126b3a8a910ea2c0487cdf706355ffacf7ac896e7bc\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Shares.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Shares {\\n    bytes32 internal constant SHARES_SLOT = bytes32(uint256(keccak256(\\\"river.state.shares\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(SHARES_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(SHARES_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xd928f7e6f42e62ef422e6584cef8dc8a2205b48571f484bf117b423591f82844\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/SharesPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary SharesPerOwner {\\n    bytes32 internal constant SHARES_SLOT = bytes32(uint256(keccak256(\\\"river.state.sharesPerOwner\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => uint256) value;\\n    }\\n\\n    function get(address owner) internal view returns (uint256) {\\n        bytes32 slot = SHARES_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[owner];\\n    }\\n\\n    function set(address owner, uint256 newValue) internal {\\n        bytes32 slot = SHARES_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[owner] = newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x7644bec5bc614b545e3b5e8108957528f8030e75f33a05a2aa0b9bc2807eb595\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/TreasuryAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary TreasuryAddress {\\n    bytes32 internal constant TREASURY_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.treasuryAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(TREASURY_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(TREASURY_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xb87e14bc7494aa01eb3c0163d5b022c58d884fb9c5f00b6072860170af7154d7\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ValidatorKeys.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/BytesLib.sol\\\";\\n\\nlibrary ValidatorKeys {\\n    uint256 internal constant PUBLIC_KEY_LENGTH = 48;\\n    uint256 internal constant SIGNATURE_LENGTH = 96;\\n\\n    error InvalidPublicKey();\\n    error InvalidSignature();\\n\\n    bytes32 internal constant VALIDATOR_KEYS_SLOT = bytes32(uint256(keccak256(\\\"river.state.validatorKeys\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(uint256 => mapping(uint256 => bytes)) value;\\n    }\\n\\n    function get(uint256 operatorIndex, uint256 idx)\\n        internal\\n        view\\n        returns (bytes memory publicKey, bytes memory signature)\\n    {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        bytes storage entry = r.value[operatorIndex][idx];\\n\\n        publicKey = BytesLib.slice(entry, 0, PUBLIC_KEY_LENGTH);\\n        signature = BytesLib.slice(entry, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n    }\\n\\n    function getKeys(\\n        uint256 operatorIndex,\\n        uint256 startIdx,\\n        uint256 amount\\n    ) internal view returns (bytes[] memory publicKey, bytes[] memory signatures) {\\n        publicKey = new bytes[](amount);\\n        signatures = new bytes[](amount);\\n\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        for (uint256 idx = startIdx; idx < startIdx + amount; ++idx) {\\n            bytes memory rawCredentials = r.value[operatorIndex][idx];\\n            publicKey[idx - startIdx] = BytesLib.slice(rawCredentials, 0, PUBLIC_KEY_LENGTH);\\n            signatures[idx - startIdx] = BytesLib.slice(rawCredentials, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n        }\\n    }\\n\\n    function set(\\n        uint256 operatorIndex,\\n        uint256 idx,\\n        bytes memory publicKey,\\n        bytes memory signature\\n    ) internal {\\n        bytes memory concatenatedKeys = BytesLib.concat(publicKey, signature);\\n\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[operatorIndex][idx] = concatenatedKeys;\\n    }\\n}\\n\",\"keccak256\":\"0xacbfa6dcb1856c58becf160550188fe10a975b9144b264b7aa0dd7e33aa3f84b\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/WithdrawalCredentials.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary WithdrawalCredentials {\\n    bytes32 internal constant WITHDRAWAL_CREDENTIALS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.withdrawalCredentials\\\")) - 1);\\n\\n    function get() internal view returns (bytes32) {\\n        return UnstructuredStorage.getStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT);\\n    }\\n\\n    function set(bytes32 newValue) internal {\\n        UnstructuredStorage.setStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x6baf6d6ae9e96c5405384e4708673de5bd5ac45b519eda2253041fc83b0892fd\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary AdministratorAddress {\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x6c103a106ff958994c38f055a316144416df36aeb299ba660e7b8af063931b72\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Version {\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VERSION_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf90d1ecf583061aa70dc464ec1fde21da6e9309601bcbba38f47d26257a1c656\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061514d806100206000396000f3fe6080604052600436106102d55760003560e01c806363b4118f11610179578063a9059cbb116100d6578063dd62ed3e1161008a578063f340fa0111610064578063f340fa0114610824578063f5eb42dc14610837578063f87e529614610857576102e6565b8063dd62ed3e146107e5578063ec342ad014610805578063ed88c68e1461081c576102e6565b8063bf15af56116100bb578063bf15af5614610790578063cfa2d2b7146107a5578063d56580ff146107c5576102e6565b8063a9059cbb14610750578063b747e7dd14610770576102e6565b806380d4027e1161012d57806387f2adfb1161011257806387f2adfb146106e057806395d89b41146106f55780639e3947f31461073b576102e6565b806380d4027e146106ab578063833b1fce146106cb576102e6565b806370a082311161015e57806370a082311461064b578063714b55b21461066b5780637adbf9731461068b576102e6565b806363b4118f146105fc5780636988c7281461062b576102e6565b8063291206f6116102325780633eb8b77a116101e657806356396715116101c057806356396715146105a75780635a16f135146105bc5780635f41a0c4146105dc576102e6565b80633eb8b77a1461053557806350545d2f14610572578063540bc5ea14610592576102e6565b806336bf33251161021757806336bf3325146104e35780633a98ef39146105005780633af9e66914610515576102e6565b8063291206f6146104a7578063313ce567146104c7576102e6565b806318160ddd116102895780631a4a7c611161026e5780631a4a7c611461045d57806323b872dd14610472578063252d6a3414610492576102e6565b806318160ddd1461041a5780631864636c1461043d576102e6565b8063095ea7b3116102ba578063095ea7b31461039d57806313d86aed146103cd57806316967407146103ed576102e6565b806305f63c8a1461031857806306fdde031461034e576102e6565b366102e6576102e46000610877565b005b6040517fae962d4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561032457600080fd5b506103386103333660046149fa565b6108fb565b6040516103459190614a6b565b60405180910390f35b34801561035a57600080fd5b5060408051808201909152600581527f526976657200000000000000000000000000000000000000000000000000000060208201525b6040516103459190614adb565b3480156103a957600080fd5b506103bd6103b8366004614b0a565b610a3f565b6040519015158152602001610345565b3480156103d957600080fd5b506102e46103e83660046149fa565b610acf565b3480156103f957600080fd5b50610402610ca7565b6040516001600160a01b039091168152602001610345565b34801561042657600080fd5b5061042f610cb6565b604051908152602001610345565b34801561044957600080fd5b506102e4610458366004614b34565b610cc0565b34801561046957600080fd5b5061042f6110f2565b34801561047e57600080fd5b506103bd61048d366004614bb3565b6110fc565b34801561049e57600080fd5b5061042f61121e565b3480156104b357600080fd5b506102e46104c23660046149fa565b611228565b3480156104d357600080fd5b5060405160128152602001610345565b3480156104ef57600080fd5b5061042f6801bc16d674ec80000081565b34801561050c57600080fd5b5061042f611293565b34801561052157600080fd5b5061042f610530366004614bef565b61129d565b34801561054157600080fd5b50610555610550366004614c53565b6112b6565b604080519283526001600160a01b03909116602083015201610345565b34801561057e57600080fd5b506102e461058d366004614c95565b611352565b34801561059e57600080fd5b5061042f606081565b3480156105b357600080fd5b5061042f611516565b3480156105c857600080fd5b506102e46105d7366004614cf7565b611520565b3480156105e857600080fd5b506102e46105f7366004614d27565b6115b2565b34801561060857600080fd5b5061061c610617366004614d27565b611658565b60405161034593929190614d49565b34801561063757600080fd5b506102e4610646366004614d81565b611684565b34801561065757600080fd5b5061042f610666366004614bef565b611736565b34801561067757600080fd5b506102e4610686366004614d27565b611741565b34801561069757600080fd5b506102e46106a6366004614bef565b6117c3565b3480156106b757600080fd5b506102e46106c6366004614e03565b611807565b3480156106d757600080fd5b50610402611951565b3480156106ec57600080fd5b5061042f61195b565b34801561070157600080fd5b5060408051808201909152600581527f6c734554480000000000000000000000000000000000000000000000000000006020820152610390565b34801561074757600080fd5b5061042f611965565b34801561075c57600080fd5b506103bd61076b366004614b0a565b61196f565b34801561077c57600080fd5b506102e461078b366004614e2f565b611a03565b34801561079c57600080fd5b5061042f603081565b3480156107b157600080fd5b506103386107c0366004614c53565b611de3565b3480156107d157600080fd5b506102e46107e03660046149fa565b611f5e565b3480156107f157600080fd5b5061042f610800366004614eb2565b611fc6565b34801561081157600080fd5b5061042f620186a081565b6102e4611fd9565b6102e4610832366004614bef565b612053565b34801561084357600080fd5b5061042f610852366004614bef565b61205c565b34801561086357600080fd5b506102e4610872366004614ee5565b612067565b346108ae576040517f95b66fe900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108b833346121ce565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b6109466040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b61094f8261227f565b6040805160e08101909152815460ff161515815260018201805491929160208401919061097b90614f08565b80601f01602080910402602001604051908101604052809291908181526020018280546109a790614f08565b80156109f45780601f106109c9576101008083540402835291602001916109f4565b820191906000526020600020905b8154815290600101906020018083116109d757829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a09091015292915050565b600033610a4b8161231b565b610a785760405163472511eb60e11b81526001600160a01b03821660048201526024015b60405180910390fd5b610a83338585612398565b6040518381526001600160a01b0385169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259060200160405180910390a3600191505b5092915050565b6000610aed610ae76801bc16d674ec80000047614f53565b836123ef565b905080610b26576040517f81b5ad6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610b3283612404565b8151919350915080610b70576040517f800526b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83811115610baa576040517f5993bd5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8151818114610be5576040517f8b97390c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610bef612419565b905080610c28576040517f9be7315900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83811015610c8257610c70868281518110610c4857610c48614f75565b6020026020010151868381518110610c6257610c62614f75565b60200260200101518461244d565b610c7b600182614f8b565b9050610c2b565b50610c9e83610c8f6128dd565b610c999190614f8b565b61290d565b50505050505050565b6000610cb1612940565b905090565b6000610cb161294a565b82610cc9612940565b6001600160a01b0316336001600160a01b03161415610ed5576000610ced8561227f565b905082610d0d576040516379b348ff60e11b815260040160405180910390fd5b60005b83811015610e90576000858583818110610d2c57610d2c614f75565b9050602002013590508260040154811015610d5a5760405163213af80760e21b815260040160405180910390fd5b82600501548110610d7e576040516317df2d8d60e01b815260040160405180910390fd5b600082118015610dc857508585610d96600185614fa3565b818110610da557610da5614f75565b90506020020135868684818110610dbe57610dbe614f75565b9050602002013510155b15610de65760405163c9ee26af60e01b815260040160405180910390fd5b600060018460050154610df99190614fa3565b9050600080610e088a846129b6565b91509150610e188a858484612b3e565b610e5f8a8460005b6040519080825280601f01601f191660200182016040528015610e4a576020820181803683370190505b50604080516000815260208101909152612b3e565b6001866005016000828254610e749190614fa3565b925050819055505050505080610e8990614fd0565b9050610d10565b50847f3162702bacdcc8640bbae8973e0bfe03af8a527f10b58caaf3695f0b268d7e908260050154604051610ec791815260200190565b60405180910390a2506110ec565b6000610ee08261227f565b805490915060ff16610f08576040516301550a7360e41b815260048101839052602401610a6f565b60028101546001600160a01b03163314610f375760405163472511eb60e11b8152336004820152602401610a6f565b6000610f428661227f565b905083610f62576040516379b348ff60e11b815260040160405180910390fd5b60005b848110156110aa576000868683818110610f8157610f81614f75565b9050602002013590508260040154811015610faf5760405163213af80760e21b815260040160405180910390fd5b82600501548110610fd3576040516317df2d8d60e01b815260040160405180910390fd5b60008211801561101d57508686610feb600185614fa3565b818110610ffa57610ffa614f75565b9050602002013587878481811061101357611013614f75565b9050602002013510155b1561103b5760405163c9ee26af60e01b815260040160405180910390fd5b60006001846005015461104e9190614fa3565b905060008061105d8b846129b6565b9150915061106d8b858484612b3e565b6110798b846000610e20565b600186600501600082825461108e9190614fa3565b9250508190555050505050806110a390614fd0565b9050610f65565b50857f3162702bacdcc8640bbae8973e0bfe03af8a527f10b58caaf3695f0b268d7e9082600501546040516110e191815260200190565b60405180910390a250505b50505050565b6000610cb1612bad565b6000836111088161231b565b6111305760405163472511eb60e11b81526001600160a01b0382166004820152602401610a6f565b828061114f576040516336b216db60e21b815260040160405180910390fd5b85848061115b8361205c565b101561117a576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b03881633146112075760006111968933612be2565b9050868110156111f1576040517f7b936de30000000000000000000000000000000000000000000000000000000081526001600160a01b038a1660048201523360248201526044810182905260648101889052608401610a6f565b61120589336112008a85614fa3565b612398565b505b611212888888612c3a565b98975050505050505050565b6000610cb1612cc8565b611230612940565b6001600160a01b0316336001600160a01b0316146112635760405163472511eb60e11b8152336004820152602401610a6f565b620186a08111156112875760405163a9cb9e0d60e01b815260040160405180910390fd5b61129081612cf8565b50565b6000610cb1612d26565b60006112b06112ab83612d30565b612d7e565b92915050565b6000806112f884848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612db692505050565b915061133984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612e4692505050565b6002015491946001600160a01b03909216935090915050565b61135a612940565b6001600160a01b0316336001600160a01b03161461138d5760405163472511eb60e11b8152336004820152602401610a6f565b6113cc83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612eb292505050565b15156001141561140c5782826040517f832eebc5000000000000000000000000000000000000000000000000000000008152600401610a6f929190614feb565b60006040518060e0016040528060011515815260200185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b0385166020808401919091526040808401839052606084018390526080840183905260a09093018290528251601f8801829004820281018201909352868352929350916114cb91908790879081908401838280828437600092019190915250869250612ebd915050565b9050807f28febbb5486eda5a1e47ad578f9cb32c8a1983c86c80ab823ea5dc1fc04ede5e8360200151846040015160405161150792919061501a565b60405180910390a25050505050565b6000610cb1612419565b611528612940565b6001600160a01b0316336001600160a01b03161461155b5760405163472511eb60e11b8152336004820152602401610a6f565b60006115668361227f565b805460ff1916831515908117825560405190815290915083907fe3bc5e5d3b000a1f65d146c40a38d89b1743b5729f4c6fe65f2e4b2dc620f2f2906020015b60405180910390a2505050565b6115ba612940565b6001600160a01b0316336001600160a01b0316146115ed5760405163472511eb60e11b8152336004820152602401610a6f565b60006115f88361227f565b9050806004015482111561161f5760405163a9cb9e0d60e01b815260040160405180910390fd5b6006810182905560405182815283907f773694db4f98cd263e42d4f798bcf603781d4491e48e8cbe96c219c1f13b777d906020016115a5565b606080600061166785856129b6565b90935091506116758561227f565b60040154841090509250925092565b600061168e6130b8565b81146116d8578061169d6130b8565b6040517fe7e93b3800000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610a6f565b6116eb6116e6826001614f8b565b6130e8565b6116f486613116565b6116fd8461311f565b61170683612cf8565b61170f8261314d565b611719898961317b565b611722876117fe565b61172b8561318d565b505050505050505050565b60006112b08261205c565b611749612940565b6001600160a01b0316336001600160a01b03161461177c5760405163472511eb60e11b8152336004820152602401610a6f565b60006117878361227f565b6003810183905560405183815290915083907f3adbeb5fbb94c52b64d90b31188c68a740868dde2238e03a04d581cae22cedf0906020016115a5565b6117cb612940565b6001600160a01b0316336001600160a01b0316146117fe5760405163472511eb60e11b8152336004820152602401610a6f565b611290816131bb565b61180f6131e9565b6001600160a01b0316336001600160a01b0316146118425760405163472511eb60e11b8152336004820152602401610a6f565b61184a6128dd565b831115611895578261185a6128dd565b6040517f76179ac500000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610a6f565b600061189f612cc8565b905060006118ab613219565b6118b59086614fa3565b90506118c084613249565b6118c985613277565b6118d2836132a5565b83821015611909576119096118f0826801bc16d674ec800000615045565b6118fa8487614fa3565b6119049190614fa3565b6132d3565b60408051868152602081018690529081018490527f98e488f5118fc11ab540716c2afc4e440c0a892d27a4efef33db94b4f9da65899060600160405180910390a15050505050565b6000610cb16131e9565b6000610cb16128dd565b6000610cb1613219565b60003361197b8161231b565b6119a35760405163472511eb60e11b81526001600160a01b0382166004820152602401610a6f565b82806119c2576040516336b216db60e21b815260040160405180910390fd5b3384806119ce8361205c565b10156119ed576040516351940b3960e11b815260040160405180910390fd5b6119f8338888612c3a565b979650505050505050565b85611a0c612940565b6001600160a01b0316336001600160a01b03161415611bdb5785611a43576040516379b348ff60e11b815260040160405180910390fd5b611a4e603087615045565b8414611a6d5760405163287c2be760e21b815260040160405180910390fd5b611a78606087615045565b8214611a9757604051634be6321b60e01b815260040160405180910390fd5b6000611aa28861227f565b905060005b87811015611b81576000611aff88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611af8925060309150869050615045565b6030613386565b90506000611b5187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b4a925060609150879050615045565b6060613386565b9050611b6e8b848660050154611b679190614f8b565b8484612b3e565b505080611b7a90614fd0565b9050611aa7565b5086816005016000828254611b969190614f8b565b9091555050600581015460405190815288907f5974470818610308ee3a0d809bad2cd13d57a3e9a685d3ae337fdef1d2d1b6539060200160405180910390a250610c9e565b6000611be68261227f565b805490915060ff16611c0e576040516301550a7360e41b815260048101839052602401610a6f565b60028101546001600160a01b03163314611c3d5760405163472511eb60e11b8152336004820152602401610a6f565b86611c5b576040516379b348ff60e11b815260040160405180910390fd5b611c66603088615045565b8514611c855760405163287c2be760e21b815260040160405180910390fd5b611c90606088615045565b8314611caf57604051634be6321b60e01b815260040160405180910390fd5b6000611cba8961227f565b905060005b88811015611d84576000611d1089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611af8925060309150869050615045565b90506000611d5b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b4a925060609150879050615045565b9050611d718c848660050154611b679190614f8b565b505080611d7d90614fd0565b9050611cbf565b5087816005016000828254611d999190614f8b565b9091555050600581015460405190815289907f5974470818610308ee3a0d809bad2cd13d57a3e9a685d3ae337fdef1d2d1b6539060200160405180910390a2505050505050505050565b611e2e6040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b611e6d83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612e4692505050565b6040805160e08101909152815460ff1615158152600182018054919291602084019190611e9990614f08565b80601f0160208091040260200160405190810160405280929190818152602001828054611ec590614f08565b8015611f125780601f10611ee757610100808354040283529160200191611f12565b820191906000526020600020905b815481529060010190602001808311611ef557829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a0909101529392505050565b611f66612940565b6001600160a01b0316336001600160a01b031614611f995760405163472511eb60e11b8152336004820152602401610a6f565b620186a0811115611fbd5760405163a9cb9e0d60e01b815260040160405180910390fd5b6112908161314d565b6000611fd28383612be2565b9392505050565b34612010576040517f89d209d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612019346134ae565b604080513381523460208201527f5d8bc849764969eb1bcc6d0a2f55999d0167c1ccec240a4f39cf664ca9c4148e910160405180910390a1565b61129081610877565b60006112b082612d30565b81612070612940565b6001600160a01b0316336001600160a01b031614156120ff5760006120948461227f565b60028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915560405190815290915084907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e79060200160405180910390a250505050565b600061210a8261227f565b805490915060ff16612132576040516301550a7360e41b815260048101839052602401610a6f565b60028101546001600160a01b031633146121615760405163472511eb60e11b8152336004820152602401610a6f565b600061216c8561227f565b60028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03871690811790915560405190815290915085907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e790602001611507565b6121d66134b7565b604051630f8350ed60e41b81526001600160a01b03848116600483015260016024830152919091169063f8350ed090604401602060405180830381865afa158015612225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122499190615064565b6122715760405163472511eb60e11b81526001600160a01b0383166004820152602401610a6f565b61227b82826134e7565b5050565b6000806122ad60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614fa3565b8054909150819084106122ef576040517fd191a36c00000000000000000000000000000000000000000000000000000000815260048101859052602401610a6f565b80600001848154811061230457612304614f75565b906000526020600020906007020192505050919050565b60006123256134b7565b604051630f8350ed60e41b81526001600160a01b03848116600483015260026024830152919091169063f8350ed090604401602060405180830381865afa158015612374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b09190615064565b60006123c560017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847614fa3565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b60008183116123fe5782611fd2565b50919050565b60608061241083613549565b91509150915091565b6000610cb161244960017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42614fa3565b5490565b6030835114612488576040517f50cb553000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608251146124c3576040517f408ebd3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6801bc16d674ec80000060006124dd633b9aca0083614f53565b9050816124ee82633b9aca00615045565b146124fb576124fb615081565b6000600261250887613893565b6040516125159190615097565b602060405180830381855afa158015612532573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061255591906150b3565b905060006002806125698860006040613386565b6040516125769190615097565b602060405180830381855afa158015612593573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906125b691906150b3565b60026125d66125d18a60406125cc816060614fa3565b613386565b613893565b6040516125e39190615097565b602060405180830381855afa158015612600573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061262391906150b3565b60408051602081019390935282015260600160408051601f198184030181529082905261264f91615097565b602060405180830381855afa15801561266c573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061268f91906150b3565b9050600060028084886040516020016126b2929190918252602082015260400190565b60408051601f19818403018152908290526126cc91615097565b602060405180830381855afa1580156126e9573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061270c91906150b3565b60026127178761391c565b604080516020810192909252810186905260600160408051601f198184030181529082905261274591615097565b602060405180830381855afa158015612762573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061278591906150b3565b60408051602081019390935282015260600160408051601f19818403018152908290526127b191615097565b602060405180830381855afa1580156127ce573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906127f191906150b3565b905060006127ff8647614fa3565b9050612809613962565b6001600160a01b03166322895118878b8a60405160200161282c91815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b815260040161285c94939291906150cc565b6000604051808303818588803b15801561287557600080fd5b505af1158015612889573d6000803e3d6000fd5b505050505080471461172b5760405162461bcd60e51b815260206004820152601b60248201527f455850454354494e475f4445504f5349545f544f5f48415050454e00000000006044820152606401610a6f565b6000610cb161244960017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8614fa3565b61129061293b60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8614fa3565b829055565b6000610cb1613992565b600080612955613219565b905060006129616128dd565b9050808210156129ad576801bc16d674ec80000061297f8383614fa3565b6129899190615045565b47612992612cc8565b61299c9190614f8b565b6129a69190614f8b565b9250505090565b4761299c612cc8565b60608060006129e660017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614fa3565b600086815260208281526040808320888452909152902080549192508291612a9a908290612a1390614f08565b80601f0160208091040260200160405190810160405280929190818152602001828054612a3f90614f08565b8015612a8c5780601f10612a6157610100808354040283529160200191612a8c565b820191906000526020600020905b815481529060010190602001808311612a6f57829003601f168201915b505050505060006030613386565b9450612b32818054612aab90614f08565b80601f0160208091040260200160405190810160405280929190818152602001828054612ad790614f08565b8015612b245780601f10612af957610100808354040283529160200191612b24565b820191906000526020600020905b815481529060010190602001808311612b0757829003601f168201915b505050505060306060613386565b93505050509250929050565b6000612b4a83836139c2565b90506000612b7960017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614fa3565b600087815260208281526040808320898452825290912084519293508392612ba392860190614961565b5050505050505050565b600080612bdb60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614fa3565b5492915050565b600080612c1060017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847614fa3565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b6000612c598483612c4a87612d30565b612c549190614fa3565b613a3f565b612c718383612c6786612d30565b612c549190614f8b565b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612cb691815260200190565b60405180910390a35060019392505050565b6000610cb161244960017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e60900614fa3565b61129061293b60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37614fa3565b6000610cb1613a8b565b600080612d5e60017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838614fa3565b6001600160a01b0390931660009081526020939093525050604090205490565b600080612d89613a8b565b905080612d995750600092915050565b80612da261294a565b612dac9085615045565b611fd29190614f53565b600080612de460017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614fa3565b60405190915081908190612df9908690615097565b9081526040519081900360200190205460ff16612e1b57506000199392505050565b6040518190612e2b908690615097565b90815260200160405180910390206001015492505050919050565b600080612e7460017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614fa3565b90506000612e8184613abb565b82549091508290819083908110612e9a57612e9a614f75565b90600052602060002090600702019350505050919050565b60006112b082613b49565b600080612ec984613b49565b90506000612ef860017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614fa3565b90508082612fd45780546001808201835560008381526020908190208851600790940201805460ff1916931515939093178355878101518051899493612f4393908501920190614961565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c09091015160069091015584518154612fbc918891612fb790600190614fa3565b613ba7565b8054612fca90600190614fa3565b93505050506112b0565b6000612fdf87613abb565b905085826000018281548110612ff757612ff7614f75565b6000918252602091829020835160079290920201805460ff1916911515919091178155828201518051919261303492600185019290910190614961565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c09091015160069091015585511515841515146130ad576130ad87876000015183613ba7565b93506112b092505050565b6000610cb161244960017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd614fa3565b61129061293b60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd614fa3565b61129081613c2b565b61129061293b60017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa3614fa3565b61129061293b60017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a8614fa3565b61318482613c59565b61227b81613c87565b61129061293b60017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780614fa3565b61129061293b60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb614fa3565b6000610cb161244960017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb614fa3565b6000610cb161244960017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a37614fa3565b61129061293b60017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e60900614fa3565b61129061293b60017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a37614fa3565b61129061293b60017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb529614fa3565b60006132dd613cb5565b905060006132eb8284615045565b620186a06132f761294a565b6133019190615045565b61330b9190614fa3565b82613314612d26565b61331e9086615045565b6133289190615045565b6133329190614f53565b90506000620186a0613342613ce5565b61334c9084615045565b6133569190614f53565b9050600061336382613d15565b905061337f613370613e88565b61337a8386614fa3565b613eb8565b5050505050565b60608161339481601f614f8b565b10156133e25760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610a6f565b6133ec8284614f8b565b8451101561343c5760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610a6f565b60608215801561345b57604051915060008252602082016040526134a5565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561349457805183526020928301920161347c565b5050858452601f01601f1916604052505b50949350505050565b611290816132d3565b6000610cb161244960017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780614fa3565b60006134f161294a565b90506000826134fe61294a565b6135089190614fa3565b90508061351e576135198483613eb8565b6110ec565b600081613529612d26565b6135339086615045565b61353d9190614f53565b905061337f8582613eb8565b6060806000613556613f26565b90508051600014156135c457604080516000808252602082019092529061358d565b60608152602001906001900390816135785790505b5060408051600080825260208201909252906135b9565b60608152602001906001900390816135a45790505b509250925050915091565b600060015b8251811015613678578282815181106135e4576135e4614f75565b602002602001015160c0015183838151811061360257613602614f75565b6020026020010151608001516136189190614fa3565b83828151811061362a5761362a614f75565b602002602001015160c0015184838151811061364857613648614f75565b60200260200101516080015161365e9190614fa3565b1015613668578091505b61367181614fd0565b90506135c9565b50600082828151811061368d5761368d614f75565b6020026020010151608001516136dd8484815181106136ae576136ae614f75565b602002602001015160a001518585815181106136cc576136cc614f75565b6020026020010151606001516123ef565b6136e79190614fa3565b905080613752576040805160008082526020820190925290613719565b60608152602001906001900390816137045790505b506040805160008082526020820190925290613745565b60608152602001906001900390816137305790505b5094509450505050915091565b600061377a84848151811061376957613769614f75565b602002602001015160200151612e46565b90508682106137ef576137c884848151811061379857613798614f75565b602002602001015160e001518585815181106137b6576137b6614f75565b60200260200101516080015189614315565b8096508197505050868160040160008282546137e49190614f8b565b9091555061388a9050565b61383484848151811061380457613804614f75565b602002602001015160e0015185858151811061382257613822614f75565b60200260200101516080015184614315565b8096508197505050818160040160008282546138509190614f8b565b90915550600090508061386b613866858b614fa3565b613549565b91509150613879888361451e565b9750613885878261451e565b965050505b50505050915091565b606060208251101580156138a957506040825111155b6138b5576138b5615081565b8151604014156138c3575090565b604080516020808252818301909252600091602082018180368337019050509050600060208201528251602014156138ff57611fd283826139c2565b611fd283613917836000875160406125cc9190614fa3565b6139c2565b600081815b600881101561394a57600892831b60ff831617929190911c9061394381614fd0565b9050613921565b50801561395957613959615081565b5060c01b919050565b6000610cb161244960017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260614fa3565b6000610cb161244960017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113614fa3565b6060806040519050835180825260208201818101602087015b818310156139f35780518352602092830192016139db565b50855184518101855292509050808201602086015b81831015613a20578051835260209283019201613a08565b508651929092011591909101601f01601f191660405250905092915050565b6000613a6c60017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838614fa3565b6001600160a01b03909316600090815260209390935250604090912055565b6000610cb161244960017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b614fa3565b600080613ae960017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614fa3565b60405190915081908190613afe908690615097565b9081526040519081900360200190205460ff16612e1b57836040517f34eddfcf000000000000000000000000000000000000000000000000000000008152600401610a6f9190614adb565b600080613b7760017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614fa3565b60405190915081908190613b8c908690615097565b9081526040519081900360200190205460ff16949350505050565b6000613bd460017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614fa3565b604080518082018252851515815260208101859052905191925082918290613bfd908890615097565b908152604051602091819003820190208251815460ff19169015151781559101516001909101555050505050565b61129061293b60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113614fa3565b61129061293b60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260614fa3565b61129061293b60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42614fa3565b6000610cb161244960017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37614fa3565b6000610cb161244960017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a8614fa3565b600080613d20614631565b90506000815167ffffffffffffffff811115613d3e57613d3e614fba565b604051908082528060200260200182016040528015613d67578160200160208202803683370190505b5090506000805b8351811015613dfc576000848281518110613d8b57613d8b614f75565b602002602001015160c00151858381518110613da957613da9614f75565b602002602001015160800151613dbf9190614fa3565b9050613dcb8184614f8b565b925080848381518110613de057613de0614f75565b602090810291909101015250613df581614fd0565b9050613d6e565b508015613e7a576000613e0f8287614f53565b905060005b8351811015613e7357613e63858281518110613e3257613e32614f75565b60200260200101516040015183868481518110613e5157613e51614f75565b602002602001015161337a9190615045565b613e6c81614fd0565b9050613e14565b5050613e7f565b600094505b50929392505050565b6000610cb161244960017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa3614fa3565b613ed381613ec4613a8b565b613ece9190614f8b565b6148e5565b613ee18282612c6785612d30565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60606000613f5560017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614fa3565b9050806000805b825481101561409d5761407c836000018281548110613f7d57613f7d614f75565b60009182526020918290206040805160e08101909152600790920201805460ff16151582526001810180549293919291840191613fb990614f08565b80601f0160208091040260200160405190810160405280929190818152602001828054613fe590614f08565b80156140325780601f1061400757610100808354040283529160200191614032565b820191906000526020600020905b81548152906001019060200180831161401557829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a090910152614913565b1561408d5761408a82614fd0565b91505b61409681614fd0565b9050613f5c565b5060008167ffffffffffffffff8111156140b9576140b9614fba565b60405190808252806020026020018201604052801561413d57816020015b61412a6040518061010001604052806000151581526020016060815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816140d75790505b5090506000805b845481101561430a57600085600001828154811061416457614164614f75565b60009182526020918290206040805160e08101909152600790920201805460ff161515825260018101805492939192918401916141a090614f08565b80601f01602080910402602001604051908101604052809291908181526020018280546141cc90614f08565b80156142195780601f106141ee57610100808354040283529160200191614219565b820191906000526020600020905b8154815290600101906020018083116141fc57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a090910152905061426981614913565b156142f9576040518061010001604052808260000151151581526020018260200151815260200182604001516001600160a01b0316815260200182606001518152602001826080015181526020018260a0015181526020018260c001518152602001838152508484815181106142e1576142e1614f75565b6020026020010181905250826142f690614fd0565b92505b5061430381614fd0565b9050614144565b509095945050505050565b6060808267ffffffffffffffff81111561433157614331614fba565b60405190808252806020026020018201604052801561436457816020015b606081526020019060019003908161434f5790505b5091508267ffffffffffffffff81111561438057614380614fba565b6040519080825280602002602001820160405280156143b357816020015b606081526020019060019003908161439e5790505b50905060006143e360017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614fa3565b905080855b6143f28688614f8b565b811015614513576000888152602083815260408083208484529091528120805461441b90614f08565b80601f016020809104026020016040519081016040528092919081815260200182805461444790614f08565b80156144945780601f1061446957610100808354040283529160200191614494565b820191906000526020600020905b81548152906001019060200180831161447757829003601f168201915b505050505090506144a88160006030613386565b866144b38a85614fa3565b815181106144c3576144c3614f75565b60200260200101819052506144db8160306060613386565b856144e68a85614fa3565b815181106144f6576144f6614f75565b6020026020010181905250508061450c90614fd0565b90506143e8565b505050935093915050565b60608151835161452e9190614f8b565b67ffffffffffffffff81111561454657614546614fba565b60405190808252806020026020018201604052801561457957816020015b60608152602001906001900390816145645790505b50905060005b83518110156145d05783818151811061459a5761459a614f75565b60200260200101518282815181106145b4576145b4614f75565b6020026020010181905250806145c990614fd0565b905061457f565b5060005b8251811015610ac8578281815181106145ef576145ef614f75565b6020026020010151828551836146059190614f8b565b8151811061461557614615614f75565b60200260200101819052508061462a90614fd0565b90506145d4565b6060600061466060017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614fa3565b9050806000805b82548110156146bf5782600001818154811061468557614685614f75565b600091825260209091206007909102015460ff161515600114156146af576146ac82614fd0565b91505b6146b881614fd0565b9050614667565b5060008167ffffffffffffffff8111156146db576146db614fba565b60405190808252806020026020018201604052801561475757816020015b6147446040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816146f95790505b5090506000805b845481101561430a5784600001818154811061477c5761477c614f75565b600091825260209091206007909102015460ff161515600114156148d5578460000181815481106147af576147af614f75565b60009182526020918290206040805160e08101909152600790920201805460ff161515825260018101805492939192918401916147eb90614f08565b80601f016020809104026020016040519081016040528092919081815260200182805461481790614f08565b80156148645780601f1061483957610100808354040283529160200191614864565b820191906000526020600020905b81548152906001019060200180831161484757829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a09091015283518490849081106148bd576148bd614f75565b6020026020010181905250816148d290614fd0565b91505b6148de81614fd0565b905061475e565b61129061293b60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b614fa3565b8051600090801561493a57508160c0015182608001516149339190614fa3565b8260a00151115b80156112b057508160c0015182608001516149559190614fa3565b82606001511192915050565b82805461496d90614f08565b90600052602060002090601f01602090048101928261498f57600085556149d5565b82601f106149a857805160ff19168380011785556149d5565b828001600101855582156149d5579182015b828111156149d55782518255916020019190600101906149ba565b506149e19291506149e5565b5090565b5b808211156149e157600081556001016149e6565b600060208284031215614a0c57600080fd5b5035919050565b60005b83811015614a2e578181015183820152602001614a16565b838111156110ec5750506000910152565b60008151808452614a57816020860160208601614a13565b601f01601f19169290920160200192915050565b602081528151151560208201526000602083015160e06040840152614a94610100840182614a3f565b90506001600160a01b03604085015116606084015260608401516080840152608084015160a084015260a084015160c084015260c084015160e08401528091505092915050565b602081526000611fd26020830184614a3f565b80356001600160a01b0381168114614b0557600080fd5b919050565b60008060408385031215614b1d57600080fd5b614b2683614aee565b946020939093013593505050565b600080600060408486031215614b4957600080fd5b83359250602084013567ffffffffffffffff80821115614b6857600080fd5b818601915086601f830112614b7c57600080fd5b813581811115614b8b57600080fd5b8760208260051b8501011115614ba057600080fd5b6020830194508093505050509250925092565b600080600060608486031215614bc857600080fd5b614bd184614aee565b9250614bdf60208501614aee565b9150604084013590509250925092565b600060208284031215614c0157600080fd5b611fd282614aee565b60008083601f840112614c1c57600080fd5b50813567ffffffffffffffff811115614c3457600080fd5b602083019150836020828501011115614c4c57600080fd5b9250929050565b60008060208385031215614c6657600080fd5b823567ffffffffffffffff811115614c7d57600080fd5b614c8985828601614c0a565b90969095509350505050565b600080600060408486031215614caa57600080fd5b833567ffffffffffffffff811115614cc157600080fd5b614ccd86828701614c0a565b9094509250614ce0905060208501614aee565b90509250925092565b801515811461129057600080fd5b60008060408385031215614d0a57600080fd5b823591506020830135614d1c81614ce9565b809150509250929050565b60008060408385031215614d3a57600080fd5b50508035926020909101359150565b606081526000614d5c6060830186614a3f565b8281036020840152614d6e8186614a3f565b9150508215156040830152949350505050565b600080600080600080600080610100898b031215614d9e57600080fd5b614da789614aee565b975060208901359650614dbc60408a01614aee565b9550614dca60608a01614aee565b9450614dd860808a01614aee565b9350614de660a08a01614aee565b925060c0890135915060e089013590509295985092959890939650565b600080600060608486031215614e1857600080fd5b505081359360208301359350604090920135919050565b60008060008060008060808789031215614e4857600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115614e6e57600080fd5b614e7a8a838b01614c0a565b90965094506060890135915080821115614e9357600080fd5b50614ea089828a01614c0a565b979a9699509497509295939492505050565b60008060408385031215614ec557600080fd5b614ece83614aee565b9150614edc60208401614aee565b90509250929050565b60008060408385031215614ef857600080fd5b82359150614edc60208401614aee565b600181811c90821680614f1c57607f821691505b602082108114156123fe57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082614f7057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60008219821115614f9e57614f9e614f3d565b500190565b600082821015614fb557614fb5614f3d565b500390565b634e487b7160e01b600052604160045260246000fd5b6000600019821415614fe457614fe4614f3d565b5060010190565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60408152600061502d6040830185614a3f565b90506001600160a01b03831660208301529392505050565b600081600019048311821515161561505f5761505f614f3d565b500290565b60006020828403121561507657600080fd5b8151611fd281614ce9565b634e487b7160e01b600052600160045260246000fd5b600082516150a9818460208701614a13565b9190910192915050565b6000602082840312156150c557600080fd5b5051919050565b6080815260006150df6080830187614a3f565b82810360208401526150f18187614a3f565b905082810360408401526151058186614a3f565b9150508260608301529594505050505056fea2646970667358221220a74834bc1203e9c238fac21b39b62ba66dd9d4666903140a585283cd2984fe9f64736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106102d55760003560e01c806363b4118f11610179578063a9059cbb116100d6578063dd62ed3e1161008a578063f340fa0111610064578063f340fa0114610824578063f5eb42dc14610837578063f87e529614610857576102e6565b8063dd62ed3e146107e5578063ec342ad014610805578063ed88c68e1461081c576102e6565b8063bf15af56116100bb578063bf15af5614610790578063cfa2d2b7146107a5578063d56580ff146107c5576102e6565b8063a9059cbb14610750578063b747e7dd14610770576102e6565b806380d4027e1161012d57806387f2adfb1161011257806387f2adfb146106e057806395d89b41146106f55780639e3947f31461073b576102e6565b806380d4027e146106ab578063833b1fce146106cb576102e6565b806370a082311161015e57806370a082311461064b578063714b55b21461066b5780637adbf9731461068b576102e6565b806363b4118f146105fc5780636988c7281461062b576102e6565b8063291206f6116102325780633eb8b77a116101e657806356396715116101c057806356396715146105a75780635a16f135146105bc5780635f41a0c4146105dc576102e6565b80633eb8b77a1461053557806350545d2f14610572578063540bc5ea14610592576102e6565b806336bf33251161021757806336bf3325146104e35780633a98ef39146105005780633af9e66914610515576102e6565b8063291206f6146104a7578063313ce567146104c7576102e6565b806318160ddd116102895780631a4a7c611161026e5780631a4a7c611461045d57806323b872dd14610472578063252d6a3414610492576102e6565b806318160ddd1461041a5780631864636c1461043d576102e6565b8063095ea7b3116102ba578063095ea7b31461039d57806313d86aed146103cd57806316967407146103ed576102e6565b806305f63c8a1461031857806306fdde031461034e576102e6565b366102e6576102e46000610877565b005b6040517fae962d4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561032457600080fd5b506103386103333660046149fa565b6108fb565b6040516103459190614a6b565b60405180910390f35b34801561035a57600080fd5b5060408051808201909152600581527f526976657200000000000000000000000000000000000000000000000000000060208201525b6040516103459190614adb565b3480156103a957600080fd5b506103bd6103b8366004614b0a565b610a3f565b6040519015158152602001610345565b3480156103d957600080fd5b506102e46103e83660046149fa565b610acf565b3480156103f957600080fd5b50610402610ca7565b6040516001600160a01b039091168152602001610345565b34801561042657600080fd5b5061042f610cb6565b604051908152602001610345565b34801561044957600080fd5b506102e4610458366004614b34565b610cc0565b34801561046957600080fd5b5061042f6110f2565b34801561047e57600080fd5b506103bd61048d366004614bb3565b6110fc565b34801561049e57600080fd5b5061042f61121e565b3480156104b357600080fd5b506102e46104c23660046149fa565b611228565b3480156104d357600080fd5b5060405160128152602001610345565b3480156104ef57600080fd5b5061042f6801bc16d674ec80000081565b34801561050c57600080fd5b5061042f611293565b34801561052157600080fd5b5061042f610530366004614bef565b61129d565b34801561054157600080fd5b50610555610550366004614c53565b6112b6565b604080519283526001600160a01b03909116602083015201610345565b34801561057e57600080fd5b506102e461058d366004614c95565b611352565b34801561059e57600080fd5b5061042f606081565b3480156105b357600080fd5b5061042f611516565b3480156105c857600080fd5b506102e46105d7366004614cf7565b611520565b3480156105e857600080fd5b506102e46105f7366004614d27565b6115b2565b34801561060857600080fd5b5061061c610617366004614d27565b611658565b60405161034593929190614d49565b34801561063757600080fd5b506102e4610646366004614d81565b611684565b34801561065757600080fd5b5061042f610666366004614bef565b611736565b34801561067757600080fd5b506102e4610686366004614d27565b611741565b34801561069757600080fd5b506102e46106a6366004614bef565b6117c3565b3480156106b757600080fd5b506102e46106c6366004614e03565b611807565b3480156106d757600080fd5b50610402611951565b3480156106ec57600080fd5b5061042f61195b565b34801561070157600080fd5b5060408051808201909152600581527f6c734554480000000000000000000000000000000000000000000000000000006020820152610390565b34801561074757600080fd5b5061042f611965565b34801561075c57600080fd5b506103bd61076b366004614b0a565b61196f565b34801561077c57600080fd5b506102e461078b366004614e2f565b611a03565b34801561079c57600080fd5b5061042f603081565b3480156107b157600080fd5b506103386107c0366004614c53565b611de3565b3480156107d157600080fd5b506102e46107e03660046149fa565b611f5e565b3480156107f157600080fd5b5061042f610800366004614eb2565b611fc6565b34801561081157600080fd5b5061042f620186a081565b6102e4611fd9565b6102e4610832366004614bef565b612053565b34801561084357600080fd5b5061042f610852366004614bef565b61205c565b34801561086357600080fd5b506102e4610872366004614ee5565b612067565b346108ae576040517f95b66fe900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108b833346121ce565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b6109466040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b61094f8261227f565b6040805160e08101909152815460ff161515815260018201805491929160208401919061097b90614f08565b80601f01602080910402602001604051908101604052809291908181526020018280546109a790614f08565b80156109f45780601f106109c9576101008083540402835291602001916109f4565b820191906000526020600020905b8154815290600101906020018083116109d757829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a09091015292915050565b600033610a4b8161231b565b610a785760405163472511eb60e11b81526001600160a01b03821660048201526024015b60405180910390fd5b610a83338585612398565b6040518381526001600160a01b0385169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259060200160405180910390a3600191505b5092915050565b6000610aed610ae76801bc16d674ec80000047614f53565b836123ef565b905080610b26576040517f81b5ad6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610b3283612404565b8151919350915080610b70576040517f800526b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83811115610baa576040517f5993bd5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8151818114610be5576040517f8b97390c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610bef612419565b905080610c28576040517f9be7315900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83811015610c8257610c70868281518110610c4857610c48614f75565b6020026020010151868381518110610c6257610c62614f75565b60200260200101518461244d565b610c7b600182614f8b565b9050610c2b565b50610c9e83610c8f6128dd565b610c999190614f8b565b61290d565b50505050505050565b6000610cb1612940565b905090565b6000610cb161294a565b82610cc9612940565b6001600160a01b0316336001600160a01b03161415610ed5576000610ced8561227f565b905082610d0d576040516379b348ff60e11b815260040160405180910390fd5b60005b83811015610e90576000858583818110610d2c57610d2c614f75565b9050602002013590508260040154811015610d5a5760405163213af80760e21b815260040160405180910390fd5b82600501548110610d7e576040516317df2d8d60e01b815260040160405180910390fd5b600082118015610dc857508585610d96600185614fa3565b818110610da557610da5614f75565b90506020020135868684818110610dbe57610dbe614f75565b9050602002013510155b15610de65760405163c9ee26af60e01b815260040160405180910390fd5b600060018460050154610df99190614fa3565b9050600080610e088a846129b6565b91509150610e188a858484612b3e565b610e5f8a8460005b6040519080825280601f01601f191660200182016040528015610e4a576020820181803683370190505b50604080516000815260208101909152612b3e565b6001866005016000828254610e749190614fa3565b925050819055505050505080610e8990614fd0565b9050610d10565b50847f3162702bacdcc8640bbae8973e0bfe03af8a527f10b58caaf3695f0b268d7e908260050154604051610ec791815260200190565b60405180910390a2506110ec565b6000610ee08261227f565b805490915060ff16610f08576040516301550a7360e41b815260048101839052602401610a6f565b60028101546001600160a01b03163314610f375760405163472511eb60e11b8152336004820152602401610a6f565b6000610f428661227f565b905083610f62576040516379b348ff60e11b815260040160405180910390fd5b60005b848110156110aa576000868683818110610f8157610f81614f75565b9050602002013590508260040154811015610faf5760405163213af80760e21b815260040160405180910390fd5b82600501548110610fd3576040516317df2d8d60e01b815260040160405180910390fd5b60008211801561101d57508686610feb600185614fa3565b818110610ffa57610ffa614f75565b9050602002013587878481811061101357611013614f75565b9050602002013510155b1561103b5760405163c9ee26af60e01b815260040160405180910390fd5b60006001846005015461104e9190614fa3565b905060008061105d8b846129b6565b9150915061106d8b858484612b3e565b6110798b846000610e20565b600186600501600082825461108e9190614fa3565b9250508190555050505050806110a390614fd0565b9050610f65565b50857f3162702bacdcc8640bbae8973e0bfe03af8a527f10b58caaf3695f0b268d7e9082600501546040516110e191815260200190565b60405180910390a250505b50505050565b6000610cb1612bad565b6000836111088161231b565b6111305760405163472511eb60e11b81526001600160a01b0382166004820152602401610a6f565b828061114f576040516336b216db60e21b815260040160405180910390fd5b85848061115b8361205c565b101561117a576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b03881633146112075760006111968933612be2565b9050868110156111f1576040517f7b936de30000000000000000000000000000000000000000000000000000000081526001600160a01b038a1660048201523360248201526044810182905260648101889052608401610a6f565b61120589336112008a85614fa3565b612398565b505b611212888888612c3a565b98975050505050505050565b6000610cb1612cc8565b611230612940565b6001600160a01b0316336001600160a01b0316146112635760405163472511eb60e11b8152336004820152602401610a6f565b620186a08111156112875760405163a9cb9e0d60e01b815260040160405180910390fd5b61129081612cf8565b50565b6000610cb1612d26565b60006112b06112ab83612d30565b612d7e565b92915050565b6000806112f884848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612db692505050565b915061133984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612e4692505050565b6002015491946001600160a01b03909216935090915050565b61135a612940565b6001600160a01b0316336001600160a01b03161461138d5760405163472511eb60e11b8152336004820152602401610a6f565b6113cc83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612eb292505050565b15156001141561140c5782826040517f832eebc5000000000000000000000000000000000000000000000000000000008152600401610a6f929190614feb565b60006040518060e0016040528060011515815260200185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b0385166020808401919091526040808401839052606084018390526080840183905260a09093018290528251601f8801829004820281018201909352868352929350916114cb91908790879081908401838280828437600092019190915250869250612ebd915050565b9050807f28febbb5486eda5a1e47ad578f9cb32c8a1983c86c80ab823ea5dc1fc04ede5e8360200151846040015160405161150792919061501a565b60405180910390a25050505050565b6000610cb1612419565b611528612940565b6001600160a01b0316336001600160a01b03161461155b5760405163472511eb60e11b8152336004820152602401610a6f565b60006115668361227f565b805460ff1916831515908117825560405190815290915083907fe3bc5e5d3b000a1f65d146c40a38d89b1743b5729f4c6fe65f2e4b2dc620f2f2906020015b60405180910390a2505050565b6115ba612940565b6001600160a01b0316336001600160a01b0316146115ed5760405163472511eb60e11b8152336004820152602401610a6f565b60006115f88361227f565b9050806004015482111561161f5760405163a9cb9e0d60e01b815260040160405180910390fd5b6006810182905560405182815283907f773694db4f98cd263e42d4f798bcf603781d4491e48e8cbe96c219c1f13b777d906020016115a5565b606080600061166785856129b6565b90935091506116758561227f565b60040154841090509250925092565b600061168e6130b8565b81146116d8578061169d6130b8565b6040517fe7e93b3800000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610a6f565b6116eb6116e6826001614f8b565b6130e8565b6116f486613116565b6116fd8461311f565b61170683612cf8565b61170f8261314d565b611719898961317b565b611722876117fe565b61172b8561318d565b505050505050505050565b60006112b08261205c565b611749612940565b6001600160a01b0316336001600160a01b03161461177c5760405163472511eb60e11b8152336004820152602401610a6f565b60006117878361227f565b6003810183905560405183815290915083907f3adbeb5fbb94c52b64d90b31188c68a740868dde2238e03a04d581cae22cedf0906020016115a5565b6117cb612940565b6001600160a01b0316336001600160a01b0316146117fe5760405163472511eb60e11b8152336004820152602401610a6f565b611290816131bb565b61180f6131e9565b6001600160a01b0316336001600160a01b0316146118425760405163472511eb60e11b8152336004820152602401610a6f565b61184a6128dd565b831115611895578261185a6128dd565b6040517f76179ac500000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610a6f565b600061189f612cc8565b905060006118ab613219565b6118b59086614fa3565b90506118c084613249565b6118c985613277565b6118d2836132a5565b83821015611909576119096118f0826801bc16d674ec800000615045565b6118fa8487614fa3565b6119049190614fa3565b6132d3565b60408051868152602081018690529081018490527f98e488f5118fc11ab540716c2afc4e440c0a892d27a4efef33db94b4f9da65899060600160405180910390a15050505050565b6000610cb16131e9565b6000610cb16128dd565b6000610cb1613219565b60003361197b8161231b565b6119a35760405163472511eb60e11b81526001600160a01b0382166004820152602401610a6f565b82806119c2576040516336b216db60e21b815260040160405180910390fd5b3384806119ce8361205c565b10156119ed576040516351940b3960e11b815260040160405180910390fd5b6119f8338888612c3a565b979650505050505050565b85611a0c612940565b6001600160a01b0316336001600160a01b03161415611bdb5785611a43576040516379b348ff60e11b815260040160405180910390fd5b611a4e603087615045565b8414611a6d5760405163287c2be760e21b815260040160405180910390fd5b611a78606087615045565b8214611a9757604051634be6321b60e01b815260040160405180910390fd5b6000611aa28861227f565b905060005b87811015611b81576000611aff88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611af8925060309150869050615045565b6030613386565b90506000611b5187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b4a925060609150879050615045565b6060613386565b9050611b6e8b848660050154611b679190614f8b565b8484612b3e565b505080611b7a90614fd0565b9050611aa7565b5086816005016000828254611b969190614f8b565b9091555050600581015460405190815288907f5974470818610308ee3a0d809bad2cd13d57a3e9a685d3ae337fdef1d2d1b6539060200160405180910390a250610c9e565b6000611be68261227f565b805490915060ff16611c0e576040516301550a7360e41b815260048101839052602401610a6f565b60028101546001600160a01b03163314611c3d5760405163472511eb60e11b8152336004820152602401610a6f565b86611c5b576040516379b348ff60e11b815260040160405180910390fd5b611c66603088615045565b8514611c855760405163287c2be760e21b815260040160405180910390fd5b611c90606088615045565b8314611caf57604051634be6321b60e01b815260040160405180910390fd5b6000611cba8961227f565b905060005b88811015611d84576000611d1089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611af8925060309150869050615045565b90506000611d5b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b4a925060609150879050615045565b9050611d718c848660050154611b679190614f8b565b505080611d7d90614fd0565b9050611cbf565b5087816005016000828254611d999190614f8b565b9091555050600581015460405190815289907f5974470818610308ee3a0d809bad2cd13d57a3e9a685d3ae337fdef1d2d1b6539060200160405180910390a2505050505050505050565b611e2e6040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b611e6d83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612e4692505050565b6040805160e08101909152815460ff1615158152600182018054919291602084019190611e9990614f08565b80601f0160208091040260200160405190810160405280929190818152602001828054611ec590614f08565b8015611f125780601f10611ee757610100808354040283529160200191611f12565b820191906000526020600020905b815481529060010190602001808311611ef557829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a0909101529392505050565b611f66612940565b6001600160a01b0316336001600160a01b031614611f995760405163472511eb60e11b8152336004820152602401610a6f565b620186a0811115611fbd5760405163a9cb9e0d60e01b815260040160405180910390fd5b6112908161314d565b6000611fd28383612be2565b9392505050565b34612010576040517f89d209d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612019346134ae565b604080513381523460208201527f5d8bc849764969eb1bcc6d0a2f55999d0167c1ccec240a4f39cf664ca9c4148e910160405180910390a1565b61129081610877565b60006112b082612d30565b81612070612940565b6001600160a01b0316336001600160a01b031614156120ff5760006120948461227f565b60028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915560405190815290915084907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e79060200160405180910390a250505050565b600061210a8261227f565b805490915060ff16612132576040516301550a7360e41b815260048101839052602401610a6f565b60028101546001600160a01b031633146121615760405163472511eb60e11b8152336004820152602401610a6f565b600061216c8561227f565b60028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03871690811790915560405190815290915085907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e790602001611507565b6121d66134b7565b604051630f8350ed60e41b81526001600160a01b03848116600483015260016024830152919091169063f8350ed090604401602060405180830381865afa158015612225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122499190615064565b6122715760405163472511eb60e11b81526001600160a01b0383166004820152602401610a6f565b61227b82826134e7565b5050565b6000806122ad60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614fa3565b8054909150819084106122ef576040517fd191a36c00000000000000000000000000000000000000000000000000000000815260048101859052602401610a6f565b80600001848154811061230457612304614f75565b906000526020600020906007020192505050919050565b60006123256134b7565b604051630f8350ed60e41b81526001600160a01b03848116600483015260026024830152919091169063f8350ed090604401602060405180830381865afa158015612374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b09190615064565b60006123c560017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847614fa3565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b60008183116123fe5782611fd2565b50919050565b60608061241083613549565b91509150915091565b6000610cb161244960017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42614fa3565b5490565b6030835114612488576040517f50cb553000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608251146124c3576040517f408ebd3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6801bc16d674ec80000060006124dd633b9aca0083614f53565b9050816124ee82633b9aca00615045565b146124fb576124fb615081565b6000600261250887613893565b6040516125159190615097565b602060405180830381855afa158015612532573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061255591906150b3565b905060006002806125698860006040613386565b6040516125769190615097565b602060405180830381855afa158015612593573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906125b691906150b3565b60026125d66125d18a60406125cc816060614fa3565b613386565b613893565b6040516125e39190615097565b602060405180830381855afa158015612600573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061262391906150b3565b60408051602081019390935282015260600160408051601f198184030181529082905261264f91615097565b602060405180830381855afa15801561266c573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061268f91906150b3565b9050600060028084886040516020016126b2929190918252602082015260400190565b60408051601f19818403018152908290526126cc91615097565b602060405180830381855afa1580156126e9573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061270c91906150b3565b60026127178761391c565b604080516020810192909252810186905260600160408051601f198184030181529082905261274591615097565b602060405180830381855afa158015612762573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061278591906150b3565b60408051602081019390935282015260600160408051601f19818403018152908290526127b191615097565b602060405180830381855afa1580156127ce573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906127f191906150b3565b905060006127ff8647614fa3565b9050612809613962565b6001600160a01b03166322895118878b8a60405160200161282c91815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b815260040161285c94939291906150cc565b6000604051808303818588803b15801561287557600080fd5b505af1158015612889573d6000803e3d6000fd5b505050505080471461172b5760405162461bcd60e51b815260206004820152601b60248201527f455850454354494e475f4445504f5349545f544f5f48415050454e00000000006044820152606401610a6f565b6000610cb161244960017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8614fa3565b61129061293b60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8614fa3565b829055565b6000610cb1613992565b600080612955613219565b905060006129616128dd565b9050808210156129ad576801bc16d674ec80000061297f8383614fa3565b6129899190615045565b47612992612cc8565b61299c9190614f8b565b6129a69190614f8b565b9250505090565b4761299c612cc8565b60608060006129e660017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614fa3565b600086815260208281526040808320888452909152902080549192508291612a9a908290612a1390614f08565b80601f0160208091040260200160405190810160405280929190818152602001828054612a3f90614f08565b8015612a8c5780601f10612a6157610100808354040283529160200191612a8c565b820191906000526020600020905b815481529060010190602001808311612a6f57829003601f168201915b505050505060006030613386565b9450612b32818054612aab90614f08565b80601f0160208091040260200160405190810160405280929190818152602001828054612ad790614f08565b8015612b245780601f10612af957610100808354040283529160200191612b24565b820191906000526020600020905b815481529060010190602001808311612b0757829003601f168201915b505050505060306060613386565b93505050509250929050565b6000612b4a83836139c2565b90506000612b7960017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614fa3565b600087815260208281526040808320898452825290912084519293508392612ba392860190614961565b5050505050505050565b600080612bdb60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614fa3565b5492915050565b600080612c1060017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847614fa3565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b6000612c598483612c4a87612d30565b612c549190614fa3565b613a3f565b612c718383612c6786612d30565b612c549190614f8b565b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612cb691815260200190565b60405180910390a35060019392505050565b6000610cb161244960017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e60900614fa3565b61129061293b60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37614fa3565b6000610cb1613a8b565b600080612d5e60017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838614fa3565b6001600160a01b0390931660009081526020939093525050604090205490565b600080612d89613a8b565b905080612d995750600092915050565b80612da261294a565b612dac9085615045565b611fd29190614f53565b600080612de460017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614fa3565b60405190915081908190612df9908690615097565b9081526040519081900360200190205460ff16612e1b57506000199392505050565b6040518190612e2b908690615097565b90815260200160405180910390206001015492505050919050565b600080612e7460017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614fa3565b90506000612e8184613abb565b82549091508290819083908110612e9a57612e9a614f75565b90600052602060002090600702019350505050919050565b60006112b082613b49565b600080612ec984613b49565b90506000612ef860017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614fa3565b90508082612fd45780546001808201835560008381526020908190208851600790940201805460ff1916931515939093178355878101518051899493612f4393908501920190614961565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c09091015160069091015584518154612fbc918891612fb790600190614fa3565b613ba7565b8054612fca90600190614fa3565b93505050506112b0565b6000612fdf87613abb565b905085826000018281548110612ff757612ff7614f75565b6000918252602091829020835160079290920201805460ff1916911515919091178155828201518051919261303492600185019290910190614961565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c09091015160069091015585511515841515146130ad576130ad87876000015183613ba7565b93506112b092505050565b6000610cb161244960017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd614fa3565b61129061293b60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd614fa3565b61129081613c2b565b61129061293b60017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa3614fa3565b61129061293b60017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a8614fa3565b61318482613c59565b61227b81613c87565b61129061293b60017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780614fa3565b61129061293b60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb614fa3565b6000610cb161244960017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb614fa3565b6000610cb161244960017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a37614fa3565b61129061293b60017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e60900614fa3565b61129061293b60017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a37614fa3565b61129061293b60017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb529614fa3565b60006132dd613cb5565b905060006132eb8284615045565b620186a06132f761294a565b6133019190615045565b61330b9190614fa3565b82613314612d26565b61331e9086615045565b6133289190615045565b6133329190614f53565b90506000620186a0613342613ce5565b61334c9084615045565b6133569190614f53565b9050600061336382613d15565b905061337f613370613e88565b61337a8386614fa3565b613eb8565b5050505050565b60608161339481601f614f8b565b10156133e25760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610a6f565b6133ec8284614f8b565b8451101561343c5760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610a6f565b60608215801561345b57604051915060008252602082016040526134a5565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561349457805183526020928301920161347c565b5050858452601f01601f1916604052505b50949350505050565b611290816132d3565b6000610cb161244960017f867d8f1a5e39d11d5bebde854d5359a509530ad32450f581da63c06ec8d1a780614fa3565b60006134f161294a565b90506000826134fe61294a565b6135089190614fa3565b90508061351e576135198483613eb8565b6110ec565b600081613529612d26565b6135339086615045565b61353d9190614f53565b905061337f8582613eb8565b6060806000613556613f26565b90508051600014156135c457604080516000808252602082019092529061358d565b60608152602001906001900390816135785790505b5060408051600080825260208201909252906135b9565b60608152602001906001900390816135a45790505b509250925050915091565b600060015b8251811015613678578282815181106135e4576135e4614f75565b602002602001015160c0015183838151811061360257613602614f75565b6020026020010151608001516136189190614fa3565b83828151811061362a5761362a614f75565b602002602001015160c0015184838151811061364857613648614f75565b60200260200101516080015161365e9190614fa3565b1015613668578091505b61367181614fd0565b90506135c9565b50600082828151811061368d5761368d614f75565b6020026020010151608001516136dd8484815181106136ae576136ae614f75565b602002602001015160a001518585815181106136cc576136cc614f75565b6020026020010151606001516123ef565b6136e79190614fa3565b905080613752576040805160008082526020820190925290613719565b60608152602001906001900390816137045790505b506040805160008082526020820190925290613745565b60608152602001906001900390816137305790505b5094509450505050915091565b600061377a84848151811061376957613769614f75565b602002602001015160200151612e46565b90508682106137ef576137c884848151811061379857613798614f75565b602002602001015160e001518585815181106137b6576137b6614f75565b60200260200101516080015189614315565b8096508197505050868160040160008282546137e49190614f8b565b9091555061388a9050565b61383484848151811061380457613804614f75565b602002602001015160e0015185858151811061382257613822614f75565b60200260200101516080015184614315565b8096508197505050818160040160008282546138509190614f8b565b90915550600090508061386b613866858b614fa3565b613549565b91509150613879888361451e565b9750613885878261451e565b965050505b50505050915091565b606060208251101580156138a957506040825111155b6138b5576138b5615081565b8151604014156138c3575090565b604080516020808252818301909252600091602082018180368337019050509050600060208201528251602014156138ff57611fd283826139c2565b611fd283613917836000875160406125cc9190614fa3565b6139c2565b600081815b600881101561394a57600892831b60ff831617929190911c9061394381614fd0565b9050613921565b50801561395957613959615081565b5060c01b919050565b6000610cb161244960017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260614fa3565b6000610cb161244960017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113614fa3565b6060806040519050835180825260208201818101602087015b818310156139f35780518352602092830192016139db565b50855184518101855292509050808201602086015b81831015613a20578051835260209283019201613a08565b508651929092011591909101601f01601f191660405250905092915050565b6000613a6c60017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838614fa3565b6001600160a01b03909316600090815260209390935250604090912055565b6000610cb161244960017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b614fa3565b600080613ae960017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614fa3565b60405190915081908190613afe908690615097565b9081526040519081900360200190205460ff16612e1b57836040517f34eddfcf000000000000000000000000000000000000000000000000000000008152600401610a6f9190614adb565b600080613b7760017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614fa3565b60405190915081908190613b8c908690615097565b9081526040519081900360200190205460ff16949350505050565b6000613bd460017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614fa3565b604080518082018252851515815260208101859052905191925082918290613bfd908890615097565b908152604051602091819003820190208251815460ff19169015151781559101516001909101555050505050565b61129061293b60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113614fa3565b61129061293b60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260614fa3565b61129061293b60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42614fa3565b6000610cb161244960017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37614fa3565b6000610cb161244960017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a8614fa3565b600080613d20614631565b90506000815167ffffffffffffffff811115613d3e57613d3e614fba565b604051908082528060200260200182016040528015613d67578160200160208202803683370190505b5090506000805b8351811015613dfc576000848281518110613d8b57613d8b614f75565b602002602001015160c00151858381518110613da957613da9614f75565b602002602001015160800151613dbf9190614fa3565b9050613dcb8184614f8b565b925080848381518110613de057613de0614f75565b602090810291909101015250613df581614fd0565b9050613d6e565b508015613e7a576000613e0f8287614f53565b905060005b8351811015613e7357613e63858281518110613e3257613e32614f75565b60200260200101516040015183868481518110613e5157613e51614f75565b602002602001015161337a9190615045565b613e6c81614fd0565b9050613e14565b5050613e7f565b600094505b50929392505050565b6000610cb161244960017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa3614fa3565b613ed381613ec4613a8b565b613ece9190614f8b565b6148e5565b613ee18282612c6785612d30565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60606000613f5560017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614fa3565b9050806000805b825481101561409d5761407c836000018281548110613f7d57613f7d614f75565b60009182526020918290206040805160e08101909152600790920201805460ff16151582526001810180549293919291840191613fb990614f08565b80601f0160208091040260200160405190810160405280929190818152602001828054613fe590614f08565b80156140325780601f1061400757610100808354040283529160200191614032565b820191906000526020600020905b81548152906001019060200180831161401557829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a090910152614913565b1561408d5761408a82614fd0565b91505b61409681614fd0565b9050613f5c565b5060008167ffffffffffffffff8111156140b9576140b9614fba565b60405190808252806020026020018201604052801561413d57816020015b61412a6040518061010001604052806000151581526020016060815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816140d75790505b5090506000805b845481101561430a57600085600001828154811061416457614164614f75565b60009182526020918290206040805160e08101909152600790920201805460ff161515825260018101805492939192918401916141a090614f08565b80601f01602080910402602001604051908101604052809291908181526020018280546141cc90614f08565b80156142195780601f106141ee57610100808354040283529160200191614219565b820191906000526020600020905b8154815290600101906020018083116141fc57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a090910152905061426981614913565b156142f9576040518061010001604052808260000151151581526020018260200151815260200182604001516001600160a01b0316815260200182606001518152602001826080015181526020018260a0015181526020018260c001518152602001838152508484815181106142e1576142e1614f75565b6020026020010181905250826142f690614fd0565b92505b5061430381614fd0565b9050614144565b509095945050505050565b6060808267ffffffffffffffff81111561433157614331614fba565b60405190808252806020026020018201604052801561436457816020015b606081526020019060019003908161434f5790505b5091508267ffffffffffffffff81111561438057614380614fba565b6040519080825280602002602001820160405280156143b357816020015b606081526020019060019003908161439e5790505b50905060006143e360017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614fa3565b905080855b6143f28688614f8b565b811015614513576000888152602083815260408083208484529091528120805461441b90614f08565b80601f016020809104026020016040519081016040528092919081815260200182805461444790614f08565b80156144945780601f1061446957610100808354040283529160200191614494565b820191906000526020600020905b81548152906001019060200180831161447757829003601f168201915b505050505090506144a88160006030613386565b866144b38a85614fa3565b815181106144c3576144c3614f75565b60200260200101819052506144db8160306060613386565b856144e68a85614fa3565b815181106144f6576144f6614f75565b6020026020010181905250508061450c90614fd0565b90506143e8565b505050935093915050565b60608151835161452e9190614f8b565b67ffffffffffffffff81111561454657614546614fba565b60405190808252806020026020018201604052801561457957816020015b60608152602001906001900390816145645790505b50905060005b83518110156145d05783818151811061459a5761459a614f75565b60200260200101518282815181106145b4576145b4614f75565b6020026020010181905250806145c990614fd0565b905061457f565b5060005b8251811015610ac8578281815181106145ef576145ef614f75565b6020026020010151828551836146059190614f8b565b8151811061461557614615614f75565b60200260200101819052508061462a90614fd0565b90506145d4565b6060600061466060017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614fa3565b9050806000805b82548110156146bf5782600001818154811061468557614685614f75565b600091825260209091206007909102015460ff161515600114156146af576146ac82614fd0565b91505b6146b881614fd0565b9050614667565b5060008167ffffffffffffffff8111156146db576146db614fba565b60405190808252806020026020018201604052801561475757816020015b6147446040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816146f95790505b5090506000805b845481101561430a5784600001818154811061477c5761477c614f75565b600091825260209091206007909102015460ff161515600114156148d5578460000181815481106147af576147af614f75565b60009182526020918290206040805160e08101909152600790920201805460ff161515825260018101805492939192918401916147eb90614f08565b80601f016020809104026020016040519081016040528092919081815260200182805461481790614f08565b80156148645780601f1061483957610100808354040283529160200191614864565b820191906000526020600020905b81548152906001019060200180831161484757829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a09091015283518490849081106148bd576148bd614f75565b6020026020010181905250816148d290614fd0565b91505b6148de81614fd0565b905061475e565b61129061293b60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b614fa3565b8051600090801561493a57508160c0015182608001516149339190614fa3565b8260a00151115b80156112b057508160c0015182608001516149559190614fa3565b82606001511192915050565b82805461496d90614f08565b90600052602060002090601f01602090048101928261498f57600085556149d5565b82601f106149a857805160ff19168380011785556149d5565b828001600101855582156149d5579182015b828111156149d55782518255916020019190600101906149ba565b506149e19291506149e5565b5090565b5b808211156149e157600081556001016149e6565b600060208284031215614a0c57600080fd5b5035919050565b60005b83811015614a2e578181015183820152602001614a16565b838111156110ec5750506000910152565b60008151808452614a57816020860160208601614a13565b601f01601f19169290920160200192915050565b602081528151151560208201526000602083015160e06040840152614a94610100840182614a3f565b90506001600160a01b03604085015116606084015260608401516080840152608084015160a084015260a084015160c084015260c084015160e08401528091505092915050565b602081526000611fd26020830184614a3f565b80356001600160a01b0381168114614b0557600080fd5b919050565b60008060408385031215614b1d57600080fd5b614b2683614aee565b946020939093013593505050565b600080600060408486031215614b4957600080fd5b83359250602084013567ffffffffffffffff80821115614b6857600080fd5b818601915086601f830112614b7c57600080fd5b813581811115614b8b57600080fd5b8760208260051b8501011115614ba057600080fd5b6020830194508093505050509250925092565b600080600060608486031215614bc857600080fd5b614bd184614aee565b9250614bdf60208501614aee565b9150604084013590509250925092565b600060208284031215614c0157600080fd5b611fd282614aee565b60008083601f840112614c1c57600080fd5b50813567ffffffffffffffff811115614c3457600080fd5b602083019150836020828501011115614c4c57600080fd5b9250929050565b60008060208385031215614c6657600080fd5b823567ffffffffffffffff811115614c7d57600080fd5b614c8985828601614c0a565b90969095509350505050565b600080600060408486031215614caa57600080fd5b833567ffffffffffffffff811115614cc157600080fd5b614ccd86828701614c0a565b9094509250614ce0905060208501614aee565b90509250925092565b801515811461129057600080fd5b60008060408385031215614d0a57600080fd5b823591506020830135614d1c81614ce9565b809150509250929050565b60008060408385031215614d3a57600080fd5b50508035926020909101359150565b606081526000614d5c6060830186614a3f565b8281036020840152614d6e8186614a3f565b9150508215156040830152949350505050565b600080600080600080600080610100898b031215614d9e57600080fd5b614da789614aee565b975060208901359650614dbc60408a01614aee565b9550614dca60608a01614aee565b9450614dd860808a01614aee565b9350614de660a08a01614aee565b925060c0890135915060e089013590509295985092959890939650565b600080600060608486031215614e1857600080fd5b505081359360208301359350604090920135919050565b60008060008060008060808789031215614e4857600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115614e6e57600080fd5b614e7a8a838b01614c0a565b90965094506060890135915080821115614e9357600080fd5b50614ea089828a01614c0a565b979a9699509497509295939492505050565b60008060408385031215614ec557600080fd5b614ece83614aee565b9150614edc60208401614aee565b90509250929050565b60008060408385031215614ef857600080fd5b82359150614edc60208401614aee565b600181811c90821680614f1c57607f821691505b602082108114156123fe57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082614f7057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60008219821115614f9e57614f9e614f3d565b500190565b600082821015614fb557614fb5614f3d565b500390565b634e487b7160e01b600052604160045260246000fd5b6000600019821415614fe457614fe4614f3d565b5060010190565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60408152600061502d6040830185614a3f565b90506001600160a01b03831660208301529392505050565b600081600019048311821515161561505f5761505f614f3d565b500290565b60006020828403121561507657600080fd5b8151611fd281614ce9565b634e487b7160e01b600052600160045260246000fd5b600082516150a9818460208701614a13565b9190910192915050565b6000602082840312156150c557600080fd5b5051919050565b6080815260006150df6080830187614a3f565b82810360208401526150f18187614a3f565b905082810360408401526151058186614a3f565b9150508260608301529594505050505056fea2646970667358221220a74834bc1203e9c238fac21b39b62ba66dd9d4666903140a585283cd2984fe9f64736f6c634300080a0033",
  "devdoc": {
    "author": "SkillZ",
    "kind": "dev",
    "methods": {
      "addOperator(string,address)": {
        "details": "Only callable by the administrator",
        "params": {
          "_name": "The name identifying the operator",
          "_operator": "The address representing the operator, receiving the rewards"
        }
      },
      "addValidators(uint256,uint256,bytes,bytes)": {
        "details": "Only callable by the administrator or the operator address",
        "params": {
          "_index": "The operator index",
          "_keyCount": "The amount of keys provided",
          "_publicKeys": "Public keys of the validator, concatenated",
          "_signatures": "Signatures of the validator keys, concatenated"
        }
      },
      "deposit(address)": {
        "params": {
          "_referral": "Referral address, address(0) if none"
        }
      },
      "depositToConsensusLayer(uint256)": {
        "params": {
          "_maxCount": "The maximum amount of validator keys to fund"
        }
      },
      "donate()": {
        "details": "This method should be mainly used by the execution layer fee recipient to compound any collected fee"
      },
      "getOperator(uint256)": {
        "params": {
          "_index": "The index of the operator"
        }
      },
      "getOperatorByName(string)": {
        "params": {
          "_name": "The name identifying the operator"
        }
      },
      "getValidator(uint256,uint256)": {
        "params": {
          "_operatorIndex": "The index of the operator",
          "_validatorIndex": "The index of the validator"
        }
      },
      "initRiverV1(address,bytes32,address,address,address,address,uint256,uint256)": {
        "params": {
          "_allowlistAddress": "Address of the allowlist contract",
          "_depositContractAddress": "Address to make Consensus Layer deposits",
          "_globalFee": "Amount retained when the eth balance increases, splitted between the treasury and the operators",
          "_operatorRewardsShare": "Share of the global fee used to reward node operators",
          "_systemAdministratorAddress": "Administrator address",
          "_treasuryAddress": "Address receiving the fee minus the operator share",
          "_withdrawalCredentials": "Credentials to use for every validator deposit"
        }
      },
      "removeValidators(uint256,uint256[])": {
        "details": "Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order, otherwise the method will revert",
        "params": {
          "_index": "The operator index",
          "_indexes": "The indexes of the keys to remove"
        }
      },
      "setBeaconData(uint256,uint256,bytes32)": {
        "details": "Can only be called by the oracle address",
        "params": {
          "_roundId": "An identifier for this update",
          "_validatorBalanceSum": "The validator balance sum of the active validators on the consensus layer",
          "_validatorCount": "The number of active validators on the consensus layer"
        }
      },
      "setGlobalFee(uint256)": {
        "params": {
          "newFee": "New fee value"
        }
      },
      "setOperatorAddress(uint256,address)": {
        "details": "Only callable by the administrator or the previous operator address",
        "params": {
          "_index": "The operator index",
          "_newOperatorAddress": "The new address representing the operator"
        }
      },
      "setOperatorLimit(uint256,uint256)": {
        "details": "Only callable by the administrator",
        "params": {
          "_index": "The operator index",
          "_newLimit": "The new staking limit of the operator"
        }
      },
      "setOperatorRewardsShare(uint256)": {
        "params": {
          "newOperatorRewardsShare": "New share value"
        }
      },
      "setOperatorStatus(uint256,bool)": {
        "details": "Only callable by the administrator",
        "params": {
          "_index": "The operator index",
          "_newStatus": "The new status of the operator"
        }
      },
      "setOperatorStoppedValidatorCount(uint256,uint256)": {
        "details": "Only callable by the administrator",
        "params": {
          "_index": "The operator index",
          "_newStoppedValidatorCount": "The new stopped validator count of the operator"
        }
      },
      "setOracle(address)": {
        "params": {
          "_oracleAddress": "Address of the oracle"
        }
      }
    },
    "title": "River (v1)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addOperator(string,address)": {
        "notice": "Adds an operator to the registry"
      },
      "addValidators(uint256,uint256,bytes,bytes)": {
        "notice": "Adds new keys for an operator"
      },
      "deposit(address)": {
        "notice": "Explicit deposit method"
      },
      "depositToConsensusLayer(uint256)": {
        "notice": "Deposits current balance to the Consensus Layer by batches of 32 ETH"
      },
      "donate()": {
        "notice": "Allows anyone to add ethers to river without minting new shares"
      },
      "getAdministrator()": {
        "notice": "Retrieve system administrator address"
      },
      "getBeaconValidatorBalanceSum()": {
        "notice": "Get Beacon validator balance sum"
      },
      "getBeaconValidatorCount()": {
        "notice": "Get Beacon validator count (the amount of validator reported by the oracles)"
      },
      "getDepositedValidatorCount()": {
        "notice": "Get the deposited validator count (the count of deposits made by the contract)"
      },
      "getOperator(uint256)": {
        "notice": "Get operator details"
      },
      "getOperatorByName(string)": {
        "notice": "Get operator details by name"
      },
      "getOperatorCount()": {
        "notice": "Get operator count"
      },
      "getOracle()": {
        "notice": "Get Oracle address"
      },
      "getValidator(uint256,uint256)": {
        "notice": "Get the details of a validator"
      },
      "getWithdrawalCredentials()": {
        "notice": "Retrieve the withdrawal credentials"
      },
      "initRiverV1(address,bytes32,address,address,address,address,uint256,uint256)": {
        "notice": "Initializes the River system"
      },
      "removeValidators(uint256,uint256[])": {
        "notice": "Remove validator keys"
      },
      "setBeaconData(uint256,uint256,bytes32)": {
        "notice": "Sets the validator count and validator balance sum reported by the oracle"
      },
      "setGlobalFee(uint256)": {
        "notice": "Changes the global fee parameter"
      },
      "setOperatorAddress(uint256,address)": {
        "notice": "Changes the operator address of an operator"
      },
      "setOperatorLimit(uint256,uint256)": {
        "notice": "Changes the operator staking limit"
      },
      "setOperatorRewardsShare(uint256)": {
        "notice": "Changes the operator rewards share."
      },
      "setOperatorStatus(uint256,bool)": {
        "notice": "Changes the operator status"
      },
      "setOperatorStoppedValidatorCount(uint256,uint256)": {
        "notice": "Changes the operator stopped validator cound"
      },
      "setOracle(address)": {
        "notice": "Set Oracle address"
      }
    },
    "notice": "This contract merges all the manager contracts and implements all the virtual methods stitching all components together",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}