{
  "address": "0x65D24827C10008C4F7aF7c244b755ddC98E5B4cA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "AllowanceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyDeposit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "InactiveOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentPublicKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentSignatures",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFundedKeyDeletionAttempt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidKeyCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPublicKeyCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPublicKeysLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUnsortedIndexes",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_providedValidatorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "InvalidValidatorCountReport",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWithdrawalCredentials",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoAvailableValidatorKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullTransfer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "OperatorAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "OperatorNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operatorAddress",
          "type": "address"
        }
      ],
      "name": "AddedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalKeyCount",
          "type": "uint256"
        }
      ],
      "name": "AddedValidatorKeys",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validatorCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validatorBalanceSum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "roundId",
          "type": "bytes32"
        }
      ],
      "name": "BeaconDataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "ChangedWhitelistStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "keyCount",
          "type": "uint256"
        }
      ],
      "name": "RemovedValidatorKeys",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOperatorAddress",
          "type": "address"
        }
      ],
      "name": "SetOperatorAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "SetOperatorLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "SetOperatorStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStoppedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "SetOperatorStoppedValidatorCount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserDeposit",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_KEY_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNATURE_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_keyCount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_publicKeys",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_signatures",
          "type": "bytes"
        }
      ],
      "name": "addValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxCount",
          "type": "uint256"
        }
      ],
      "name": "depositToConsensusLayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdministrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconValidatorBalanceSum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beaconValidatorBalanceSum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconValidatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beaconValidatorCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositedValidatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositedValidatorCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_operatorName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "funded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getOperator",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keys",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopped",
              "type": "uint256"
            }
          ],
          "internalType": "struct Operators.Operator",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getOperatorByName",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keys",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopped",
              "type": "uint256"
            }
          ],
          "internalType": "struct Operators.Operator",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositContractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_withdrawalCredentials",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_systemAdministratorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_whitelistorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_globalFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_operatorRewardsShare",
          "type": "uint256"
        }
      ],
      "name": "initRiverV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "removeValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_validatorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorBalanceSum",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_roundId",
          "type": "bytes32"
        }
      ],
      "name": "setBeaconData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "setGlobalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_newOperatorAddress",
          "type": "address"
        }
      ],
      "name": "setOperatorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_newLimit",
          "type": "uint256"
        }
      ],
      "name": "setOperatorLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newOperatorRewardsShare",
          "type": "uint256"
        }
      ],
      "name": "setOperatorRewardsShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_newStatus",
          "type": "bool"
        }
      ],
      "name": "setOperatorStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_newStoppedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "setOperatorStoppedValidatorCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "sharesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x02a740448d247699aacf99f7c41281252b7c163b35932030df0433ef2fc09e4c",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0x65D24827C10008C4F7aF7c244b755ddC98E5B4cA",
    "transactionIndex": 2,
    "gasUsed": "4497741",
    "logsBloom": "0x
    "blockHash": "0xb41fc2ae7903f41ef8ad97b056c0ae4c4fbcff3661118051a896fe42b1f7eae7",
    "transactionHash": "0x02a740448d247699aacf99f7c41281252b7c163b35932030df0433ef2fc09e4c",
    "logs": [],
    "blockNumber": 6415672,
    "cumulativeGasUsed": "5190586",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a446bf68a8fe0115f888f03de4afac85",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllowanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"InactiveOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentPublicKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFundedKeyDeletionAttempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeysLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUnsortedIndexes\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providedValidatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"InvalidValidatorCountReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawalCredentials\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAvailableValidatorKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"OperatorAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"OperatorNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"}],\"name\":\"AddedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalKeyCount\",\"type\":\"uint256\"}],\"name\":\"AddedValidatorKeys\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorBalanceSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"roundId\",\"type\":\"bytes32\"}],\"name\":\"BeaconDataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ChangedWhitelistStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyCount\",\"type\":\"uint256\"}],\"name\":\"RemovedValidatorKeys\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperatorAddress\",\"type\":\"address\"}],\"name\":\"SetOperatorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"SetOperatorLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetOperatorStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStoppedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"SetOperatorStoppedValidatorCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserDeposit\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_KEY_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNATURE_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_keyCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_publicKeys\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"addValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"}],\"name\":\"depositToConsensusLayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdministrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconValidatorBalanceSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beaconValidatorBalanceSum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beaconValidatorCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositedValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositedValidatorCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_operatorName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"funded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopped\",\"type\":\"uint256\"}],\"internalType\":\"struct Operators.Operator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getOperatorByName\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopped\",\"type\":\"uint256\"}],\"internalType\":\"struct Operators.Operator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_withdrawalCredentials\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_systemAdministratorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelistorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_globalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operatorRewardsShare\",\"type\":\"uint256\"}],\"name\":\"initRiverV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"removeValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorBalanceSum\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_roundId\",\"type\":\"bytes32\"}],\"name\":\"setBeaconData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setGlobalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_newOperatorAddress\",\"type\":\"address\"}],\"name\":\"setOperatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setOperatorLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newOperatorRewardsShare\",\"type\":\"uint256\"}],\"name\":\"setOperatorRewardsShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setOperatorStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_newStoppedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"setOperatorStoppedValidatorCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Iulian Rotaru\",\"kind\":\"dev\",\"methods\":{\"addOperator(string,address)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_name\":\"The name identifying the operator\",\"_operator\":\"The address representing the operator, receiving the rewards\"}},\"addValidators(string,uint256,bytes,bytes)\":{\"details\":\"Only callable by the administrator or the operator address\",\"params\":{\"_keyCount\":\"The amount of keys provided\",\"_name\":\"The name identifying the operator\",\"_publicKeys\":\"Public keys of the validator, concatenated\",\"_signatures\":\"Signatures of the validator keys, concatenated\"}},\"deposit(address)\":{\"params\":{\"_referral\":\"Referral address, address(0) if none\"}},\"depositToConsensusLayer(uint256)\":{\"params\":{\"_maxCount\":\"The maximum amount of validator keys to fund\"}},\"getKey(string,uint256)\":{\"params\":{\"_index\":\"The key index\",\"_operatorName\":\"The name identifying the operator\"}},\"getOperator(uint256)\":{\"params\":{\"_index\":\"The index of the operator\"}},\"getOperatorByName(string)\":{\"params\":{\"_name\":\"The name identifying the operator\"}},\"initRiverV1(address,bytes32,address,address,address,uint256,uint256)\":{\"params\":{\"_depositContractAddress\":\"Address to make Consensus Layer deposits\",\"_globalFee\":\"Amount retained when the eth balance increases, splitted between the treasury and the operators\",\"_operatorRewardsShare\":\"Share of the global fee used to reward node operators\",\"_systemAdministratorAddress\":\"Administrator address\",\"_treasuryAddress\":\"Address receiving the fee minus the operator share\",\"_whitelistorAddress\":\"Address able to manage the whitelist\",\"_withdrawalCredentials\":\"Credentials to use for every validator deposit\"}},\"removeValidators(string,uint256[])\":{\"details\":\"Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order, otherwise the method will revert\",\"params\":{\"_indexes\":\"The indexes of the keys to remove\",\"_name\":\"The name identifying the operator\"}},\"setBeaconData(uint256,uint256,bytes32)\":{\"details\":\"Can only be called by the oracle address\",\"params\":{\"_roundId\":\"An identifier for this update\",\"_validatorBalanceSum\":\"The validator balance sum of the active validators on the consensus layer\",\"_validatorCount\":\"The number of active validators on the consensus layer\"}},\"setGlobalFee(uint256)\":{\"params\":{\"newFee\":\"New fee value\"}},\"setOperatorAddress(string,address)\":{\"details\":\"Only callable by the administrator or the previous operator address\",\"params\":{\"_name\":\"The name identifying the operator\",\"_newOperatorAddress\":\"The new address representing the operator\"}},\"setOperatorLimit(string,uint256)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_name\":\"The name identifying the operator\",\"_newLimit\":\"The new staking limit of the operator\"}},\"setOperatorRewardsShare(uint256)\":{\"params\":{\"newOperatorRewardsShare\":\"New share value\"}},\"setOperatorStatus(string,bool)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_name\":\"The name identifying the operator\",\"_newStatus\":\"The new status of the operator\"}},\"setOperatorStoppedValidatorCount(string,uint256)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_name\":\"The name identifying the operator\",\"_newStoppedValidatorCount\":\"The new stopped validator count of the operator\"}},\"setOracle(address)\":{\"params\":{\"_oracleAddress\":\"Address of the oracle\"}},\"whitelist(address,bool)\":{\"params\":{\"_account\":\"Account status to edit\",\"_status\":\"Whitelist status\"}}},\"title\":\"River (v1)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOperator(string,address)\":{\"notice\":\"Adds an operator to the registry\"},\"addValidators(string,uint256,bytes,bytes)\":{\"notice\":\"Adds new keys for an operator\"},\"deposit(address)\":{\"notice\":\"Explicit deposit method\"},\"depositToConsensusLayer(uint256)\":{\"notice\":\"Deposits current balance to the Consensus Layer by batches of 32 ETH\"},\"getAdministrator()\":{\"notice\":\"Retrieve system administrator address\"},\"getBeaconValidatorBalanceSum()\":{\"notice\":\"Get Beacon validator balance sum\"},\"getBeaconValidatorCount()\":{\"notice\":\"Get Beacon validator count (the amount of validator reported by the oracles)\"},\"getDepositedValidatorCount()\":{\"notice\":\"Get the deposited validator count (the count of deposits made by the contract)\"},\"getKey(string,uint256)\":{\"notice\":\"Get the key of an operator at a specific index\"},\"getOperator(uint256)\":{\"notice\":\"Get operator details\"},\"getOperatorByName(string)\":{\"notice\":\"Get operator details by name\"},\"getOperatorCount()\":{\"notice\":\"Get operator count\"},\"getOracle()\":{\"notice\":\"Get Oracle address\"},\"initRiverV1(address,bytes32,address,address,address,uint256,uint256)\":{\"notice\":\"Initializes the River system\"},\"removeValidators(string,uint256[])\":{\"notice\":\"Remove validator keys\"},\"setBeaconData(uint256,uint256,bytes32)\":{\"notice\":\"Sets the validator count and validator balance sum reported by the oracle\"},\"setGlobalFee(uint256)\":{\"notice\":\"Changes the global fee parameter\"},\"setOperatorAddress(string,address)\":{\"notice\":\"Changes the operator address of an operator\"},\"setOperatorLimit(string,uint256)\":{\"notice\":\"Changes the operator staking limit\"},\"setOperatorRewardsShare(uint256)\":{\"notice\":\"Changes the operator rewards share.\"},\"setOperatorStatus(string,bool)\":{\"notice\":\"Changes the operator status\"},\"setOperatorStoppedValidatorCount(string,uint256)\":{\"notice\":\"Changes the operator stopped validator cound\"},\"setOracle(address)\":{\"notice\":\"Set Oracle address\"},\"whitelist(address,bool)\":{\"notice\":\"Sets the whitelisting status for an account\"}},\"notice\":\"This contract merges all the manager contracts and implements all the virtual methods stitching all components together\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/River.1.sol\":\"RiverV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\ncontract Initializable {\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    modifier init(uint256 version) {\\n        if (version != Version.get()) {\\n            revert InvalidInitialization(version, Version.get());\\n        }\\n        Version.set(version + 1); // prevents reentrency on the called method\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc93555f4bd660f91e565f20753e0d3a01e783e673bc0209d0d1e33c7b6941053\",\"license\":\"BUSL-1.1\"},\"contracts/src/River.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./components/DepositManager.1.sol\\\";\\nimport \\\"./components/TransferManager.1.sol\\\";\\nimport \\\"./components/SharesManager.1.sol\\\";\\nimport \\\"./components/OracleManager.1.sol\\\";\\nimport \\\"./components/OperatorsManager.1.sol\\\";\\nimport \\\"./components/WhitelistManager.1.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./libraries/LibOwnable.sol\\\";\\n\\nimport \\\"./state/shared/AdministratorAddress.sol\\\";\\nimport \\\"./state/river/TreasuryAddress.sol\\\";\\nimport \\\"./state/river/OperatorRewardsShare.sol\\\";\\nimport \\\"./state/river/GlobalFee.sol\\\";\\n\\n/// @title River (v1)\\n/// @author Iulian Rotaru\\n/// @notice This contract merges all the manager contracts and implements all the virtual methods stitching all components together\\ncontract RiverV1 is\\n    DepositManagerV1,\\n    TransferManagerV1,\\n    SharesManagerV1,\\n    OracleManagerV1,\\n    OperatorsManagerV1,\\n    WhitelistManagerV1,\\n    Initializable\\n{\\n    uint256 public constant BASE = 100000;\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() override(OperatorsManagerV1, OracleManagerV1) {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _whitelistorAddress Address able to manage the whitelist\\n    /// @param _treasuryAddress Address receiving the fee minus the operator share\\n    /// @param _globalFee Amount retained when the eth balance increases, splitted between the treasury and the operators\\n    /// @param _operatorRewardsShare Share of the global fee used to reward node operators\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _systemAdministratorAddress,\\n        address _whitelistorAddress,\\n        address _treasuryAddress,\\n        uint256 _globalFee,\\n        uint256 _operatorRewardsShare\\n    ) external init(0) {\\n        LibOwnable._setAdmin(_systemAdministratorAddress);\\n        TreasuryAddress.set(_treasuryAddress);\\n        GlobalFee.set(_globalFee);\\n        OperatorRewardsShare.set(_operatorRewardsShare);\\n\\n        DepositManagerV1.initDepositManagerV1(_depositContractAddress, _withdrawalCredentials);\\n        WhitelistManagerV1.initWhitelistManagerV1(_whitelistorAddress);\\n    }\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param newFee New fee value\\n    function setGlobalFee(uint256 newFee) external onlyAdmin {\\n        if (newFee > BASE) {\\n            revert Errors.InvalidArgument();\\n        }\\n\\n        GlobalFee.set(newFee);\\n    }\\n\\n    /// @notice Changes the operator rewards share.\\n    /// @param newOperatorRewardsShare New share value\\n    function setOperatorRewardsShare(uint256 newOperatorRewardsShare) external onlyAdmin {\\n        if (newOperatorRewardsShare > BASE) {\\n            revert Errors.InvalidArgument();\\n        }\\n\\n        OperatorRewardsShare.set(newOperatorRewardsShare);\\n    }\\n\\n    /// @notice Retrieve system administrator address\\n    function getAdministrator() external view returns (address) {\\n        return LibOwnable._getAdmin();\\n    }\\n\\n    /// @notice Handler called whenever a user deposits ETH to the system. Mints the adequate amount of shares.\\n    /// @param _depositor User address that made the deposit\\n    /// @param _amount Amount of ETH deposited\\n    function _onDeposit(address _depositor, uint256 _amount) internal override {\\n        if (WhitelistManagerV1._isWhitelisted(_depositor) == false) {\\n            revert Errors.Unauthorized(_depositor);\\n        }\\n        SharesManagerV1._mintShares(_depositor, _amount);\\n    }\\n\\n    /// @notice Handler called whenever a whitelist check is made for an address. Asks the Whitelist Manager component.\\n    /// @param _account Address to verify\\n    function _isAllowed(address _account) internal view override returns (bool) {\\n        return WhitelistManagerV1._isWhitelisted(_account);\\n    }\\n\\n    /// @notice Internal utility to concatenate bytes arrays together\\n    function _concatenateByteArrays(bytes[] memory arr1, bytes[] memory arr2)\\n        internal\\n        pure\\n        returns (bytes[] memory res)\\n    {\\n        res = new bytes[](arr1.length + arr2.length);\\n        for (uint256 idx = 0; idx < arr1.length; ++idx) {\\n            res[idx] = arr1[idx];\\n        }\\n        for (uint256 idx = 0; idx < arr2.length; ++idx) {\\n            res[idx + arr1.length] = arr2[idx];\\n        }\\n    }\\n\\n    /// @notice Handler called whenever a deposit to the consensus layer is made. Should retrieve _requestedAmount or lower keys\\n    /// @param _requestedAmount Amount of keys required. Contract is expected to send _requestedAmount or lower.\\n    function _getNextValidators(uint256 _requestedAmount)\\n        internal\\n        override\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        Operators.Operator[] memory operators = Operators.getAllFundable();\\n\\n        if (operators.length == 0) {\\n            return (new bytes[](0), new bytes[](0));\\n        }\\n\\n        uint256 selectedOperatorIndex = 0;\\n        for (uint256 idx = 1; idx < operators.length; ++idx) {\\n            if (operators[idx].funded < operators[selectedOperatorIndex].funded) {\\n                selectedOperatorIndex = idx;\\n            }\\n        }\\n\\n        uint256 availableOperatorKeys = Uint256Lib.min(\\n            operators[selectedOperatorIndex].keys,\\n            operators[selectedOperatorIndex].limit\\n        ) - operators[selectedOperatorIndex].funded;\\n\\n        Operators.Operator storage operator = Operators.get(operators[selectedOperatorIndex].name);\\n        if (availableOperatorKeys >= _requestedAmount) {\\n            (publicKeys, signatures) = ValidatorKeys.getKeys(\\n                operators[selectedOperatorIndex].name,\\n                operators[selectedOperatorIndex].funded,\\n                _requestedAmount\\n            );\\n            operator.funded += _requestedAmount;\\n        } else {\\n            (publicKeys, signatures) = ValidatorKeys.getKeys(\\n                operators[selectedOperatorIndex].name,\\n                operators[selectedOperatorIndex].funded,\\n                availableOperatorKeys\\n            );\\n            operator.funded += availableOperatorKeys;\\n            (bytes[] memory additionalPublicKeys, bytes[] memory additionalSignatures) = _getNextValidators(\\n                _requestedAmount - availableOperatorKeys\\n            );\\n            publicKeys = _concatenateByteArrays(publicKeys, additionalPublicKeys);\\n            signatures = _concatenateByteArrays(signatures, additionalSignatures);\\n        }\\n    }\\n\\n    /// @notice Handler called whenever the balance of ETH handled by the system increases. Splits funds between operators and treasury.\\n    /// @param _amount Additional eth received\\n    function _onEarnings(uint256 _amount) internal override {\\n        uint256 globalFee = GlobalFee.get();\\n        uint256 sharesToMint = (_amount * _totalShares() * globalFee) /\\n            ((_assetBalance() * BASE) - (_amount * globalFee));\\n\\n        uint256 operatorRewards = (sharesToMint * OperatorRewardsShare.get()) / BASE;\\n\\n        Operators.Operator[] memory operators = Operators.getAllActive();\\n        uint256[] memory validatorCounts = new uint256[](operators.length);\\n\\n        uint256 totalActiveValidators = 0;\\n        for (uint256 idx = 0; idx < operators.length; ++idx) {\\n            uint256 operatorActiveValidatorCount = operators[idx].funded - operators[idx].stopped;\\n            totalActiveValidators += operatorActiveValidatorCount;\\n            validatorCounts[idx] = operatorActiveValidatorCount;\\n        }\\n\\n        if (totalActiveValidators > 0) {\\n            uint256 rewardsPerActiveValidator = operatorRewards / totalActiveValidators;\\n\\n            for (uint256 idx = 0; idx < validatorCounts.length; ++idx) {\\n                _mintRawShares(operators[idx].operator, validatorCounts[idx] * rewardsPerActiveValidator);\\n            }\\n        } else {\\n            operatorRewards = 0;\\n        }\\n\\n        _mintRawShares(TreasuryAddress.get(), sharesToMint - operatorRewards);\\n    }\\n\\n    /// @notice Handler called whenever the total balance of ETH is requested\\n    function _assetBalance() internal view override returns (uint256) {\\n        uint256 beaconValidatorCount = BeaconValidatorCount.get();\\n        uint256 depositedValidatorCount = DepositedValidatorCount.get();\\n        if (beaconValidatorCount < depositedValidatorCount) {\\n            return\\n                BeaconValidatorBalanceSum.get() +\\n                address(this).balance +\\n                (depositedValidatorCount - beaconValidatorCount) *\\n                DepositManagerV1.DEPOSIT_SIZE;\\n        } else {\\n            return BeaconValidatorBalanceSum.get() + address(this).balance;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe9afefdf83909b36dadc4232f6ab18cee58ea7e965fca5312ee671823318851f\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/DepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IDepositContract.sol\\\";\\n\\nimport \\\"../libraries/BytesLib.sol\\\";\\nimport \\\"../libraries/Uint256Lib.sol\\\";\\n\\nimport \\\"../state/river/DepositContractAddress.sol\\\";\\nimport \\\"../state/river/WithdrawalCredentials.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\n\\n/// @title Deposit Manager (v1)\\n/// @author Iulian Rotaru\\n/// @notice This contract handles the interactions with the official deposit contract, funding all validators\\n/// @dev _onValidatorKeyRequest must be overriden.\\nabstract contract DepositManagerV1 {\\n    error NotEnoughFunds();\\n    error InconsistentPublicKeys();\\n    error InconsistentSignatures();\\n    error NoAvailableValidatorKeys();\\n    error InvalidPublicKeyCount();\\n    error InvalidSignatureCount();\\n    error InvalidWithdrawalCredentials();\\n\\n    uint256 public constant PUBLIC_KEY_LENGTH = 48;\\n    uint256 public constant SIGNATURE_LENGTH = 96;\\n    uint256 public constant DEPOSIT_SIZE = 32 ether;\\n\\n    /// @notice Initializer to set the deposit contract address and the withdrawal credentials to use\\n    /// @param _depositContractAddress The address of the deposit contract\\n    /// @param _withdrawalCredentials The withdrawal credentials to apply to all deposits\\n    function initDepositManagerV1(address _depositContractAddress, bytes32 _withdrawalCredentials) internal {\\n        DepositContractAddress.set(IDepositContract(_depositContractAddress));\\n\\n        WithdrawalCredentials.set(_withdrawalCredentials);\\n    }\\n\\n    /// @notice Internal helper to retrieve validator keys ready to be funded\\n    /// @dev Must be overriden with an implementation that provides keyCount or less keys upon call\\n    /// @param _keyCount The amount of keys (or less) to return.\\n    function _getNextValidators(uint256 _keyCount)\\n        internal\\n        virtual\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    function depositToConsensusLayer(uint256 _maxCount) external {\\n        uint256 validatorsToDeposit = Uint256Lib.min(address(this).balance / DEPOSIT_SIZE, _maxCount);\\n\\n        if (validatorsToDeposit == 0) {\\n            revert NotEnoughFunds();\\n        }\\n\\n        (bytes[] memory publicKeys, bytes[] memory signatures) = _getNextValidators(validatorsToDeposit);\\n\\n        uint256 receivedPublicKeyCount = publicKeys.length;\\n\\n        if (receivedPublicKeyCount == 0) {\\n            revert NoAvailableValidatorKeys();\\n        }\\n\\n        if (receivedPublicKeyCount > validatorsToDeposit) {\\n            revert InvalidPublicKeyCount();\\n        }\\n\\n        uint256 receivedSignatureCount = signatures.length;\\n\\n        if (receivedSignatureCount != receivedPublicKeyCount) {\\n            revert InvalidSignatureCount();\\n        }\\n\\n        bytes32 withdrawalCredentials = WithdrawalCredentials.get();\\n\\n        if (withdrawalCredentials == 0) {\\n            revert InvalidWithdrawalCredentials();\\n        }\\n\\n        for (uint256 idx = 0; idx < receivedPublicKeyCount; idx += 1) {\\n            _depositValidator(publicKeys[idx], signatures[idx], withdrawalCredentials);\\n        }\\n\\n        DepositedValidatorCount.set(DepositedValidatorCount.get() + receivedPublicKeyCount);\\n    }\\n\\n    /// @notice Deposits 32 ETH to the official Deposit contract\\n    /// @param _publicKey The public key of the validator\\n    /// @param _signature The signature provided by the operator\\n    /// @param _withdrawalCredentials The withdrawal credentials provided by River\\n    function _depositValidator(\\n        bytes memory _publicKey,\\n        bytes memory _signature,\\n        bytes32 _withdrawalCredentials\\n    ) internal {\\n        if (_publicKey.length != PUBLIC_KEY_LENGTH) {\\n            revert InconsistentPublicKeys();\\n        }\\n\\n        if (_signature.length != SIGNATURE_LENGTH) {\\n            revert InconsistentSignatures();\\n        }\\n        uint256 value = DEPOSIT_SIZE;\\n\\n        uint256 depositAmount = value / 1000000000 wei;\\n        assert(depositAmount * 1000000000 wei == value);\\n\\n        bytes32 pubkeyRoot = sha256(BytesLib.pad64(_publicKey));\\n        bytes32 signatureRoot = sha256(\\n            abi.encodePacked(\\n                sha256(BytesLib.slice(_signature, 0, 64)),\\n                sha256(BytesLib.pad64(BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)))\\n            )\\n        );\\n\\n        bytes32 depositDataRoot = sha256(\\n            abi.encodePacked(\\n                sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\n                sha256(abi.encodePacked(Uint256Lib.toLittleEndian64(depositAmount), signatureRoot))\\n            )\\n        );\\n\\n        uint256 targetBalance = address(this).balance - value;\\n\\n        DepositContractAddress.get().deposit{value: value}(\\n            _publicKey,\\n            abi.encodePacked(_withdrawalCredentials),\\n            _signature,\\n            depositDataRoot\\n        );\\n        require(address(this).balance == targetBalance, \\\"EXPECTING_DEPOSIT_TO_HAPPEN\\\");\\n    }\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    function getDepositedValidatorCount() external view returns (uint256 depositedValidatorCount) {\\n        depositedValidatorCount = DepositedValidatorCount.get();\\n    }\\n}\\n\",\"keccak256\":\"0x0bc4aa8f2d05ae9c56b1a80eb6b94270e2b90a448904fec10fb6e51913dc78e9\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/OperatorsManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../libraries/LibOwnable.sol\\\";\\n\\nimport \\\"../state/river/Operators.sol\\\";\\nimport \\\"../state/river/ValidatorKeys.sol\\\";\\n\\n/// @title Operators Manager (v1)\\n/// @author Iulian Rotaru\\n/// @notice This contract handles the operator and key list\\ncontract OperatorsManagerV1 {\\n    error OperatorAlreadyExists(string name);\\n    error InactiveOperator(string name);\\n    error InvalidFundedKeyDeletionAttempt();\\n    error InvalidUnsortedIndexes();\\n    error InvalidKeyCount();\\n    error InvalidPublicKeysLength();\\n    error InvalidSignatureLength();\\n    error InvalidIndexOutOfBounds();\\n\\n    event AddedOperator(string indexed name, address operatorAddress);\\n    event SetOperatorStatus(string indexed name, bool active);\\n    event SetOperatorLimit(string indexed name, uint256 newLimit);\\n    event SetOperatorStoppedValidatorCount(string indexed name, uint256 newStoppedValidatorCount);\\n    event SetOperatorAddress(string indexed name, address newOperatorAddress);\\n    event AddedValidatorKeys(string indexed name, uint256 totalKeyCount);\\n    event RemovedValidatorKeys(string indexed name, uint256 keyCount);\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() virtual {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents the call from working if the operator is not active\\n    /// @param _name The name identifying the operator\\n    modifier active(string memory _name) {\\n        if (Operators.get(_name).active == false) {\\n            revert InactiveOperator(_name);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents anyone except the admin or the given operator to make the call. Also checks if operator is active\\n    /// @param _name The name identifying the operator\\n    modifier operatorOrAdmin(string calldata _name) {\\n        Operators.Operator storage operator = Operators.get(_name);\\n        if (operator.active == false) {\\n            revert InactiveOperator(_name);\\n        }\\n        if (msg.sender != operator.operator && msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Adds an operator to the registry\\n    /// @dev Only callable by the administrator\\n    /// @param _name The name identifying the operator\\n    /// @param _operator The address representing the operator, receiving the rewards\\n    function addOperator(string calldata _name, address _operator) external onlyAdmin {\\n        if (Operators.exists(_name) == true) {\\n            revert OperatorAlreadyExists(_name);\\n        }\\n\\n        Operators.Operator memory newOperator = Operators.Operator({\\n            active: true,\\n            operator: _operator,\\n            name: _name,\\n            limit: 0,\\n            funded: 0,\\n            keys: 0,\\n            stopped: 0\\n        });\\n\\n        Operators.set(_name, newOperator);\\n\\n        emit AddedOperator(_name, newOperator.operator);\\n    }\\n\\n    /// @notice Changes the operator address of an operator\\n    /// @dev Only callable by the administrator or the previous operator address\\n    /// @param _name The name identifying the operator\\n    /// @param _newOperatorAddress The new address representing the operator\\n    function setOperatorAddress(string calldata _name, address _newOperatorAddress) external operatorOrAdmin(_name) {\\n        Operators.Operator storage operator = Operators.get(_name);\\n\\n        operator.operator = _newOperatorAddress;\\n\\n        emit SetOperatorAddress(_name, operator.operator);\\n    }\\n\\n    /// @notice Changes the operator status\\n    /// @dev Only callable by the administrator\\n    /// @param _name The name identifying the operator\\n    /// @param _newStatus The new status of the operator\\n    function setOperatorStatus(string calldata _name, bool _newStatus) external onlyAdmin {\\n        Operators.Operator storage operator = Operators.get(_name);\\n\\n        operator.active = _newStatus;\\n\\n        emit SetOperatorStatus(_name, _newStatus);\\n    }\\n\\n    /// @notice Changes the operator stopped validator cound\\n    /// @dev Only callable by the administrator\\n    /// @param _name The name identifying the operator\\n    /// @param _newStoppedValidatorCount The new stopped validator count of the operator\\n    function setOperatorStoppedValidatorCount(string calldata _name, uint256 _newStoppedValidatorCount)\\n        external\\n        onlyAdmin\\n    {\\n        Operators.Operator storage operator = Operators.get(_name);\\n\\n        operator.stopped = _newStoppedValidatorCount;\\n\\n        emit SetOperatorStoppedValidatorCount(_name, operator.stopped);\\n    }\\n\\n    /// @notice Changes the operator staking limit\\n    /// @dev Only callable by the administrator\\n    /// @param _name The name identifying the operator\\n    /// @param _newLimit The new staking limit of the operator\\n    function setOperatorLimit(string calldata _name, uint256 _newLimit) external onlyAdmin {\\n        Operators.Operator storage operator = Operators.get(_name);\\n\\n        operator.limit = _newLimit;\\n\\n        emit SetOperatorLimit(_name, operator.limit);\\n    }\\n\\n    /// @notice Adds new keys for an operator\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @param _name The name identifying the operator\\n    /// @param _keyCount The amount of keys provided\\n    /// @param _publicKeys Public keys of the validator, concatenated\\n    /// @param _signatures Signatures of the validator keys, concatenated\\n    function addValidators(\\n        string calldata _name,\\n        uint256 _keyCount,\\n        bytes calldata _publicKeys,\\n        bytes calldata _signatures\\n    ) external operatorOrAdmin(_name) {\\n        if (_keyCount == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        if (_publicKeys.length != _keyCount * ValidatorKeys.PUBLIC_KEY_LENGTH) {\\n            revert InvalidPublicKeysLength();\\n        }\\n\\n        if (_signatures.length != _keyCount * ValidatorKeys.SIGNATURE_LENGTH) {\\n            revert InvalidSignatureLength();\\n        }\\n\\n        Operators.Operator storage operator = Operators.get(_name);\\n\\n        for (uint256 idx = 0; idx < _keyCount; ++idx) {\\n            bytes memory publicKey = BytesLib.slice(\\n                _publicKeys,\\n                idx * ValidatorKeys.PUBLIC_KEY_LENGTH,\\n                ValidatorKeys.PUBLIC_KEY_LENGTH\\n            );\\n            bytes memory signature = BytesLib.slice(\\n                _signatures,\\n                idx * ValidatorKeys.SIGNATURE_LENGTH,\\n                ValidatorKeys.SIGNATURE_LENGTH\\n            );\\n            ValidatorKeys.set(operator.name, operator.keys + idx, publicKey, signature);\\n        }\\n\\n        operator.keys += _keyCount;\\n\\n        emit AddedValidatorKeys(_name, operator.keys);\\n    }\\n\\n    /// @notice Remove validator keys\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @dev The indexes must be provided sorted in decreasing order, otherwise the method will revert\\n    /// @param _name The name identifying the operator\\n    /// @param _indexes The indexes of the keys to remove\\n    function removeValidators(string calldata _name, uint256[] calldata _indexes) external operatorOrAdmin(_name) {\\n        Operators.Operator storage operator = Operators.get(_name);\\n\\n        if (_indexes.length == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        for (uint256 idx = 0; idx < _indexes.length; ++idx) {\\n            uint256 keyIndex = _indexes[idx];\\n\\n            if (keyIndex < operator.funded) {\\n                revert InvalidFundedKeyDeletionAttempt();\\n            }\\n\\n            if (keyIndex >= operator.keys) {\\n                revert InvalidIndexOutOfBounds();\\n            }\\n\\n            if (idx > 0 && _indexes[idx] >= _indexes[idx - 1]) {\\n                revert InvalidUnsortedIndexes();\\n            }\\n\\n            uint256 lastKeyIndex = operator.keys - 1;\\n            (bytes memory lastPublicKey, bytes memory lastSignature) = ValidatorKeys.get(_name, lastKeyIndex);\\n            ValidatorKeys.set(_name, keyIndex, lastPublicKey, lastSignature);\\n            ValidatorKeys.set(_name, lastKeyIndex, new bytes(0), new bytes(0));\\n            operator.keys -= 1;\\n        }\\n\\n        emit RemovedValidatorKeys(_name, operator.keys);\\n    }\\n\\n    /// @notice Get operator details by name\\n    /// @param _name The name identifying the operator\\n    function getOperatorByName(string calldata _name) external view returns (Operators.Operator memory) {\\n        return Operators.get(_name);\\n    }\\n\\n    /// @notice Get operator details\\n    /// @param _index The index of the operator\\n    function getOperator(uint256 _index) external view returns (Operators.Operator memory) {\\n        return Operators.getByIndex(_index);\\n    }\\n\\n    /// @notice Get operator count\\n    function getOperatorCount() external view returns (uint256) {\\n        return Operators.getCount();\\n    }\\n\\n    /// @notice Get the key of an operator at a specific index\\n    /// @param _operatorName The name identifying the operator\\n    /// @param _index The key index\\n    function getKey(string calldata _operatorName, uint256 _index)\\n        external\\n        view\\n        returns (\\n            bytes memory publicKey,\\n            bytes memory signature,\\n            bool funded\\n        )\\n    {\\n        (publicKey, signature) = ValidatorKeys.get(_operatorName, _index);\\n        funded = _index <= Operators.get(_operatorName).funded;\\n    }\\n}\\n\",\"keccak256\":\"0xf73bd4ea8ee5a836497bdbc4acea56b88965ce47c4662e38a014119170402a81\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/OracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../libraries/LibOwnable.sol\\\";\\n\\nimport \\\"../state/river/OracleAddress.sol\\\";\\nimport \\\"../state/river/LastOracleRoundId.sol\\\";\\nimport \\\"../state/river/BeaconValidatorBalanceSum.sol\\\";\\nimport \\\"../state/river/BeaconValidatorCount.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\n\\n/// @title Oracle Manager (v1)\\n/// @author Iulian Rotaru\\n/// @notice This contract handles the inputs provided by the oracle\\nabstract contract OracleManagerV1 {\\n    event BeaconDataUpdate(uint256 validatorCount, uint256 validatorBalanceSum, bytes32 roundId);\\n\\n    error InvalidValidatorCountReport(uint256 _providedValidatorCount, uint256 _depositedValidatorCount);\\n\\n    /// @notice Handler called if the delta between the last and new validator balance sum is positive\\n    /// @dev Must be overriden\\n    /// @param _profits The positive increase in the validator balance sum (staking rewards)\\n    function _onEarnings(uint256 _profits) internal virtual;\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() virtual {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Sets the validator count and validator balance sum reported by the oracle\\n    /// @dev Can only be called by the oracle address\\n    /// @param _validatorCount The number of active validators on the consensus layer\\n    /// @param _validatorBalanceSum The validator balance sum of the active validators on the consensus layer\\n    /// @param _roundId An identifier for this update\\n    function setBeaconData(\\n        uint256 _validatorCount,\\n        uint256 _validatorBalanceSum,\\n        bytes32 _roundId\\n    ) external {\\n        if (msg.sender != OracleAddress.get()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n\\n        if (_validatorCount > DepositedValidatorCount.get()) {\\n            revert InvalidValidatorCountReport(_validatorCount, DepositedValidatorCount.get());\\n        }\\n\\n        uint256 previousValidatorBalanceSum = BeaconValidatorBalanceSum.get();\\n        uint256 newValidators = _validatorCount - BeaconValidatorCount.get();\\n\\n        BeaconValidatorBalanceSum.set(_validatorBalanceSum);\\n        BeaconValidatorCount.set(_validatorCount);\\n        LastOracleRoundId.set(_roundId);\\n\\n        if (previousValidatorBalanceSum < _validatorBalanceSum) {\\n            _onEarnings(_validatorBalanceSum - previousValidatorBalanceSum - newValidators * 32 ether);\\n        }\\n\\n        emit BeaconDataUpdate(_validatorCount, _validatorBalanceSum, _roundId);\\n    }\\n\\n    /// @notice Get Oracle address\\n    function getOracle() external view returns (address oracle) {\\n        oracle = OracleAddress.get();\\n    }\\n\\n    /// @notice Set Oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external onlyAdmin {\\n        OracleAddress.set(_oracleAddress);\\n    }\\n\\n    /// @notice Get Beacon validator balance sum\\n    function getBeaconValidatorBalanceSum() external view returns (uint256 beaconValidatorBalanceSum) {\\n        beaconValidatorBalanceSum = BeaconValidatorBalanceSum.get();\\n    }\\n\\n    /// @notice Get Beacon validator count (the amount of validator reported by the oracles)\\n    function getBeaconValidatorCount() external view returns (uint256 beaconValidatorCount) {\\n        beaconValidatorCount = BeaconValidatorCount.get();\\n    }\\n}\\n\",\"keccak256\":\"0x79a0b7ab0dc6e869533fa6e05e9df91a4cd4d4d93870969ae16e096e7b00ec40\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/SharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nimport \\\"../state/river/Shares.sol\\\";\\nimport \\\"../state/river/SharesPerOwner.sol\\\";\\nimport \\\"../state/river/ApprovalsPerOwner.sol\\\";\\n\\n/// @title Shares Manager (v1)\\n/// @author Iulian Rotaru\\n/// @notice This contract handles the shares of the depositor and the rebasing effect depending on the oracle data\\nabstract contract SharesManagerV1 is IERC20 {\\n    error BalanceTooLow();\\n    error UnauthorizedOperation();\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n    error NullTransfer();\\n\\n    function _isAllowed(address _account) internal view virtual returns (bool);\\n\\n    modifier allowed(address _account) {\\n        if (!_isAllowed(_account)) {\\n            revert Errors.Unauthorized(_account);\\n        }\\n        _;\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"River\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"rETH\\\";\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _assetBalance();\\n    }\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance) {\\n        return _balanceOf(_owner);\\n    }\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining) {\\n        return ApprovalsPerOwner.get(_owner, _spender);\\n    }\\n\\n    function sharesOf(address _owner) external view returns (uint256 shares) {\\n        return SharesPerOwner.get(_owner);\\n    }\\n\\n    function transfer(address _to, uint256 _value) external allowed(msg.sender) allowed(_to) returns (bool success) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        if (_balanceOf(msg.sender) < _value) {\\n            revert BalanceTooLow();\\n        }\\n\\n        uint256 shares = _sharesFromBalance(_value);\\n\\n        SharesPerOwner.set(msg.sender, SharesPerOwner.get(msg.sender) - shares);\\n        SharesPerOwner.set(_to, SharesPerOwner.get(_to) + shares);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external allowed(_from) allowed(_to) returns (bool success) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        if (_from != msg.sender) {\\n            uint256 currentAllowance = ApprovalsPerOwner.get(_from, msg.sender);\\n            if (currentAllowance < _value) {\\n                revert AllowanceTooLow(_from, msg.sender, currentAllowance, _value);\\n            }\\n            ApprovalsPerOwner.set(_from, msg.sender, currentAllowance - _value);\\n        }\\n\\n        if (_balanceOf(_from) < _value) {\\n            revert BalanceTooLow();\\n        }\\n\\n        uint256 shares = _sharesFromBalance(_value);\\n\\n        SharesPerOwner.set(_from, SharesPerOwner.get(_from) - shares);\\n        SharesPerOwner.set(_to, SharesPerOwner.get(_to) + shares);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) external allowed(msg.sender) returns (bool success) {\\n        ApprovalsPerOwner.set(msg.sender, _spender, _value);\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function _assetBalance() internal view virtual returns (uint256);\\n\\n    function _balanceFromShares(uint256 shares) internal view returns (uint256) {\\n        uint256 _totalSharesValue = Shares.get();\\n\\n        if (_totalSharesValue == 0) {\\n            return 0;\\n        }\\n\\n        return ((shares * _assetBalance())) / _totalSharesValue;\\n    }\\n\\n    function _sharesFromBalance(uint256 balance) internal view returns (uint256) {\\n        uint256 assetBalance = _assetBalance();\\n\\n        if (assetBalance == 0) {\\n            return 0;\\n        }\\n\\n        return (balance * Shares.get()) / assetBalance;\\n    }\\n\\n    // assuming funds are received, _assetBalance should have taken _value into account\\n    function _mintShares(address _owner, uint256 _value) internal {\\n        uint256 assetBalance = _assetBalance();\\n        uint256 oldTotalAssetBalance = _assetBalance() - _value;\\n\\n        if (oldTotalAssetBalance == 0) {\\n            _mintRawShares(_owner, assetBalance);\\n        } else {\\n            uint256 sharesToMint = (_value * _totalShares()) / oldTotalAssetBalance;\\n            _mintRawShares(_owner, sharesToMint);\\n        }\\n    }\\n\\n    // assuming funds are received, _assetBalance should have taken _value into account\\n    function _mintRawShares(address _owner, uint256 _value) internal {\\n        Shares.set(Shares.get() + _value);\\n        SharesPerOwner.set(_owner, SharesPerOwner.get(_owner) + _value);\\n        emit Transfer(address(0), _owner, _value);\\n    }\\n\\n    function _balanceOf(address _owner) internal view returns (uint256 balance) {\\n        return _balanceFromShares(SharesPerOwner.get(_owner));\\n    }\\n\\n    function _totalShares() internal view returns (uint256) {\\n        return Shares.get();\\n    }\\n\\n    function totalShares() external view returns (uint256) {\\n        return _totalShares();\\n    }\\n}\\n\",\"keccak256\":\"0x8d60d02ab24e434c9ab134fb2782b390637b172bf49da4f0ace6ddb709b5bdb2\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/TransferManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\n\\n/// @title Transfer Manager (v1)\\n/// @author Iulian Rotaru\\n/// @notice This contract handles the inbound transfers cases or the explicit submissions\\nabstract contract TransferManagerV1 {\\n    event UserDeposit(address indexed user, address indexed referral, uint256 amount);\\n\\n    error EmptyDeposit();\\n\\n    /// @notice Handler called whenever a user has sent funds to the contract\\n    /// @dev Must be overriden\\n    /// @param _depositor Address that made the deposit\\n    /// @param _amount Amount deposited\\n    function _onDeposit(address _depositor, uint256 _amount) internal virtual;\\n\\n    /// @notice Internal utility calling the deposit handler and emitting the deposit details and the referral address\\n    /// @param _referral Referral address, address(0) if none\\n    function _deposit(address _referral) internal {\\n        if (msg.value == 0) {\\n            revert EmptyDeposit();\\n        }\\n\\n        _onDeposit(msg.sender, msg.value);\\n\\n        emit UserDeposit(msg.sender, _referral, msg.value);\\n    }\\n\\n    /// @notice Explicit deposit method\\n    /// @param _referral Referral address, address(0) if none\\n    function deposit(address _referral) external payable {\\n        _deposit(_referral);\\n    }\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable {\\n        _deposit(address(0));\\n    }\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable {\\n        revert Errors.InvalidCall();\\n    }\\n}\\n\",\"keccak256\":\"0xf588046d662641b0eb8c4d71b16a335ee7293f85395556be7c6a96c354b710e7\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/WhitelistManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/river/WhitelistorAddress.sol\\\";\\nimport \\\"../state/river/Whitelist.sol\\\";\\n\\n/// @title Whitelist Manager (v1)\\n/// @author Iulian Rotaru\\n/// @notice This contract handles the whitelist of accounts allowed to own shares\\nabstract contract WhitelistManagerV1 {\\n    event ChangedWhitelistStatus(address indexed account, bool status);\\n\\n    /// @notice Initializes the whitelistor address\\n    /// @param _whitelistorAddress Address allowed to edit the whitelist\\n    function initWhitelistManagerV1(address _whitelistorAddress) internal {\\n        WhitelistorAddress.set(_whitelistorAddress);\\n    }\\n\\n    /// @notice Sets the whitelisting status for an account\\n    /// @param _account Account status to edit\\n    /// @param _status Whitelist status\\n    function whitelist(address _account, bool _status) external {\\n        if (msg.sender != WhitelistorAddress.get() && msg.sender != AdministratorAddress.get()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n\\n        Whitelist.set(_account, _status);\\n\\n        emit ChangedWhitelistStatus(_account, _status);\\n    }\\n\\n    function _isWhitelisted(address _account) internal view returns (bool) {\\n        return Whitelist.get(_account);\\n    }\\n\\n    function isWhitelisted(address _account) external view returns (bool) {\\n        return _isWhitelisted(_account);\\n    }\\n}\\n\",\"keccak256\":\"0x63953ffaec271ca458db429ba7a32ed048259f5fd0d7348f96bb5dc7875c4d5d\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IDepositContract.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IDepositContract {\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawalCredentials,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa5b1f77965814e1cc883111cb2909bf58647c401d03ada85b95a65cf54f8b029\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n}\\n\",\"keccak256\":\"0x3fdc46f7b30b29d3b9d540ba1b06cfaede61a7c6ce31c8fe434a9af6f411a920\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/BytesLib.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary BytesLib {\\n    function pad64(bytes memory _b) internal pure returns (bytes memory) {\\n        assert(_b.length >= 32 && _b.length <= 64);\\n        if (64 == _b.length) return _b;\\n\\n        bytes memory zero32 = new bytes(32);\\n        assembly {\\n            mstore(add(zero32, 0x20), 0)\\n        }\\n\\n        if (32 == _b.length) return BytesLib.concat(_b, zero32);\\n        else return BytesLib.concat(_b, BytesLib.slice(zero32, 0, uint256(64) - _b.length));\\n    }\\n\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xb7520fc078933f9e1db774a3040baee1f915a70475d76e4731f6ef34d386e8f9\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    error Unauthorized(address caller);\\n    error InvalidCall();\\n    error InvalidArgument();\\n}\\n\",\"keccak256\":\"0xf3d3cec3d3d583aac19da0ace05f7ee067d47fd67e2a1f5f3195d7cbc5329325\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\n\\nlibrary LibOwnable {\\n    function _setAdmin(address newAdmin) internal {\\n        AdministratorAddress.set(newAdmin);\\n    }\\n\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n}\\n\",\"keccak256\":\"0xc189956546f854193e5fea6225b6eb0262ab192a97c4e32575eefe8205549794\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Uint256Lib.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Uint256Lib {\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 temp_value = _value;\\n        for (uint256 i = 0; i < 8; ++i) {\\n            result = (result << 8) | (temp_value & 0xFF);\\n            temp_value >>= 8;\\n        }\\n\\n        assert(0 == temp_value); // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256 max) {\\n        return (a > b ? b : a);\\n    }\\n}\\n\",\"keccak256\":\"0x0cba10266338d44e5778d43600eb69e2089c45124625f77ee935f06788af15f8\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52ccf1daa33de9c72831e0d7458928c37ca7b5f8d8f732114095edeb81339920\",\"license\":\"MIT\"},\"contracts/src/state/river/ApprovalsPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary ApprovalsPerOwner {\\n    bytes32 public constant APPROVALS_PER_OWNER_SLOT = bytes32(uint256(keccak256(\\\"river.state.approvalsPerOwner\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => mapping(address => uint256)) value;\\n    }\\n\\n    function get(address owner, address operator) internal view returns (uint256) {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[owner][operator];\\n    }\\n\\n    function set(\\n        address owner,\\n        address operator,\\n        uint256 newValue\\n    ) internal {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[owner][operator] = newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x0d12a15523294cafd172326e1be4b98c1bcf639fc4a286bda8370fc85a41fcd9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/BeaconValidatorBalanceSum.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary BeaconValidatorBalanceSum {\\n    bytes32 public constant VALIDATOR_BALANCE_SUM_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.beaconValidatorBalanceSum\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VALIDATOR_BALANCE_SUM_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VALIDATOR_BALANCE_SUM_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x01f9af561a5e2a64da59d72a305f68ec31016d5202c53de74c6a477c6bdd0ff3\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/BeaconValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary BeaconValidatorCount {\\n    bytes32 public constant BEACON_VALIDATOR_COUNT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.beaconValidatorCount\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(BEACON_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(BEACON_VALIDATOR_COUNT_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x5260d1258dfd22d70f33a8a0cb1757d4770096fd5697c384423a3359d72aa957\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositContractAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../interfaces/IDepositContract.sol\\\";\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary DepositContractAddress {\\n    bytes32 public constant DEPOSIT_CONTRACT_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositContractAddress\\\")) - 1);\\n\\n    function get() internal view returns (IDepositContract) {\\n        return IDepositContract(UnstructuredStorage.getStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT));\\n    }\\n\\n    function set(IDepositContract newValue) internal {\\n        return UnstructuredStorage.setStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT, address(newValue));\\n    }\\n}\\n\",\"keccak256\":\"0xc53c4c1976e8da650ed4c246d0504db7a108de7dc3e3d60bb702eee247192f2c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositedValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary DepositedValidatorCount {\\n    bytes32 public constant DEPOSITED_VALIDATOR_COUNT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositedValidatorCount\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xa1c3309b1b7b9ecdd328f62c0bef365a230d4a7275e2a590794bd6f368e2baa9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/GlobalFee.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary GlobalFee {\\n    bytes32 public constant GLOBAL_FEE_SLOT = bytes32(uint256(keccak256(\\\"river.state.globalFee\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(GLOBAL_FEE_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(GLOBAL_FEE_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf35e8f433c5761e219bee317aa5ae1d78d42e5387ad0b1023b8384f99c5104b4\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/LastOracleRoundId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary LastOracleRoundId {\\n    bytes32 public constant LAST_ORACLE_ROUND_ID_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.lastOracleRoundId\\\")) - 1);\\n\\n    function get() internal view returns (bytes32) {\\n        return UnstructuredStorage.getStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT);\\n    }\\n\\n    function set(bytes32 newValue) internal {\\n        UnstructuredStorage.setStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x0f0657382184c4246a6c528476b0c8f2a1eb9002f70b39a9c974fa47f80a20f3\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OperatorRewardsShare.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary OperatorRewardsShare {\\n    bytes32 public constant OPERATOR_REWARDS_SHARE_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.operatorRewardsShare\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(OPERATOR_REWARDS_SHARE_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(OPERATOR_REWARDS_SHARE_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xbffff7d0ed1614a246acb5b31a5555c6992bed9e305b46158d206267b1975e78\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Operators.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Operators {\\n    bytes32 public constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.operators\\\")) - 1);\\n\\n    bytes32 public constant OPERATORS_MAPPING_SLOT = bytes32(uint256(keccak256(\\\"river.state.operatorsMapping\\\")) - 1);\\n\\n    struct Operator {\\n        bool active;\\n        string name;\\n        address operator;\\n        uint256 limit;\\n        uint256 funded;\\n        uint256 keys;\\n        uint256 stopped;\\n    }\\n\\n    struct OperatorResolution {\\n        bool active;\\n        uint256 index;\\n    }\\n\\n    struct SlotOperator {\\n        Operator[] value;\\n    }\\n\\n    struct SlotOperatorMapping {\\n        mapping(string => OperatorResolution) value;\\n    }\\n\\n    error OperatorNotFound(string name);\\n\\n    function _getOperatorIndex(string memory name) internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n\\n        if (opm.value[name].active == false) {\\n            revert OperatorNotFound(name);\\n        }\\n\\n        return opm.value[name].index;\\n    }\\n\\n    function _getOperatorActive(string memory name) internal view returns (bool) {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n        return opm.value[name].active;\\n    }\\n\\n    function _setOperatorIndex(\\n        string memory name,\\n        bool active,\\n        uint256 index\\n    ) internal {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n        opm.value[name] = OperatorResolution({active: active, index: index});\\n    }\\n\\n    function exists(string memory name) internal view returns (bool) {\\n        return _getOperatorActive(name);\\n    }\\n\\n    function get(string memory name) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n        uint256 index = _getOperatorIndex(name);\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[index];\\n    }\\n\\n    function getByIndex(uint256 index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[index];\\n    }\\n\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    function _hasFundableKeys(Operators.Operator memory operator) internal pure returns (bool) {\\n        return (operator.active && operator.keys > operator.funded && operator.limit > operator.funded);\\n    }\\n\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (r.value[idx].active == true) {\\n                ++activeCount;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (r.value[idx].active == true) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                ++activeIdx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    function getAllFundable() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (_hasFundableKeys(r.value[idx])) {\\n                ++activeCount;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (_hasFundableKeys(r.value[idx])) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                ++activeIdx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    function set(string memory name, Operator memory newValue) internal {\\n        bool opExists = _getOperatorActive(name);\\n\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (opExists == false) {\\n            r.value.push(newValue);\\n            _setOperatorIndex(name, newValue.active, r.value.length - 1);\\n        } else {\\n            uint256 index = _getOperatorIndex(name);\\n            r.value[index] = newValue;\\n            if (opExists != newValue.active) {\\n                _setOperatorIndex(name, newValue.active, index);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x91edd6a82c25321c892dcca09da5cd5d94770b3665547acb15906fc0ad5a5f36\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OracleAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary OracleAddress {\\n    bytes32 public constant ORACLE_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.oracleAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ORACLE_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ORACLE_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xa139a378de089b55879828683570348b2346ce9b77591272f2d35e2f5f4aaa31\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Shares.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Shares {\\n    bytes32 public constant SHARES_SLOT = bytes32(uint256(keccak256(\\\"river.state.shares\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(SHARES_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(SHARES_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x649260bef1a65d4b72d548f4bb58aa7271f538410e0c44a347daf78079a49e72\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/SharesPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary SharesPerOwner {\\n    bytes32 public constant SHARES_SLOT = bytes32(uint256(keccak256(\\\"river.state.sharesPerOwner\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => uint256) value;\\n    }\\n\\n    function get(address owner) internal view returns (uint256) {\\n        bytes32 slot = SHARES_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[owner];\\n    }\\n\\n    function set(address owner, uint256 newValue) internal {\\n        bytes32 slot = SHARES_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[owner] = newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x3ff40c3621969618a10b5bfbf4850fb239484cd62ac1a3293e2778df20e16c2b\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/TreasuryAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary TreasuryAddress {\\n    bytes32 public constant TREASURY_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.treasuryAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(TREASURY_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(TREASURY_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xb346d50a19c00aff4ab10332f82013bac291d580222306202503a6ba50ac499c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ValidatorKeys.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/BytesLib.sol\\\";\\n\\nlibrary ValidatorKeys {\\n    uint256 public constant PUBLIC_KEY_LENGTH = 48;\\n    uint256 public constant SIGNATURE_LENGTH = 96;\\n\\n    error InvalidPublicKey();\\n    error InvalidSignature();\\n\\n    bytes32 public constant VALIDATOR_KEYS_SLOT = bytes32(uint256(keccak256(\\\"river.state.validatorKeys\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(string => mapping(uint256 => bytes)) value;\\n    }\\n\\n    function get(string memory name, uint256 idx)\\n        internal\\n        view\\n        returns (bytes memory publicKey, bytes memory signature)\\n    {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        bytes storage entry = r.value[name][idx];\\n\\n        publicKey = BytesLib.slice(entry, 0, PUBLIC_KEY_LENGTH);\\n        signature = BytesLib.slice(entry, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n    }\\n\\n    function getKeys(\\n        string memory name,\\n        uint256 startIdx,\\n        uint256 amount\\n    ) internal view returns (bytes[] memory publicKey, bytes[] memory signatures) {\\n        publicKey = new bytes[](amount);\\n        signatures = new bytes[](amount);\\n\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        for (uint256 idx = startIdx; idx < startIdx + amount; ++idx) {\\n            bytes memory rawCredentials = r.value[name][idx];\\n            publicKey[idx - startIdx] = BytesLib.slice(rawCredentials, 0, PUBLIC_KEY_LENGTH);\\n            signatures[idx - startIdx] = BytesLib.slice(rawCredentials, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n        }\\n    }\\n\\n    function set(\\n        string memory name,\\n        uint256 idx,\\n        bytes memory publicKey,\\n        bytes memory signature\\n    ) internal {\\n        bytes memory concatenatedKeys = BytesLib.concat(publicKey, signature);\\n\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[name][idx] = concatenatedKeys;\\n    }\\n}\\n\",\"keccak256\":\"0xa1d17dda118578d100f7f9765b1b3b468102a03279108627aa1a010eaf0faf8c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Whitelist.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Whitelist {\\n    bytes32 public constant WHITELIST_SLOT = bytes32(uint256(keccak256(\\\"river.state.whitelist\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => bool) value;\\n    }\\n\\n    function get(address account) internal view returns (bool) {\\n        bytes32 slot = WHITELIST_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[account];\\n    }\\n\\n    function set(address account, bool status) internal {\\n        bytes32 slot = WHITELIST_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[account] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xd44d23357ef3f601f8c76354befea4f0c21c328db11e66594f5b924371f9bf38\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/WhitelistorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary WhitelistorAddress {\\n    bytes32 public constant WHITELISTOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.whitelistorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(WHITELISTOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(WHITELISTOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x8833dad56fadd043c5bebfb88450ef8960d3f229f4464a91cec987d03cbb5220\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/WithdrawalCredentials.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary WithdrawalCredentials {\\n    bytes32 public constant WITHDRAWAL_CREDENTIALS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.withdrawalCredentials\\\")) - 1);\\n\\n    function get() internal view returns (bytes32) {\\n        return UnstructuredStorage.getStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT);\\n    }\\n\\n    function set(bytes32 newValue) internal {\\n        UnstructuredStorage.setStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x513908d9f006eee6cb307131125d6f25e7d484a1403f75dd2ed3500dfcaf58a0\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary AdministratorAddress {\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x6c103a106ff958994c38f055a316144416df36aeb299ba660e7b8af063931b72\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Version {\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VERSION_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf90d1ecf583061aa70dc464ec1fde21da6e9309601bcbba38f47d26257a1c656\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615084806100206000396000f3fe6080604052600436106102bf5760003560e01c806370a082311161016e578063bf15af56116100cb578063e79f97721161007f578063f340fa0111610064578063f340fa01146107d4578063f59c3708146107e7578063f5eb42dc14610807576102d0565b8063e79f97721461079d578063ec342ad0146107bd576102d0565b8063d1ca94a7116100b0578063d1ca94a71461073d578063d56580ff1461075d578063dd62ed3e1461077d576102d0565b8063bf15af5614610708578063cfa2d2b71461071d576102d0565b8063946c70d71161012257806395d89b411161010757806395d89b411461068d5780639e3947f3146106d3578063a9059cbb146106e8576102d0565b8063946c70d71461063e578063950c44ec1461066d576102d0565b806380d4027e1161015357806380d4027e146105f4578063833b1fce1461061457806387f2adfb14610629576102d0565b806370a08231146105b45780637adbf973146105d4576102d0565b8063291206f61161021c5780633a98ef39116101d057806350545d2f116101b557806350545d2f1461055f57806350e07df41461057f578063540bc5ea1461059f576102d0565b80633a98ef391461052a5780633af32abf1461053f576102d0565b8063313ce56711610201578063313ce567146104d157806336bf3325146104ed57806337b3a0211461050a576102d0565b8063291206f6146104915780632f693226146104b1576102d0565b806316967407116102735780631a4a7c61116102585780631a4a7c611461044757806323b872dd1461045c578063252d6a341461047c576102d0565b806316967407146103f757806318160ddd14610424576102d0565b806306fdde03116102a457806306fdde0314610358578063095ea7b3146103a757806313d86aed146103d7576102d0565b8063043f0a541461030257806305f63c8a14610322576102d0565b366102d0576102ce6000610827565b005b6040517fae962d4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561030e57600080fd5b506102ce61031d366004614939565b6108ab565b34801561032e57600080fd5b5061034261033d3660046149d3565b610ca6565b60405161034f9190614a44565b60405180910390f35b34801561036457600080fd5b5060408051808201909152600581527f526976657200000000000000000000000000000000000000000000000000000060208201525b60405161034f9190614ab4565b3480156103b357600080fd5b506103c76103c2366004614ae3565b610dea565b604051901515815260200161034f565b3480156103e357600080fd5b506102ce6103f23660046149d3565b610e75565b34801561040357600080fd5b5061040c61104d565b6040516001600160a01b03909116815260200161034f565b34801561043057600080fd5b5061043961105c565b60405190815260200161034f565b34801561045357600080fd5b50610439611066565b34801561046857600080fd5b506103c7610477366004614b0d565b611070565b34801561048857600080fd5b50610439611246565b34801561049d57600080fd5b506102ce6104ac3660046149d3565b611250565b3480156104bd57600080fd5b506102ce6104cc366004614b49565b6112bb565b3480156104dd57600080fd5b506040516012815260200161034f565b3480156104f957600080fd5b506104396801bc16d674ec80000081565b34801561051657600080fd5b506102ce610525366004614b9d565b61144b565b34801561053657600080fd5b506104396117d2565b34801561054b57600080fd5b506103c761055a366004614c41565b6117dc565b34801561056b57600080fd5b506102ce61057a366004614b49565b6117ed565b34801561058b57600080fd5b506102ce61059a366004614c6c565b6119c3565b3480156105ab57600080fd5b50610439606081565b3480156105c057600080fd5b506104396105cf366004614c41565b611a97565b3480156105e057600080fd5b506102ce6105ef366004614c41565b611aa2565b34801561060057600080fd5b506102ce61060f366004614cb7565b611ae6565b34801561062057600080fd5b5061040c611c30565b34801561063557600080fd5b50610439611c3a565b34801561064a57600080fd5b5061065e610659366004614ce3565b611c44565b60405161034f93929190614d2f565b34801561067957600080fd5b506102ce610688366004614d67565b611ce2565b34801561069957600080fd5b5060408051808201909152600481527f7245544800000000000000000000000000000000000000000000000000000000602082015261039a565b3480156106df57600080fd5b50610439611d8a565b3480156106f457600080fd5b506103c7610703366004614ae3565b611d94565b34801561071457600080fd5b50610439603081565b34801561072957600080fd5b50610342610738366004614dd8565b611eb6565b34801561074957600080fd5b506102ce610758366004614ce3565b612031565b34801561076957600080fd5b506102ce6107783660046149d3565b612102565b34801561078957600080fd5b50610439610798366004614e1a565b61216a565b3480156107a957600080fd5b506102ce6107b8366004614ce3565b61217d565b3480156107c957600080fd5b50610439620186a081565b6102ce6107e2366004614c41565b61224e565b3480156107f357600080fd5b506102ce610802366004614e4d565b612257565b34801561081357600080fd5b50610439610822366004614c41565b61230c565b3461085e576040517f95b66fe900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108683334612317565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b838360006108ee83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b805490915060ff166109205782826040516319bd4a4960e31b8152600401610917929190614e77565b60405180910390fd5b60028101546001600160a01b0316331480159061095657506109406123c2565b6001600160a01b0316336001600160a01b031614155b156109765760405163472511eb60e11b8152336004820152602401610917565b60006109b788888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b9050846109d7576040516379b348ff60e11b815260040160405180910390fd5b60005b85811015610c4d5760008787838181106109f6576109f6614ea6565b9050602002013590508260040154811015610a3d576040517f84ebe01c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600501548110610a7a576040517f17df2d8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082118015610ac457508787610a92600185614ed2565b818110610aa157610aa1614ea6565b90506020020135888884818110610aba57610aba614ea6565b9050602002013510155b15610afb576040517fc9ee26af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018460050154610b0e9190614ed2565b9050600080610b548d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508792506123cc915050565b91509150610b9c8d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525088925086915085905061256f565b610c1c8d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508893509150610bdd9050565b6040519080825280601f01601f191660200182016040528015610c07576020820181803683370190505b5060408051600081526020810190915261256f565b6001866005016000828254610c319190614ed2565b925050819055505050505080610c4690614eff565b90506109da565b508787604051610c5e929190614f1a565b60405190819003812060058301548252907f6ce7e7097966f2c672210ee51438cb29a8d2ba7e98ae03f35216a92cdeb49e1a9060200160405180910390a25050505050505050565b610cf16040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b610cfa826125f3565b6040805160e08101909152815460ff1615158152600182018054919291602084019190610d2690614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5290614f2a565b8015610d9f5780601f10610d7457610100808354040283529160200191610d9f565b820191906000526020600020905b815481529060010190602001808311610d8257829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a09091015292915050565b600033610df6816117dc565b610e1e5760405163472511eb60e11b81526001600160a01b0382166004820152602401610917565b610e29338585612651565b6040518381526001600160a01b0385169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259060200160405180910390a3600191505b5092915050565b6000610e93610e8d6801bc16d674ec80000047614f5f565b836126a8565b905080610ecc576040517f81b5ad6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610ed8836126bd565b8151919350915080610f16576040517f800526b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83811115610f50576040517f5993bd5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8151818114610f8b576040517f8b97390c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610f9561294e565b905080610fce576040517f9be7315900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8381101561102857611016868281518110610fee57610fee614ea6565b602002602001015186838151811061100857611008614ea6565b602002602001015184612982565b611021600182614f81565b9050610fd1565b5061104483611035612e1d565b61103f9190614f81565b612e4d565b50505050505050565b60006110576123c2565b905090565b6000611057612e80565b6000611057612eec565b60008361107c816117dc565b6110a45760405163472511eb60e11b81526001600160a01b0382166004820152602401610917565b836110ae816117dc565b6110d65760405163472511eb60e11b81526001600160a01b0382166004820152602401610917565b836110f4576040516336b216db60e21b815260040160405180910390fd5b6001600160a01b03861633146111815760006111108733612f21565b90508481101561116b576040517f7b936de30000000000000000000000000000000000000000000000000000000081526001600160a01b03881660048201523360248201526044810182905260648101869052608401610917565b61117f873361117a8885614ed2565b612651565b505b8361118b87612f79565b10156111aa576040516351940b3960e11b815260040160405180910390fd5b60006111b585612f8c565b90506111d487826111c58a612fc4565b6111cf9190614ed2565b613012565b6111ec86826111e289612fc4565b6111cf9190614f81565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8760405161123191815260200190565b60405180910390a35060019695505050505050565b600061105761305e565b6112586123c2565b6001600160a01b0316336001600160a01b03161461128b5760405163472511eb60e11b8152336004820152602401610917565b620186a08111156112af5760405163a9cb9e0d60e01b815260040160405180910390fd5b6112b88161308e565b50565b828260006112fe83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b805490915060ff166113275782826040516319bd4a4960e31b8152600401610917929190614e77565b60028101546001600160a01b0316331480159061135d57506113476123c2565b6001600160a01b0316336001600160a01b031614155b1561137d5760405163472511eb60e11b8152336004820152602401610917565b60006113be87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b60028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0388161790556040519091506113fb9088908890614f1a565b60405190819003812060028301546001600160a01b03168252907f2a79b0e21c422c38aba60950dd3b670da559b7aee80642dca948cb14b649b6409060200160405180910390a250505050505050565b8686600061148e83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b805490915060ff166114b75782826040516319bd4a4960e31b8152600401610917929190614e77565b60028101546001600160a01b031633148015906114ed57506114d76123c2565b6001600160a01b0316336001600160a01b031614155b1561150d5760405163472511eb60e11b8152336004820152602401610917565b8761152b576040516379b348ff60e11b815260040160405180910390fd5b611536603089614f99565b861461156e576040517fa1f0af9c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611579606089614f99565b84146115b1576040517f4be6321b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006115f28b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b905060005b8981101561175d57600061164f8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611648925060309150869050614f99565b60306130bc565b905060006116a189898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061169a925060609150879050614f99565b60606130bc565b905061174a8460010180546116b590614f2a565b80601f01602080910402602001604051908101604052809291908181526020018280546116e190614f2a565b801561172e5780601f106117035761010080835404028352916020019161172e565b820191906000526020600020905b81548152906001019060200180831161171157829003601f168201915b50505050508486600501546117439190614f81565b848461256f565b50508061175690614eff565b90506115f7565b50888160050160008282546117729190614f81565b9091555050604051611787908c908c90614f1a565b60405190819003812060058301548252907fe3dea2a5c008e21e8a4cb8a701e8cdcd1e76fca5b0d3dd84efb627efd98a65489060200160405180910390a25050505050505050505050565b60006110576131e4565b60006117e7826131ee565b92915050565b6117f56123c2565b6001600160a01b0316336001600160a01b0316146118285760405163472511eb60e11b8152336004820152602401610917565b61186783838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506131f992505050565b1515600114156118a75782826040517f832eebc5000000000000000000000000000000000000000000000000000000008152600401610917929190614e77565b60006040518060e0016040528060011515815260200185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b0385166020808401919091526040808401839052606084018390526080840183905260a0909301919091528151601f8701829004820281018201909252858252919250611965918690869081908401838280828437600092019190915250859250613204915050565b8383604051611975929190614f1a565b60408051918290038220908301516001600160a01b03168252907f0e2d58c789f6f1bb0b359c2e1b85c3c936d51937cb163a41dafeaf18fe73a391906020015b60405180910390a250505050565b6119cb6123c2565b6001600160a01b0316336001600160a01b0316146119fe5760405163472511eb60e11b8152336004820152602401610917565b6000611a3f84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b805460ff1916831515178155604051909150611a5e9085908590614f1a565b6040519081900381208315158252907f458f926d278d74d1bd8828825226fc69397e66cd6a6611896f996818fdfb89e9906020016119b5565b60006117e782612f79565b611aaa6123c2565b6001600160a01b0316336001600160a01b031614611add5760405163472511eb60e11b8152336004820152602401610917565b6112b8816133e9565b611aee613417565b6001600160a01b0316336001600160a01b031614611b215760405163472511eb60e11b8152336004820152602401610917565b611b29612e1d565b831115611b745782611b39612e1d565b6040517f76179ac500000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610917565b6000611b7e61305e565b90506000611b8a613447565b611b949086614ed2565b9050611b9f84613477565b611ba8856134a5565b611bb1836134d3565b83821015611be857611be8611bcf826801bc16d674ec800000614f99565b611bd98487614ed2565b611be39190614ed2565b613501565b60408051868152602081018690529081018490527f98e488f5118fc11ab540716c2afc4e440c0a892d27a4efef33db94b4f9da65899060600160405180910390a15050505050565b6000611057613417565b6000611057612e1d565b6060806000611c8a86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892506123cc915050565b8093508194505050611cd186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b600401549296919550509111159150565b6000611cec613709565b8114611d365780611cfb613709565b6040517fe7e93b3800000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610917565b611d49611d44826001614f81565b613739565b611d5286613767565b611d5b84613770565b611d648361308e565b611d6d8261379e565b611d7788886137cc565b611d80856137de565b5050505050505050565b6000611057613447565b600033611da0816117dc565b611dc85760405163472511eb60e11b81526001600160a01b0382166004820152602401610917565b83611dd2816117dc565b611dfa5760405163472511eb60e11b81526001600160a01b0382166004820152602401610917565b83611e18576040516336b216db60e21b815260040160405180910390fd5b83611e2233612f79565b1015611e41576040516351940b3960e11b815260040160405180910390fd5b6000611e4c85612f8c565b9050611e5c33826111c533612fc4565b611e6a86826111e289612fc4565b6040518581526001600160a01b0387169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600195945050505050565b611f016040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b611f4083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b6040805160e08101909152815460ff1615158152600182018054919291602084019190611f6c90614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054611f9890614f2a565b8015611fe55780601f10611fba57610100808354040283529160200191611fe5565b820191906000526020600020905b815481529060010190602001808311611fc857829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a0909101529392505050565b6120396123c2565b6001600160a01b0316336001600160a01b03161461206c5760405163472511eb60e11b8152336004820152602401610917565b60006120ad84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b600681018390556040519091506120c79085908590614f1a565b60405190819003812060068301548252907fc6c0f7b030ee7b8b20a7456531336e342a01dcaca6e074f62e58ad5db6cd118b906020016119b5565b61210a6123c2565b6001600160a01b0316336001600160a01b03161461213d5760405163472511eb60e11b8152336004820152602401610917565b620186a08111156121615760405163a9cb9e0d60e01b815260040160405180910390fd5b6112b88161379e565b60006121768383612f21565b9392505050565b6121856123c2565b6001600160a01b0316336001600160a01b0316146121b85760405163472511eb60e11b8152336004820152602401610917565b60006121f984848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b600381018390556040519091506122139085908590614f1a565b60405190819003812060038301548252907f6bc3f1ad37be0adc0c929a93391e00f8f9f1598149a0d7b1c29fceb0ccd96511906020016119b5565b6112b881610827565b61225f6137e7565b6001600160a01b0316336001600160a01b0316141580156122995750612283613817565b6001600160a01b0316336001600160a01b031614155b156122b95760405163472511eb60e11b8152336004820152602401610917565b6122c38282613847565b816001600160a01b03167fedee26db98ce11482341fef006b583a640d7cc7557c0e1bea8abe8a959223c9582604051612300911515815260200190565b60405180910390a25050565b60006117e782612fc4565b612320826131ee565b6123485760405163472511eb60e11b81526001600160a01b0383166004820152602401610917565b61235282826138a2565b5050565b60008061238460017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed2565b905060006123918461390a565b825490915082908190839081106123aa576123aa614ea6565b90600052602060002090600702019350505050919050565b6000611057613817565b60608060006123fc60017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614ed2565b60405190915081906000908290612414908990614fb8565b9081526020016040518091039020600087815260200190815260200160002090506124cb81805461244490614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461247090614f2a565b80156124bd5780601f10612492576101008083540402835291602001916124bd565b820191906000526020600020905b8154815290600101906020018083116124a057829003601f168201915b5050505050600060306130bc565b94506125638180546124dc90614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461250890614f2a565b80156125555780601f1061252a57610100808354040283529160200191612555565b820191906000526020600020905b81548152906001019060200180831161253857829003601f168201915b5050505050603060606130bc565b93505050509250929050565b600061257b83836139c3565b905060006125aa60017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614ed2565b6040519091508190839082906125c1908a90614fb8565b908152602001604051809103902060008881526020019081526020016000209080519060200190611d80929190614857565b60008061262160017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed2565b8054909150819081908590811061263a5761263a614ea6565b906000526020600020906007020192505050919050565b600061267e60017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847614ed2565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b60008183116126b75782612176565b50919050565b60608060006126ca613a40565b9050805160001415612738576040805160008082526020820190925290612701565b60608152602001906001900390816126ec5790505b50604080516000808252602082019092529061272d565b60608152602001906001900390816127185790505b509250925050915091565b600060015b825181101561279c5782828151811061275857612758614ea6565b60200260200101516080015183828151811061277657612776614ea6565b602002602001015160800151101561278c578091505b61279581614eff565b905061273d565b5060008282815181106127b1576127b1614ea6565b6020026020010151608001516128018484815181106127d2576127d2614ea6565b602002602001015160a001518585815181106127f0576127f0614ea6565b6020026020010151606001516126a8565b61280b9190614ed2565b9050600061283584848151811061282457612824614ea6565b602002602001015160200151612356565b90508682106128aa5761288384848151811061285357612853614ea6565b60200260200101516020015185858151811061287157612871614ea6565b60200260200101516080015189613dd2565b80965081975050508681600401600082825461289f9190614f81565b909155506129459050565b6128ef8484815181106128bf576128bf614ea6565b6020026020010151602001518585815181106128dd576128dd614ea6565b60200260200101516080015184613dd2565b80965081975050508181600401600082825461290b9190614f81565b909155506000905080612926612921858b614ed2565b6126bd565b915091506129348883613ff7565b97506129408782613ff7565b965050505b50505050915091565b600061105761297e60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42614ed2565b5490565b60308351146129bd576040517f50cb553000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608251146129f8576040517f408ebd3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6801bc16d674ec8000006000612a12633b9aca0083614f5f565b905081612a2382633b9aca00614f99565b14612a3057612a30614fd4565b60006002612a3d8761410a565b604051612a4a9190614fb8565b602060405180830381855afa158015612a67573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612a8a9190614fea565b90506000600280612a9e88600060406130bc565b604051612aab9190614fb8565b602060405180830381855afa158015612ac8573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612aeb9190614fea565b6002612b0b612b068a6040612b01816060614ed2565b6130bc565b61410a565b604051612b189190614fb8565b602060405180830381855afa158015612b35573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612b589190614fea565b60408051602081019390935282015260600160408051601f1981840301815290829052612b8491614fb8565b602060405180830381855afa158015612ba1573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612bc49190614fea565b905060006002808488604051602001612be7929190918252602082015260400190565b60408051601f1981840301815290829052612c0191614fb8565b602060405180830381855afa158015612c1e573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612c419190614fea565b6002612c4c87614193565b604080516020810192909252810186905260600160408051601f1981840301815290829052612c7a91614fb8565b602060405180830381855afa158015612c97573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612cba9190614fea565b60408051602081019390935282015260600160408051601f1981840301815290829052612ce691614fb8565b602060405180830381855afa158015612d03573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612d269190614fea565b90506000612d348647614ed2565b9050612d3e6141d9565b6001600160a01b03166322895118878b8a604051602001612d6191815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b8152600401612d919493929190615003565b6000604051808303818588803b158015612daa57600080fd5b505af1158015612dbe573d6000803e3d6000fd5b5050505050804714612e125760405162461bcd60e51b815260206004820152601b60248201527f455850454354494e475f4445504f5349545f544f5f48415050454e00000000006044820152606401610917565b505050505050505050565b600061105761297e60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8614ed2565b6112b8612e7b60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8614ed2565b829055565b600080612e8b613447565b90506000612e97612e1d565b905080821015612ee3576801bc16d674ec800000612eb58383614ed2565b612ebf9190614f99565b47612ec861305e565b612ed29190614f81565b612edc9190614f81565b9250505090565b47612ed261305e565b600080612f1a60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed2565b5492915050565b600080612f4f60017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847614ed2565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b60006117e7612f8783612fc4565b614209565b600080612f97612e80565b905080612fa75750600092915050565b80612fb061422d565b612fba9085614f99565b6121769190614f5f565b600080612ff260017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838614ed2565b6001600160a01b0390931660009081526020939093525050604090205490565b600061303f60017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838614ed2565b6001600160a01b03909316600090815260209390935250604090912055565b600061105761297e60017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e60900614ed2565b6112b8612e7b60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37614ed2565b6060816130ca81601f614f81565b10156131185760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610917565b6131228284614f81565b845110156131725760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610917565b60608215801561319157604051915060008252602082016040526131db565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156131ca5780518352602092830192016131b2565b5050858452601f01601f1916604052505b50949350505050565b600061105761422d565b60006117e78261425d565b60006117e7826142ae565b600061320f836142ae565b9050600061323e60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed2565b905080826133075780546001808201835560008381526020908190208751600790940201805460ff191693151593909317835586810151805188949361328993908501920190614857565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c090910151600690910155835181546133029187916132fd90600190614ed2565b61430c565b6133e2565b60006133128661390a565b90508482600001828154811061332a5761332a614ea6565b6000918252602091829020835160079290920201805460ff1916911515919091178155828201518051919261336792600185019290910190614857565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c09091015160069091015584511515841515146133e0576133e08686600001518361430c565b505b5050505050565b6112b8612e7b60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb614ed2565b600061105761297e60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb614ed2565b600061105761297e60017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a37614ed2565b6112b8612e7b60017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e60900614ed2565b6112b8612e7b60017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a37614ed2565b6112b8612e7b60017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb529614ed2565b600061350b614390565b905060006135198284614f99565b620186a0613525612e80565b61352f9190614f99565b6135399190614ed2565b826135426131e4565b61354c9086614f99565b6135569190614f99565b6135609190614f5f565b90506000620186a06135706143c0565b61357a9084614f99565b6135849190614f5f565b905060006135906143f0565b90506000815167ffffffffffffffff8111156135ae576135ae614ee9565b6040519080825280602002602001820160405280156135d7578160200160208202803683370190505b5090506000805b835181101561366c5760008482815181106135fb576135fb614ea6565b602002602001015160c0015185838151811061361957613619614ea6565b60200260200101516080015161362f9190614ed2565b905061363b8184614f81565b92508084838151811061365057613650614ea6565b60209081029190910101525061366581614eff565b90506135de565b5080156136ef57600061367f8286614f5f565b905060005b83518110156136e8576136d88582815181106136a2576136a2614ea6565b602002602001015160400151838684815181106136c1576136c1614ea6565b60200260200101516136d39190614f99565b6146a4565b6136e181614eff565b9050613684565b50506136f4565b600093505b6110446136ff614712565b6136d38688614ed2565b600061105761297e60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd614ed2565b6112b8612e7b60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd614ed2565b6112b881614742565b6112b8612e7b60017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa3614ed2565b6112b8612e7b60017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a8614ed2565b6137d582614770565b6123528161479e565b6112b8816147cc565b600061105761297e60017fefd873a3b5d595267ecb9c00570927f2fad9989039b29e0106506210ca7091a2614ed2565b600061105761297e60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113614ed2565b600061387460017f440f50bb57f26ec9d1264791d63a99883c71f19b2fd663bfa653c1198627e87b614ed2565b6001600160a01b03939093166000908152602093909352506040909120805460ff1916911515919091179055565b60006138ac612e80565b90506000826138b9612e80565b6138c39190614ed2565b9050806138d9576138d484836146a4565b613904565b6000816138e46131e4565b6138ee9086614f99565b6138f89190614f5f565b90506133e285826146a4565b50505050565b60008061393860017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614ed2565b6040519091508190819061394d908690614fb8565b9081526040519081900360200190205460ff1661399857836040517f34eddfcf0000000000000000000000000000000000000000000000000000000081526004016109179190614ab4565b60405181906139a8908690614fb8565b90815260200160405180910390206001015492505050919050565b6060806040519050835180825260208201818101602087015b818310156139f45780518352602092830192016139dc565b50855184518101855292509050808201602086015b81831015613a21578051835260209283019201613a09565b508651929092011591909101601f01601f191660405250905092915050565b60606000613a6f60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed2565b9050806000805b8254811015613bb757613b96836000018281548110613a9757613a97614ea6565b60009182526020918290206040805160e08101909152600790920201805460ff16151582526001810180549293919291840191613ad390614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054613aff90614f2a565b8015613b4c5780601f10613b2157610100808354040283529160200191613b4c565b820191906000526020600020905b815481529060010190602001808311613b2f57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a0909101526147fa565b15613ba757613ba482614eff565b91505b613bb081614eff565b9050613a76565b5060008167ffffffffffffffff811115613bd357613bd3614ee9565b604051908082528060200260200182016040528015613c4f57816020015b613c3c6040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b815260200190600190039081613bf15790505b5090506000805b8454811015613dc757613c77856000018281548110613a9757613a97614ea6565b15613db757846000018181548110613c9157613c91614ea6565b60009182526020918290206040805160e08101909152600790920201805460ff16151582526001810180549293919291840191613ccd90614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054613cf990614f2a565b8015613d465780601f10613d1b57610100808354040283529160200191613d46565b820191906000526020600020905b815481529060010190602001808311613d2957829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a0909101528351849084908110613d9f57613d9f614ea6565b602002602001018190525081613db490614eff565b91505b613dc081614eff565b9050613c56565b509095945050505050565b6060808267ffffffffffffffff811115613dee57613dee614ee9565b604051908082528060200260200182016040528015613e2157816020015b6060815260200190600190039081613e0c5790505b5091508267ffffffffffffffff811115613e3d57613e3d614ee9565b604051908082528060200260200182016040528015613e7057816020015b6060815260200190600190039081613e5b5790505b5090506000613ea060017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614ed2565b905080855b613eaf8688614f81565b811015613fec5760008260000189604051613eca9190614fb8565b908152602001604051809103902060008381526020019081526020016000208054613ef490614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054613f2090614f2a565b8015613f6d5780601f10613f4257610100808354040283529160200191613f6d565b820191906000526020600020905b815481529060010190602001808311613f5057829003601f168201915b50505050509050613f8181600060306130bc565b86613f8c8a85614ed2565b81518110613f9c57613f9c614ea6565b6020026020010181905250613fb481603060606130bc565b85613fbf8a85614ed2565b81518110613fcf57613fcf614ea6565b60200260200101819052505080613fe590614eff565b9050613ea5565b505050935093915050565b6060815183516140079190614f81565b67ffffffffffffffff81111561401f5761401f614ee9565b60405190808252806020026020018201604052801561405257816020015b606081526020019060019003908161403d5790505b50905060005b83518110156140a95783818151811061407357614073614ea6565b602002602001015182828151811061408d5761408d614ea6565b6020026020010181905250806140a290614eff565b9050614058565b5060005b8251811015610e6e578281815181106140c8576140c8614ea6565b6020026020010151828551836140de9190614f81565b815181106140ee576140ee614ea6565b60200260200101819052508061410390614eff565b90506140ad565b6060602082511015801561412057506040825111155b61412c5761412c614fd4565b81516040141561413a575090565b604080516020808252818301909252600091602082018180368337019050509050600060208201528251602014156141765761217683826139c3565b6121768361418e83600087516040612b019190614ed2565b6139c3565b600081815b60088110156141c157600892831b60ff831617929190911c906141ba81614eff565b9050614198565b5080156141d0576141d0614fd4565b5060c01b919050565b600061105761297e60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260614ed2565b60008061421461422d565b9050806142245750600092915050565b80612fb0612e80565b600061105761297e60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b614ed2565b60008061428b60017f440f50bb57f26ec9d1264791d63a99883c71f19b2fd663bfa653c1198627e87b614ed2565b6001600160a01b0390931660009081526020939093525050604090205460ff1690565b6000806142dc60017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614ed2565b604051909150819081906142f1908690614fb8565b9081526040519081900360200190205460ff16949350505050565b600061433960017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614ed2565b604080518082018252851515815260208101859052905191925082918290614362908890614fb8565b908152604051602091819003820190208251815460ff19169015151781559101516001909101555050505050565b600061105761297e60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37614ed2565b600061105761297e60017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a8614ed2565b6060600061441f60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed2565b9050806000805b825481101561447e5782600001818154811061444457614444614ea6565b600091825260209091206007909102015460ff1615156001141561446e5761446b82614eff565b91505b61447781614eff565b9050614426565b5060008167ffffffffffffffff81111561449a5761449a614ee9565b60405190808252806020026020018201604052801561451657816020015b6145036040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816144b85790505b5090506000805b8454811015613dc75784600001818154811061453b5761453b614ea6565b600091825260209091206007909102015460ff161515600114156146945784600001818154811061456e5761456e614ea6565b60009182526020918290206040805160e08101909152600790920201805460ff161515825260018101805492939192918401916145aa90614f2a565b80601f01602080910402602001604051908101604052809291908181526020018280546145d690614f2a565b80156146235780601f106145f857610100808354040283529160200191614623565b820191906000526020600020905b81548152906001019060200180831161460657829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a090910152835184908490811061467c5761467c614ea6565b60200260200101819052508161469190614eff565b91505b61469d81614eff565b905061451d565b6146bf816146b061422d565b6146ba9190614f81565b614829565b6146cd82826111e285612fc4565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600061105761297e60017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa3614ed2565b6112b8612e7b60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113614ed2565b6112b8612e7b60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260614ed2565b6112b8612e7b60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42614ed2565b6112b8612e7b60017fefd873a3b5d595267ecb9c00570927f2fad9989039b29e0106506210ca7091a2614ed2565b80516000908015614812575081608001518260a00151115b80156117e757505060808101516060909101511190565b6112b8612e7b60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b614ed2565b82805461486390614f2a565b90600052602060002090601f01602090048101928261488557600085556148cb565b82601f1061489e57805160ff19168380011785556148cb565b828001600101855582156148cb579182015b828111156148cb5782518255916020019190600101906148b0565b506148d79291506148db565b5090565b5b808211156148d757600081556001016148dc565b60008083601f84011261490257600080fd5b50813567ffffffffffffffff81111561491a57600080fd5b60208301915083602082850101111561493257600080fd5b9250929050565b6000806000806040858703121561494f57600080fd5b843567ffffffffffffffff8082111561496757600080fd5b614973888389016148f0565b9096509450602087013591508082111561498c57600080fd5b818701915087601f8301126149a057600080fd5b8135818111156149af57600080fd5b8860208260051b85010111156149c457600080fd5b95989497505060200194505050565b6000602082840312156149e557600080fd5b5035919050565b60005b83811015614a075781810151838201526020016149ef565b838111156139045750506000910152565b60008151808452614a308160208601602086016149ec565b601f01601f19169290920160200192915050565b602081528151151560208201526000602083015160e06040840152614a6d610100840182614a18565b90506001600160a01b03604085015116606084015260608401516080840152608084015160a084015260a084015160c084015260c084015160e08401528091505092915050565b6020815260006121766020830184614a18565b80356001600160a01b0381168114614ade57600080fd5b919050565b60008060408385031215614af657600080fd5b614aff83614ac7565b946020939093013593505050565b600080600060608486031215614b2257600080fd5b614b2b84614ac7565b9250614b3960208501614ac7565b9150604084013590509250925092565b600080600060408486031215614b5e57600080fd5b833567ffffffffffffffff811115614b7557600080fd5b614b81868287016148f0565b9094509250614b94905060208501614ac7565b90509250925092565b60008060008060008060006080888a031215614bb857600080fd5b873567ffffffffffffffff80821115614bd057600080fd5b614bdc8b838c016148f0565b909950975060208a0135965060408a0135915080821115614bfc57600080fd5b614c088b838c016148f0565b909650945060608a0135915080821115614c2157600080fd5b50614c2e8a828b016148f0565b989b979a50959850939692959293505050565b600060208284031215614c5357600080fd5b61217682614ac7565b80358015158114614ade57600080fd5b600080600060408486031215614c8157600080fd5b833567ffffffffffffffff811115614c9857600080fd5b614ca4868287016148f0565b9094509250614b94905060208501614c5c565b600080600060608486031215614ccc57600080fd5b505081359360208301359350604090920135919050565b600080600060408486031215614cf857600080fd5b833567ffffffffffffffff811115614d0f57600080fd5b614d1b868287016148f0565b909790965060209590950135949350505050565b606081526000614d426060830186614a18565b8281036020840152614d548186614a18565b9150508215156040830152949350505050565b600080600080600080600060e0888a031215614d8257600080fd5b614d8b88614ac7565b965060208801359550614da060408901614ac7565b9450614dae60608901614ac7565b9350614dbc60808901614ac7565b925060a0880135915060c0880135905092959891949750929550565b60008060208385031215614deb57600080fd5b823567ffffffffffffffff811115614e0257600080fd5b614e0e858286016148f0565b90969095509350505050565b60008060408385031215614e2d57600080fd5b614e3683614ac7565b9150614e4460208401614ac7565b90509250929050565b60008060408385031215614e6057600080fd5b614e6983614ac7565b9150614e4460208401614c5c565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015614ee457614ee4614ebc565b500390565b634e487b7160e01b600052604160045260246000fd5b6000600019821415614f1357614f13614ebc565b5060010190565b8183823760009101908152919050565b600181811c90821680614f3e57607f821691505b602082108114156126b757634e487b7160e01b600052602260045260246000fd5b600082614f7c57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115614f9457614f94614ebc565b500190565b6000816000190483118215151615614fb357614fb3614ebc565b500290565b60008251614fca8184602087016149ec565b9190910192915050565b634e487b7160e01b600052600160045260246000fd5b600060208284031215614ffc57600080fd5b5051919050565b6080815260006150166080830187614a18565b82810360208401526150288187614a18565b9050828103604084015261503c8186614a18565b9150508260608301529594505050505056fea2646970667358221220c778fe16f41e2b6cb293d87f5bfd97c0b380ce688b62ac73542ac323014fa3d064736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106102bf5760003560e01c806370a082311161016e578063bf15af56116100cb578063e79f97721161007f578063f340fa0111610064578063f340fa01146107d4578063f59c3708146107e7578063f5eb42dc14610807576102d0565b8063e79f97721461079d578063ec342ad0146107bd576102d0565b8063d1ca94a7116100b0578063d1ca94a71461073d578063d56580ff1461075d578063dd62ed3e1461077d576102d0565b8063bf15af5614610708578063cfa2d2b71461071d576102d0565b8063946c70d71161012257806395d89b411161010757806395d89b411461068d5780639e3947f3146106d3578063a9059cbb146106e8576102d0565b8063946c70d71461063e578063950c44ec1461066d576102d0565b806380d4027e1161015357806380d4027e146105f4578063833b1fce1461061457806387f2adfb14610629576102d0565b806370a08231146105b45780637adbf973146105d4576102d0565b8063291206f61161021c5780633a98ef39116101d057806350545d2f116101b557806350545d2f1461055f57806350e07df41461057f578063540bc5ea1461059f576102d0565b80633a98ef391461052a5780633af32abf1461053f576102d0565b8063313ce56711610201578063313ce567146104d157806336bf3325146104ed57806337b3a0211461050a576102d0565b8063291206f6146104915780632f693226146104b1576102d0565b806316967407116102735780631a4a7c61116102585780631a4a7c611461044757806323b872dd1461045c578063252d6a341461047c576102d0565b806316967407146103f757806318160ddd14610424576102d0565b806306fdde03116102a457806306fdde0314610358578063095ea7b3146103a757806313d86aed146103d7576102d0565b8063043f0a541461030257806305f63c8a14610322576102d0565b366102d0576102ce6000610827565b005b6040517fae962d4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561030e57600080fd5b506102ce61031d366004614939565b6108ab565b34801561032e57600080fd5b5061034261033d3660046149d3565b610ca6565b60405161034f9190614a44565b60405180910390f35b34801561036457600080fd5b5060408051808201909152600581527f526976657200000000000000000000000000000000000000000000000000000060208201525b60405161034f9190614ab4565b3480156103b357600080fd5b506103c76103c2366004614ae3565b610dea565b604051901515815260200161034f565b3480156103e357600080fd5b506102ce6103f23660046149d3565b610e75565b34801561040357600080fd5b5061040c61104d565b6040516001600160a01b03909116815260200161034f565b34801561043057600080fd5b5061043961105c565b60405190815260200161034f565b34801561045357600080fd5b50610439611066565b34801561046857600080fd5b506103c7610477366004614b0d565b611070565b34801561048857600080fd5b50610439611246565b34801561049d57600080fd5b506102ce6104ac3660046149d3565b611250565b3480156104bd57600080fd5b506102ce6104cc366004614b49565b6112bb565b3480156104dd57600080fd5b506040516012815260200161034f565b3480156104f957600080fd5b506104396801bc16d674ec80000081565b34801561051657600080fd5b506102ce610525366004614b9d565b61144b565b34801561053657600080fd5b506104396117d2565b34801561054b57600080fd5b506103c761055a366004614c41565b6117dc565b34801561056b57600080fd5b506102ce61057a366004614b49565b6117ed565b34801561058b57600080fd5b506102ce61059a366004614c6c565b6119c3565b3480156105ab57600080fd5b50610439606081565b3480156105c057600080fd5b506104396105cf366004614c41565b611a97565b3480156105e057600080fd5b506102ce6105ef366004614c41565b611aa2565b34801561060057600080fd5b506102ce61060f366004614cb7565b611ae6565b34801561062057600080fd5b5061040c611c30565b34801561063557600080fd5b50610439611c3a565b34801561064a57600080fd5b5061065e610659366004614ce3565b611c44565b60405161034f93929190614d2f565b34801561067957600080fd5b506102ce610688366004614d67565b611ce2565b34801561069957600080fd5b5060408051808201909152600481527f7245544800000000000000000000000000000000000000000000000000000000602082015261039a565b3480156106df57600080fd5b50610439611d8a565b3480156106f457600080fd5b506103c7610703366004614ae3565b611d94565b34801561071457600080fd5b50610439603081565b34801561072957600080fd5b50610342610738366004614dd8565b611eb6565b34801561074957600080fd5b506102ce610758366004614ce3565b612031565b34801561076957600080fd5b506102ce6107783660046149d3565b612102565b34801561078957600080fd5b50610439610798366004614e1a565b61216a565b3480156107a957600080fd5b506102ce6107b8366004614ce3565b61217d565b3480156107c957600080fd5b50610439620186a081565b6102ce6107e2366004614c41565b61224e565b3480156107f357600080fd5b506102ce610802366004614e4d565b612257565b34801561081357600080fd5b50610439610822366004614c41565b61230c565b3461085e576040517f95b66fe900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108683334612317565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b838360006108ee83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b805490915060ff166109205782826040516319bd4a4960e31b8152600401610917929190614e77565b60405180910390fd5b60028101546001600160a01b0316331480159061095657506109406123c2565b6001600160a01b0316336001600160a01b031614155b156109765760405163472511eb60e11b8152336004820152602401610917565b60006109b788888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b9050846109d7576040516379b348ff60e11b815260040160405180910390fd5b60005b85811015610c4d5760008787838181106109f6576109f6614ea6565b9050602002013590508260040154811015610a3d576040517f84ebe01c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600501548110610a7a576040517f17df2d8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082118015610ac457508787610a92600185614ed2565b818110610aa157610aa1614ea6565b90506020020135888884818110610aba57610aba614ea6565b9050602002013510155b15610afb576040517fc9ee26af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018460050154610b0e9190614ed2565b9050600080610b548d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508792506123cc915050565b91509150610b9c8d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525088925086915085905061256f565b610c1c8d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508893509150610bdd9050565b6040519080825280601f01601f191660200182016040528015610c07576020820181803683370190505b5060408051600081526020810190915261256f565b6001866005016000828254610c319190614ed2565b925050819055505050505080610c4690614eff565b90506109da565b508787604051610c5e929190614f1a565b60405190819003812060058301548252907f6ce7e7097966f2c672210ee51438cb29a8d2ba7e98ae03f35216a92cdeb49e1a9060200160405180910390a25050505050505050565b610cf16040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b610cfa826125f3565b6040805160e08101909152815460ff1615158152600182018054919291602084019190610d2690614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5290614f2a565b8015610d9f5780601f10610d7457610100808354040283529160200191610d9f565b820191906000526020600020905b815481529060010190602001808311610d8257829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a09091015292915050565b600033610df6816117dc565b610e1e5760405163472511eb60e11b81526001600160a01b0382166004820152602401610917565b610e29338585612651565b6040518381526001600160a01b0385169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259060200160405180910390a3600191505b5092915050565b6000610e93610e8d6801bc16d674ec80000047614f5f565b836126a8565b905080610ecc576040517f81b5ad6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610ed8836126bd565b8151919350915080610f16576040517f800526b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83811115610f50576040517f5993bd5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8151818114610f8b576040517f8b97390c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610f9561294e565b905080610fce576040517f9be7315900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8381101561102857611016868281518110610fee57610fee614ea6565b602002602001015186838151811061100857611008614ea6565b602002602001015184612982565b611021600182614f81565b9050610fd1565b5061104483611035612e1d565b61103f9190614f81565b612e4d565b50505050505050565b60006110576123c2565b905090565b6000611057612e80565b6000611057612eec565b60008361107c816117dc565b6110a45760405163472511eb60e11b81526001600160a01b0382166004820152602401610917565b836110ae816117dc565b6110d65760405163472511eb60e11b81526001600160a01b0382166004820152602401610917565b836110f4576040516336b216db60e21b815260040160405180910390fd5b6001600160a01b03861633146111815760006111108733612f21565b90508481101561116b576040517f7b936de30000000000000000000000000000000000000000000000000000000081526001600160a01b03881660048201523360248201526044810182905260648101869052608401610917565b61117f873361117a8885614ed2565b612651565b505b8361118b87612f79565b10156111aa576040516351940b3960e11b815260040160405180910390fd5b60006111b585612f8c565b90506111d487826111c58a612fc4565b6111cf9190614ed2565b613012565b6111ec86826111e289612fc4565b6111cf9190614f81565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8760405161123191815260200190565b60405180910390a35060019695505050505050565b600061105761305e565b6112586123c2565b6001600160a01b0316336001600160a01b03161461128b5760405163472511eb60e11b8152336004820152602401610917565b620186a08111156112af5760405163a9cb9e0d60e01b815260040160405180910390fd5b6112b88161308e565b50565b828260006112fe83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b805490915060ff166113275782826040516319bd4a4960e31b8152600401610917929190614e77565b60028101546001600160a01b0316331480159061135d57506113476123c2565b6001600160a01b0316336001600160a01b031614155b1561137d5760405163472511eb60e11b8152336004820152602401610917565b60006113be87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b60028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0388161790556040519091506113fb9088908890614f1a565b60405190819003812060028301546001600160a01b03168252907f2a79b0e21c422c38aba60950dd3b670da559b7aee80642dca948cb14b649b6409060200160405180910390a250505050505050565b8686600061148e83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b805490915060ff166114b75782826040516319bd4a4960e31b8152600401610917929190614e77565b60028101546001600160a01b031633148015906114ed57506114d76123c2565b6001600160a01b0316336001600160a01b031614155b1561150d5760405163472511eb60e11b8152336004820152602401610917565b8761152b576040516379b348ff60e11b815260040160405180910390fd5b611536603089614f99565b861461156e576040517fa1f0af9c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611579606089614f99565b84146115b1576040517f4be6321b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006115f28b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b905060005b8981101561175d57600061164f8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611648925060309150869050614f99565b60306130bc565b905060006116a189898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061169a925060609150879050614f99565b60606130bc565b905061174a8460010180546116b590614f2a565b80601f01602080910402602001604051908101604052809291908181526020018280546116e190614f2a565b801561172e5780601f106117035761010080835404028352916020019161172e565b820191906000526020600020905b81548152906001019060200180831161171157829003601f168201915b50505050508486600501546117439190614f81565b848461256f565b50508061175690614eff565b90506115f7565b50888160050160008282546117729190614f81565b9091555050604051611787908c908c90614f1a565b60405190819003812060058301548252907fe3dea2a5c008e21e8a4cb8a701e8cdcd1e76fca5b0d3dd84efb627efd98a65489060200160405180910390a25050505050505050505050565b60006110576131e4565b60006117e7826131ee565b92915050565b6117f56123c2565b6001600160a01b0316336001600160a01b0316146118285760405163472511eb60e11b8152336004820152602401610917565b61186783838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506131f992505050565b1515600114156118a75782826040517f832eebc5000000000000000000000000000000000000000000000000000000008152600401610917929190614e77565b60006040518060e0016040528060011515815260200185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b0385166020808401919091526040808401839052606084018390526080840183905260a0909301919091528151601f8701829004820281018201909252858252919250611965918690869081908401838280828437600092019190915250859250613204915050565b8383604051611975929190614f1a565b60408051918290038220908301516001600160a01b03168252907f0e2d58c789f6f1bb0b359c2e1b85c3c936d51937cb163a41dafeaf18fe73a391906020015b60405180910390a250505050565b6119cb6123c2565b6001600160a01b0316336001600160a01b0316146119fe5760405163472511eb60e11b8152336004820152602401610917565b6000611a3f84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b805460ff1916831515178155604051909150611a5e9085908590614f1a565b6040519081900381208315158252907f458f926d278d74d1bd8828825226fc69397e66cd6a6611896f996818fdfb89e9906020016119b5565b60006117e782612f79565b611aaa6123c2565b6001600160a01b0316336001600160a01b031614611add5760405163472511eb60e11b8152336004820152602401610917565b6112b8816133e9565b611aee613417565b6001600160a01b0316336001600160a01b031614611b215760405163472511eb60e11b8152336004820152602401610917565b611b29612e1d565b831115611b745782611b39612e1d565b6040517f76179ac500000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610917565b6000611b7e61305e565b90506000611b8a613447565b611b949086614ed2565b9050611b9f84613477565b611ba8856134a5565b611bb1836134d3565b83821015611be857611be8611bcf826801bc16d674ec800000614f99565b611bd98487614ed2565b611be39190614ed2565b613501565b60408051868152602081018690529081018490527f98e488f5118fc11ab540716c2afc4e440c0a892d27a4efef33db94b4f9da65899060600160405180910390a15050505050565b6000611057613417565b6000611057612e1d565b6060806000611c8a86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892506123cc915050565b8093508194505050611cd186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b600401549296919550509111159150565b6000611cec613709565b8114611d365780611cfb613709565b6040517fe7e93b3800000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610917565b611d49611d44826001614f81565b613739565b611d5286613767565b611d5b84613770565b611d648361308e565b611d6d8261379e565b611d7788886137cc565b611d80856137de565b5050505050505050565b6000611057613447565b600033611da0816117dc565b611dc85760405163472511eb60e11b81526001600160a01b0382166004820152602401610917565b83611dd2816117dc565b611dfa5760405163472511eb60e11b81526001600160a01b0382166004820152602401610917565b83611e18576040516336b216db60e21b815260040160405180910390fd5b83611e2233612f79565b1015611e41576040516351940b3960e11b815260040160405180910390fd5b6000611e4c85612f8c565b9050611e5c33826111c533612fc4565b611e6a86826111e289612fc4565b6040518581526001600160a01b0387169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600195945050505050565b611f016040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b611f4083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b6040805160e08101909152815460ff1615158152600182018054919291602084019190611f6c90614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054611f9890614f2a565b8015611fe55780601f10611fba57610100808354040283529160200191611fe5565b820191906000526020600020905b815481529060010190602001808311611fc857829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a0909101529392505050565b6120396123c2565b6001600160a01b0316336001600160a01b03161461206c5760405163472511eb60e11b8152336004820152602401610917565b60006120ad84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b600681018390556040519091506120c79085908590614f1a565b60405190819003812060068301548252907fc6c0f7b030ee7b8b20a7456531336e342a01dcaca6e074f62e58ad5db6cd118b906020016119b5565b61210a6123c2565b6001600160a01b0316336001600160a01b03161461213d5760405163472511eb60e11b8152336004820152602401610917565b620186a08111156121615760405163a9cb9e0d60e01b815260040160405180910390fd5b6112b88161379e565b60006121768383612f21565b9392505050565b6121856123c2565b6001600160a01b0316336001600160a01b0316146121b85760405163472511eb60e11b8152336004820152602401610917565b60006121f984848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235692505050565b600381018390556040519091506122139085908590614f1a565b60405190819003812060038301548252907f6bc3f1ad37be0adc0c929a93391e00f8f9f1598149a0d7b1c29fceb0ccd96511906020016119b5565b6112b881610827565b61225f6137e7565b6001600160a01b0316336001600160a01b0316141580156122995750612283613817565b6001600160a01b0316336001600160a01b031614155b156122b95760405163472511eb60e11b8152336004820152602401610917565b6122c38282613847565b816001600160a01b03167fedee26db98ce11482341fef006b583a640d7cc7557c0e1bea8abe8a959223c9582604051612300911515815260200190565b60405180910390a25050565b60006117e782612fc4565b612320826131ee565b6123485760405163472511eb60e11b81526001600160a01b0383166004820152602401610917565b61235282826138a2565b5050565b60008061238460017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed2565b905060006123918461390a565b825490915082908190839081106123aa576123aa614ea6565b90600052602060002090600702019350505050919050565b6000611057613817565b60608060006123fc60017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614ed2565b60405190915081906000908290612414908990614fb8565b9081526020016040518091039020600087815260200190815260200160002090506124cb81805461244490614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461247090614f2a565b80156124bd5780601f10612492576101008083540402835291602001916124bd565b820191906000526020600020905b8154815290600101906020018083116124a057829003601f168201915b5050505050600060306130bc565b94506125638180546124dc90614f2a565b80601f016020809104026020016040519081016040528092919081815260200182805461250890614f2a565b80156125555780601f1061252a57610100808354040283529160200191612555565b820191906000526020600020905b81548152906001019060200180831161253857829003601f168201915b5050505050603060606130bc565b93505050509250929050565b600061257b83836139c3565b905060006125aa60017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614ed2565b6040519091508190839082906125c1908a90614fb8565b908152602001604051809103902060008881526020019081526020016000209080519060200190611d80929190614857565b60008061262160017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed2565b8054909150819081908590811061263a5761263a614ea6565b906000526020600020906007020192505050919050565b600061267e60017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847614ed2565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b60008183116126b75782612176565b50919050565b60608060006126ca613a40565b9050805160001415612738576040805160008082526020820190925290612701565b60608152602001906001900390816126ec5790505b50604080516000808252602082019092529061272d565b60608152602001906001900390816127185790505b509250925050915091565b600060015b825181101561279c5782828151811061275857612758614ea6565b60200260200101516080015183828151811061277657612776614ea6565b602002602001015160800151101561278c578091505b61279581614eff565b905061273d565b5060008282815181106127b1576127b1614ea6565b6020026020010151608001516128018484815181106127d2576127d2614ea6565b602002602001015160a001518585815181106127f0576127f0614ea6565b6020026020010151606001516126a8565b61280b9190614ed2565b9050600061283584848151811061282457612824614ea6565b602002602001015160200151612356565b90508682106128aa5761288384848151811061285357612853614ea6565b60200260200101516020015185858151811061287157612871614ea6565b60200260200101516080015189613dd2565b80965081975050508681600401600082825461289f9190614f81565b909155506129459050565b6128ef8484815181106128bf576128bf614ea6565b6020026020010151602001518585815181106128dd576128dd614ea6565b60200260200101516080015184613dd2565b80965081975050508181600401600082825461290b9190614f81565b909155506000905080612926612921858b614ed2565b6126bd565b915091506129348883613ff7565b97506129408782613ff7565b965050505b50505050915091565b600061105761297e60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42614ed2565b5490565b60308351146129bd576040517f50cb553000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608251146129f8576040517f408ebd3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6801bc16d674ec8000006000612a12633b9aca0083614f5f565b905081612a2382633b9aca00614f99565b14612a3057612a30614fd4565b60006002612a3d8761410a565b604051612a4a9190614fb8565b602060405180830381855afa158015612a67573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612a8a9190614fea565b90506000600280612a9e88600060406130bc565b604051612aab9190614fb8565b602060405180830381855afa158015612ac8573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612aeb9190614fea565b6002612b0b612b068a6040612b01816060614ed2565b6130bc565b61410a565b604051612b189190614fb8565b602060405180830381855afa158015612b35573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612b589190614fea565b60408051602081019390935282015260600160408051601f1981840301815290829052612b8491614fb8565b602060405180830381855afa158015612ba1573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612bc49190614fea565b905060006002808488604051602001612be7929190918252602082015260400190565b60408051601f1981840301815290829052612c0191614fb8565b602060405180830381855afa158015612c1e573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612c419190614fea565b6002612c4c87614193565b604080516020810192909252810186905260600160408051601f1981840301815290829052612c7a91614fb8565b602060405180830381855afa158015612c97573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612cba9190614fea565b60408051602081019390935282015260600160408051601f1981840301815290829052612ce691614fb8565b602060405180830381855afa158015612d03573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612d269190614fea565b90506000612d348647614ed2565b9050612d3e6141d9565b6001600160a01b03166322895118878b8a604051602001612d6191815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b8152600401612d919493929190615003565b6000604051808303818588803b158015612daa57600080fd5b505af1158015612dbe573d6000803e3d6000fd5b5050505050804714612e125760405162461bcd60e51b815260206004820152601b60248201527f455850454354494e475f4445504f5349545f544f5f48415050454e00000000006044820152606401610917565b505050505050505050565b600061105761297e60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8614ed2565b6112b8612e7b60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8614ed2565b829055565b600080612e8b613447565b90506000612e97612e1d565b905080821015612ee3576801bc16d674ec800000612eb58383614ed2565b612ebf9190614f99565b47612ec861305e565b612ed29190614f81565b612edc9190614f81565b9250505090565b47612ed261305e565b600080612f1a60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed2565b5492915050565b600080612f4f60017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847614ed2565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b60006117e7612f8783612fc4565b614209565b600080612f97612e80565b905080612fa75750600092915050565b80612fb061422d565b612fba9085614f99565b6121769190614f5f565b600080612ff260017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838614ed2565b6001600160a01b0390931660009081526020939093525050604090205490565b600061303f60017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838614ed2565b6001600160a01b03909316600090815260209390935250604090912055565b600061105761297e60017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e60900614ed2565b6112b8612e7b60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37614ed2565b6060816130ca81601f614f81565b10156131185760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610917565b6131228284614f81565b845110156131725760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610917565b60608215801561319157604051915060008252602082016040526131db565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156131ca5780518352602092830192016131b2565b5050858452601f01601f1916604052505b50949350505050565b600061105761422d565b60006117e78261425d565b60006117e7826142ae565b600061320f836142ae565b9050600061323e60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed2565b905080826133075780546001808201835560008381526020908190208751600790940201805460ff191693151593909317835586810151805188949361328993908501920190614857565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c090910151600690910155835181546133029187916132fd90600190614ed2565b61430c565b6133e2565b60006133128661390a565b90508482600001828154811061332a5761332a614ea6565b6000918252602091829020835160079290920201805460ff1916911515919091178155828201518051919261336792600185019290910190614857565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c09091015160069091015584511515841515146133e0576133e08686600001518361430c565b505b5050505050565b6112b8612e7b60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb614ed2565b600061105761297e60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb614ed2565b600061105761297e60017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a37614ed2565b6112b8612e7b60017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e60900614ed2565b6112b8612e7b60017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a37614ed2565b6112b8612e7b60017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb529614ed2565b600061350b614390565b905060006135198284614f99565b620186a0613525612e80565b61352f9190614f99565b6135399190614ed2565b826135426131e4565b61354c9086614f99565b6135569190614f99565b6135609190614f5f565b90506000620186a06135706143c0565b61357a9084614f99565b6135849190614f5f565b905060006135906143f0565b90506000815167ffffffffffffffff8111156135ae576135ae614ee9565b6040519080825280602002602001820160405280156135d7578160200160208202803683370190505b5090506000805b835181101561366c5760008482815181106135fb576135fb614ea6565b602002602001015160c0015185838151811061361957613619614ea6565b60200260200101516080015161362f9190614ed2565b905061363b8184614f81565b92508084838151811061365057613650614ea6565b60209081029190910101525061366581614eff565b90506135de565b5080156136ef57600061367f8286614f5f565b905060005b83518110156136e8576136d88582815181106136a2576136a2614ea6565b602002602001015160400151838684815181106136c1576136c1614ea6565b60200260200101516136d39190614f99565b6146a4565b6136e181614eff565b9050613684565b50506136f4565b600093505b6110446136ff614712565b6136d38688614ed2565b600061105761297e60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd614ed2565b6112b8612e7b60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd614ed2565b6112b881614742565b6112b8612e7b60017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa3614ed2565b6112b8612e7b60017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a8614ed2565b6137d582614770565b6123528161479e565b6112b8816147cc565b600061105761297e60017fefd873a3b5d595267ecb9c00570927f2fad9989039b29e0106506210ca7091a2614ed2565b600061105761297e60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113614ed2565b600061387460017f440f50bb57f26ec9d1264791d63a99883c71f19b2fd663bfa653c1198627e87b614ed2565b6001600160a01b03939093166000908152602093909352506040909120805460ff1916911515919091179055565b60006138ac612e80565b90506000826138b9612e80565b6138c39190614ed2565b9050806138d9576138d484836146a4565b613904565b6000816138e46131e4565b6138ee9086614f99565b6138f89190614f5f565b90506133e285826146a4565b50505050565b60008061393860017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614ed2565b6040519091508190819061394d908690614fb8565b9081526040519081900360200190205460ff1661399857836040517f34eddfcf0000000000000000000000000000000000000000000000000000000081526004016109179190614ab4565b60405181906139a8908690614fb8565b90815260200160405180910390206001015492505050919050565b6060806040519050835180825260208201818101602087015b818310156139f45780518352602092830192016139dc565b50855184518101855292509050808201602086015b81831015613a21578051835260209283019201613a09565b508651929092011591909101601f01601f191660405250905092915050565b60606000613a6f60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed2565b9050806000805b8254811015613bb757613b96836000018281548110613a9757613a97614ea6565b60009182526020918290206040805160e08101909152600790920201805460ff16151582526001810180549293919291840191613ad390614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054613aff90614f2a565b8015613b4c5780601f10613b2157610100808354040283529160200191613b4c565b820191906000526020600020905b815481529060010190602001808311613b2f57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a0909101526147fa565b15613ba757613ba482614eff565b91505b613bb081614eff565b9050613a76565b5060008167ffffffffffffffff811115613bd357613bd3614ee9565b604051908082528060200260200182016040528015613c4f57816020015b613c3c6040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b815260200190600190039081613bf15790505b5090506000805b8454811015613dc757613c77856000018281548110613a9757613a97614ea6565b15613db757846000018181548110613c9157613c91614ea6565b60009182526020918290206040805160e08101909152600790920201805460ff16151582526001810180549293919291840191613ccd90614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054613cf990614f2a565b8015613d465780601f10613d1b57610100808354040283529160200191613d46565b820191906000526020600020905b815481529060010190602001808311613d2957829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a0909101528351849084908110613d9f57613d9f614ea6565b602002602001018190525081613db490614eff565b91505b613dc081614eff565b9050613c56565b509095945050505050565b6060808267ffffffffffffffff811115613dee57613dee614ee9565b604051908082528060200260200182016040528015613e2157816020015b6060815260200190600190039081613e0c5790505b5091508267ffffffffffffffff811115613e3d57613e3d614ee9565b604051908082528060200260200182016040528015613e7057816020015b6060815260200190600190039081613e5b5790505b5090506000613ea060017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614ed2565b905080855b613eaf8688614f81565b811015613fec5760008260000189604051613eca9190614fb8565b908152602001604051809103902060008381526020019081526020016000208054613ef490614f2a565b80601f0160208091040260200160405190810160405280929190818152602001828054613f2090614f2a565b8015613f6d5780601f10613f4257610100808354040283529160200191613f6d565b820191906000526020600020905b815481529060010190602001808311613f5057829003601f168201915b50505050509050613f8181600060306130bc565b86613f8c8a85614ed2565b81518110613f9c57613f9c614ea6565b6020026020010181905250613fb481603060606130bc565b85613fbf8a85614ed2565b81518110613fcf57613fcf614ea6565b60200260200101819052505080613fe590614eff565b9050613ea5565b505050935093915050565b6060815183516140079190614f81565b67ffffffffffffffff81111561401f5761401f614ee9565b60405190808252806020026020018201604052801561405257816020015b606081526020019060019003908161403d5790505b50905060005b83518110156140a95783818151811061407357614073614ea6565b602002602001015182828151811061408d5761408d614ea6565b6020026020010181905250806140a290614eff565b9050614058565b5060005b8251811015610e6e578281815181106140c8576140c8614ea6565b6020026020010151828551836140de9190614f81565b815181106140ee576140ee614ea6565b60200260200101819052508061410390614eff565b90506140ad565b6060602082511015801561412057506040825111155b61412c5761412c614fd4565b81516040141561413a575090565b604080516020808252818301909252600091602082018180368337019050509050600060208201528251602014156141765761217683826139c3565b6121768361418e83600087516040612b019190614ed2565b6139c3565b600081815b60088110156141c157600892831b60ff831617929190911c906141ba81614eff565b9050614198565b5080156141d0576141d0614fd4565b5060c01b919050565b600061105761297e60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260614ed2565b60008061421461422d565b9050806142245750600092915050565b80612fb0612e80565b600061105761297e60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b614ed2565b60008061428b60017f440f50bb57f26ec9d1264791d63a99883c71f19b2fd663bfa653c1198627e87b614ed2565b6001600160a01b0390931660009081526020939093525050604090205460ff1690565b6000806142dc60017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614ed2565b604051909150819081906142f1908690614fb8565b9081526040519081900360200190205460ff16949350505050565b600061433960017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614ed2565b604080518082018252851515815260208101859052905191925082918290614362908890614fb8565b908152604051602091819003820190208251815460ff19169015151781559101516001909101555050505050565b600061105761297e60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37614ed2565b600061105761297e60017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a8614ed2565b6060600061441f60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed2565b9050806000805b825481101561447e5782600001818154811061444457614444614ea6565b600091825260209091206007909102015460ff1615156001141561446e5761446b82614eff565b91505b61447781614eff565b9050614426565b5060008167ffffffffffffffff81111561449a5761449a614ee9565b60405190808252806020026020018201604052801561451657816020015b6145036040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816144b85790505b5090506000805b8454811015613dc75784600001818154811061453b5761453b614ea6565b600091825260209091206007909102015460ff161515600114156146945784600001818154811061456e5761456e614ea6565b60009182526020918290206040805160e08101909152600790920201805460ff161515825260018101805492939192918401916145aa90614f2a565b80601f01602080910402602001604051908101604052809291908181526020018280546145d690614f2a565b80156146235780601f106145f857610100808354040283529160200191614623565b820191906000526020600020905b81548152906001019060200180831161460657829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a090910152835184908490811061467c5761467c614ea6565b60200260200101819052508161469190614eff565b91505b61469d81614eff565b905061451d565b6146bf816146b061422d565b6146ba9190614f81565b614829565b6146cd82826111e285612fc4565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600061105761297e60017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa3614ed2565b6112b8612e7b60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113614ed2565b6112b8612e7b60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260614ed2565b6112b8612e7b60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42614ed2565b6112b8612e7b60017fefd873a3b5d595267ecb9c00570927f2fad9989039b29e0106506210ca7091a2614ed2565b80516000908015614812575081608001518260a00151115b80156117e757505060808101516060909101511190565b6112b8612e7b60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b614ed2565b82805461486390614f2a565b90600052602060002090601f01602090048101928261488557600085556148cb565b82601f1061489e57805160ff19168380011785556148cb565b828001600101855582156148cb579182015b828111156148cb5782518255916020019190600101906148b0565b506148d79291506148db565b5090565b5b808211156148d757600081556001016148dc565b60008083601f84011261490257600080fd5b50813567ffffffffffffffff81111561491a57600080fd5b60208301915083602082850101111561493257600080fd5b9250929050565b6000806000806040858703121561494f57600080fd5b843567ffffffffffffffff8082111561496757600080fd5b614973888389016148f0565b9096509450602087013591508082111561498c57600080fd5b818701915087601f8301126149a057600080fd5b8135818111156149af57600080fd5b8860208260051b85010111156149c457600080fd5b95989497505060200194505050565b6000602082840312156149e557600080fd5b5035919050565b60005b83811015614a075781810151838201526020016149ef565b838111156139045750506000910152565b60008151808452614a308160208601602086016149ec565b601f01601f19169290920160200192915050565b602081528151151560208201526000602083015160e06040840152614a6d610100840182614a18565b90506001600160a01b03604085015116606084015260608401516080840152608084015160a084015260a084015160c084015260c084015160e08401528091505092915050565b6020815260006121766020830184614a18565b80356001600160a01b0381168114614ade57600080fd5b919050565b60008060408385031215614af657600080fd5b614aff83614ac7565b946020939093013593505050565b600080600060608486031215614b2257600080fd5b614b2b84614ac7565b9250614b3960208501614ac7565b9150604084013590509250925092565b600080600060408486031215614b5e57600080fd5b833567ffffffffffffffff811115614b7557600080fd5b614b81868287016148f0565b9094509250614b94905060208501614ac7565b90509250925092565b60008060008060008060006080888a031215614bb857600080fd5b873567ffffffffffffffff80821115614bd057600080fd5b614bdc8b838c016148f0565b909950975060208a0135965060408a0135915080821115614bfc57600080fd5b614c088b838c016148f0565b909650945060608a0135915080821115614c2157600080fd5b50614c2e8a828b016148f0565b989b979a50959850939692959293505050565b600060208284031215614c5357600080fd5b61217682614ac7565b80358015158114614ade57600080fd5b600080600060408486031215614c8157600080fd5b833567ffffffffffffffff811115614c9857600080fd5b614ca4868287016148f0565b9094509250614b94905060208501614c5c565b600080600060608486031215614ccc57600080fd5b505081359360208301359350604090920135919050565b600080600060408486031215614cf857600080fd5b833567ffffffffffffffff811115614d0f57600080fd5b614d1b868287016148f0565b909790965060209590950135949350505050565b606081526000614d426060830186614a18565b8281036020840152614d548186614a18565b9150508215156040830152949350505050565b600080600080600080600060e0888a031215614d8257600080fd5b614d8b88614ac7565b965060208801359550614da060408901614ac7565b9450614dae60608901614ac7565b9350614dbc60808901614ac7565b925060a0880135915060c0880135905092959891949750929550565b60008060208385031215614deb57600080fd5b823567ffffffffffffffff811115614e0257600080fd5b614e0e858286016148f0565b90969095509350505050565b60008060408385031215614e2d57600080fd5b614e3683614ac7565b9150614e4460208401614ac7565b90509250929050565b60008060408385031215614e6057600080fd5b614e6983614ac7565b9150614e4460208401614c5c565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015614ee457614ee4614ebc565b500390565b634e487b7160e01b600052604160045260246000fd5b6000600019821415614f1357614f13614ebc565b5060010190565b8183823760009101908152919050565b600181811c90821680614f3e57607f821691505b602082108114156126b757634e487b7160e01b600052602260045260246000fd5b600082614f7c57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115614f9457614f94614ebc565b500190565b6000816000190483118215151615614fb357614fb3614ebc565b500290565b60008251614fca8184602087016149ec565b9190910192915050565b634e487b7160e01b600052600160045260246000fd5b600060208284031215614ffc57600080fd5b5051919050565b6080815260006150166080830187614a18565b82810360208401526150288187614a18565b9050828103604084015261503c8186614a18565b9150508260608301529594505050505056fea2646970667358221220c778fe16f41e2b6cb293d87f5bfd97c0b380ce688b62ac73542ac323014fa3d064736f6c634300080a0033",
  "devdoc": {
    "author": "Iulian Rotaru",
    "kind": "dev",
    "methods": {
      "addOperator(string,address)": {
        "details": "Only callable by the administrator",
        "params": {
          "_name": "The name identifying the operator",
          "_operator": "The address representing the operator, receiving the rewards"
        }
      },
      "addValidators(string,uint256,bytes,bytes)": {
        "details": "Only callable by the administrator or the operator address",
        "params": {
          "_keyCount": "The amount of keys provided",
          "_name": "The name identifying the operator",
          "_publicKeys": "Public keys of the validator, concatenated",
          "_signatures": "Signatures of the validator keys, concatenated"
        }
      },
      "deposit(address)": {
        "params": {
          "_referral": "Referral address, address(0) if none"
        }
      },
      "depositToConsensusLayer(uint256)": {
        "params": {
          "_maxCount": "The maximum amount of validator keys to fund"
        }
      },
      "getKey(string,uint256)": {
        "params": {
          "_index": "The key index",
          "_operatorName": "The name identifying the operator"
        }
      },
      "getOperator(uint256)": {
        "params": {
          "_index": "The index of the operator"
        }
      },
      "getOperatorByName(string)": {
        "params": {
          "_name": "The name identifying the operator"
        }
      },
      "initRiverV1(address,bytes32,address,address,address,uint256,uint256)": {
        "params": {
          "_depositContractAddress": "Address to make Consensus Layer deposits",
          "_globalFee": "Amount retained when the eth balance increases, splitted between the treasury and the operators",
          "_operatorRewardsShare": "Share of the global fee used to reward node operators",
          "_systemAdministratorAddress": "Administrator address",
          "_treasuryAddress": "Address receiving the fee minus the operator share",
          "_whitelistorAddress": "Address able to manage the whitelist",
          "_withdrawalCredentials": "Credentials to use for every validator deposit"
        }
      },
      "removeValidators(string,uint256[])": {
        "details": "Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order, otherwise the method will revert",
        "params": {
          "_indexes": "The indexes of the keys to remove",
          "_name": "The name identifying the operator"
        }
      },
      "setBeaconData(uint256,uint256,bytes32)": {
        "details": "Can only be called by the oracle address",
        "params": {
          "_roundId": "An identifier for this update",
          "_validatorBalanceSum": "The validator balance sum of the active validators on the consensus layer",
          "_validatorCount": "The number of active validators on the consensus layer"
        }
      },
      "setGlobalFee(uint256)": {
        "params": {
          "newFee": "New fee value"
        }
      },
      "setOperatorAddress(string,address)": {
        "details": "Only callable by the administrator or the previous operator address",
        "params": {
          "_name": "The name identifying the operator",
          "_newOperatorAddress": "The new address representing the operator"
        }
      },
      "setOperatorLimit(string,uint256)": {
        "details": "Only callable by the administrator",
        "params": {
          "_name": "The name identifying the operator",
          "_newLimit": "The new staking limit of the operator"
        }
      },
      "setOperatorRewardsShare(uint256)": {
        "params": {
          "newOperatorRewardsShare": "New share value"
        }
      },
      "setOperatorStatus(string,bool)": {
        "details": "Only callable by the administrator",
        "params": {
          "_name": "The name identifying the operator",
          "_newStatus": "The new status of the operator"
        }
      },
      "setOperatorStoppedValidatorCount(string,uint256)": {
        "details": "Only callable by the administrator",
        "params": {
          "_name": "The name identifying the operator",
          "_newStoppedValidatorCount": "The new stopped validator count of the operator"
        }
      },
      "setOracle(address)": {
        "params": {
          "_oracleAddress": "Address of the oracle"
        }
      },
      "whitelist(address,bool)": {
        "params": {
          "_account": "Account status to edit",
          "_status": "Whitelist status"
        }
      }
    },
    "title": "River (v1)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addOperator(string,address)": {
        "notice": "Adds an operator to the registry"
      },
      "addValidators(string,uint256,bytes,bytes)": {
        "notice": "Adds new keys for an operator"
      },
      "deposit(address)": {
        "notice": "Explicit deposit method"
      },
      "depositToConsensusLayer(uint256)": {
        "notice": "Deposits current balance to the Consensus Layer by batches of 32 ETH"
      },
      "getAdministrator()": {
        "notice": "Retrieve system administrator address"
      },
      "getBeaconValidatorBalanceSum()": {
        "notice": "Get Beacon validator balance sum"
      },
      "getBeaconValidatorCount()": {
        "notice": "Get Beacon validator count (the amount of validator reported by the oracles)"
      },
      "getDepositedValidatorCount()": {
        "notice": "Get the deposited validator count (the count of deposits made by the contract)"
      },
      "getKey(string,uint256)": {
        "notice": "Get the key of an operator at a specific index"
      },
      "getOperator(uint256)": {
        "notice": "Get operator details"
      },
      "getOperatorByName(string)": {
        "notice": "Get operator details by name"
      },
      "getOperatorCount()": {
        "notice": "Get operator count"
      },
      "getOracle()": {
        "notice": "Get Oracle address"
      },
      "initRiverV1(address,bytes32,address,address,address,uint256,uint256)": {
        "notice": "Initializes the River system"
      },
      "removeValidators(string,uint256[])": {
        "notice": "Remove validator keys"
      },
      "setBeaconData(uint256,uint256,bytes32)": {
        "notice": "Sets the validator count and validator balance sum reported by the oracle"
      },
      "setGlobalFee(uint256)": {
        "notice": "Changes the global fee parameter"
      },
      "setOperatorAddress(string,address)": {
        "notice": "Changes the operator address of an operator"
      },
      "setOperatorLimit(string,uint256)": {
        "notice": "Changes the operator staking limit"
      },
      "setOperatorRewardsShare(uint256)": {
        "notice": "Changes the operator rewards share."
      },
      "setOperatorStatus(string,bool)": {
        "notice": "Changes the operator status"
      },
      "setOperatorStoppedValidatorCount(string,uint256)": {
        "notice": "Changes the operator stopped validator cound"
      },
      "setOracle(address)": {
        "notice": "Set Oracle address"
      },
      "whitelist(address,bool)": {
        "notice": "Sets the whitelisting status for an account"
      }
    },
    "notice": "This contract merges all the manager contracts and implements all the virtual methods stitching all components together",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}