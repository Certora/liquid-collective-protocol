{
  "address": "0x73aB335BE7a1029a31C7276B350A3C49DFb70230",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "Denied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAlloweeCount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MismatchedAlloweeAndStatusCount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "statuses",
          "type": "uint256[]"
        }
      ],
      "name": "ChangedAllowlistStatuses",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_statuses",
          "type": "uint256[]"
        }
      ],
      "name": "allow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllower",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getPermissions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "hasPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allower",
          "type": "address"
        }
      ],
      "name": "initAllowlistV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "isAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isDenied",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "onlyAllowed",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAllowerAddress",
          "type": "address"
        }
      ],
      "name": "setAllower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc85be028a0c25ffff72c4210bd271451d71c30893ec096b762bfc0e91360d6bd",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0x73aB335BE7a1029a31C7276B350A3C49DFb70230",
    "transactionIndex": 3,
    "gasUsed": "556817",
    "logsBloom": "0x
    "blockHash": "0xe357fd7fbd15136edd0942cc9b465a261e5bf4cd460713e3ac76950bda608d82",
    "transactionHash": "0xc85be028a0c25ffff72c4210bd271451d71c30893ec096b762bfc0e91360d6bd",
    "logs": [],
    "blockNumber": 7180611,
    "cumulativeGasUsed": "963453",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dffe9829564a0f6301b4e81b73aebcc5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Denied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAlloweeCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedAlloweeAndStatusCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"statuses\",\"type\":\"uint256[]\"}],\"name\":\"ChangedAllowlistStatuses\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_statuses\",\"type\":\"uint256[]\"}],\"name\":\"allow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPermissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allower\",\"type\":\"address\"}],\"name\":\"initAllowlistV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isDenied\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"onlyAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAllowerAddress\",\"type\":\"address\"}],\"name\":\"setAllower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kiln\",\"kind\":\"dev\",\"methods\":{\"allow(address[],uint256[])\":{\"params\":{\"_accounts\":\"Accounts with statuses to edit\",\"_statuses\":\"Allowlist statuses for each account, in the same order as _accounts\"}},\"getPermissions(address)\":{\"params\":{\"_account\":\"Recipient to verify\"}},\"hasPermission(address,uint256)\":{\"params\":{\"_account\":\"Recipient to verify\",\"_mask\":\"Combination of permissions to verify\"}},\"initAllowlistV1(address,address)\":{\"params\":{\"_admin\":\"Address of the Allowlist administrator\",\"_allower\":\"Address of the allower\"}},\"isAllowed(address,uint256)\":{\"params\":{\"_account\":\"Recipient to verify\",\"_mask\":\"Combination of permissions to verify\"}},\"isDenied(address)\":{\"params\":{\"_account\":\"Recipient to verify\"}},\"onlyAllowed(address,uint256)\":{\"params\":{\"_account\":\"Recipient to verify\",\"_mask\":\"Combination of permissions to verify\"}},\"setAllower(address)\":{\"params\":{\"_newAllowerAddress\":\"New address allowed to edit the allowlist\"}}},\"title\":\"Allowlist (v1)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allow(address[],uint256[])\":{\"notice\":\"Sets the allowlisting status for one or more accounts\"},\"getAllower()\":{\"notice\":\"Retrieves the allower address\"},\"getPermissions(address)\":{\"notice\":\"This method retrieves the raw permission value\"},\"hasPermission(address,uint256)\":{\"notice\":\"This method returns true if the user has the expected permission         ignoring any deny list membership\"},\"initAllowlistV1(address,address)\":{\"notice\":\"Initializes the allowlist\"},\"isAllowed(address,uint256)\":{\"notice\":\"This method returns true if the user has the expected permission and         is not in the deny list\"},\"isDenied(address)\":{\"notice\":\"This method returns true if the user is in the deny list\"},\"onlyAllowed(address,uint256)\":{\"notice\":\"This method should be used as a modifier and is expected to revert         if the user hasn't got the required permission or if the user is         in the deny list.\"},\"setAllower(address)\":{\"notice\":\"Changes the allower address\"}},\"notice\":\"This contract handles the list of allowed recipients.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/Allowlist.1.sol\":\"AllowlistV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/src/Allowlist.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./libraries/LibOwnable.sol\\\";\\nimport \\\"./interfaces/IRiverOracleInput.sol\\\";\\n\\nimport \\\"./state/allowlist/AllowerAddress.sol\\\";\\nimport \\\"./state/allowlist/Allowlist.sol\\\";\\n\\n/// @title Allowlist (v1)\\n/// @author Kiln\\n/// @notice This contract handles the list of allowed recipients.\\ncontract AllowlistV1 is Initializable {\\n    event ChangedAllowlistStatuses(address[] indexed accounts, uint256[] statuses);\\n\\n    error InvalidAlloweeCount();\\n    error Denied(address _account);\\n    error Unauthorized(address _account);\\n    error MismatchedAlloweeAndStatusCount();\\n\\n    uint256 internal constant DENY_MASK = 0x1 << 255;\\n\\n    /// @notice Initializes the allowlist\\n    /// @param _admin Address of the Allowlist administrator\\n    /// @param _allower Address of the allower\\n    function initAllowlistV1(address _admin, address _allower) external init(0) {\\n        LibOwnable._setAdmin(_admin);\\n        AllowerAddress.set(_allower);\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() virtual {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Changes the allower address\\n    /// @param _newAllowerAddress New address allowed to edit the allowlist\\n    function setAllower(address _newAllowerAddress) external onlyAdmin {\\n        AllowerAddress.set(_newAllowerAddress);\\n    }\\n\\n    /// @notice Retrieves the allower address\\n    function getAllower() external view returns (address) {\\n        return AllowerAddress.get();\\n    }\\n\\n    /// @notice Sets the allowlisting status for one or more accounts\\n    /// @param _accounts Accounts with statuses to edit\\n    /// @param _statuses Allowlist statuses for each account, in the same order as _accounts\\n    function allow(address[] calldata _accounts, uint256[] calldata _statuses) external {\\n        if (msg.sender != AllowerAddress.get() && msg.sender != AdministratorAddress.get()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n\\n        if (_accounts.length == 0) {\\n            revert InvalidAlloweeCount();\\n        }\\n\\n        if (_accounts.length != _statuses.length) {\\n            revert MismatchedAlloweeAndStatusCount();\\n        }\\n\\n        for (uint256 i = 0; i < _accounts.length; ) {\\n            Allowlist.set(_accounts[i], _statuses[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit ChangedAllowlistStatuses(_accounts, _statuses);\\n    }\\n\\n    /// @notice This method should be used as a modifier and is expected to revert\\n    ///         if the user hasn't got the required permission or if the user is\\n    ///         in the deny list.\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    function onlyAllowed(address _account, uint256 _mask) external view {\\n        uint256 userPermissions = Allowlist.get(_account);\\n        if (userPermissions & DENY_MASK == DENY_MASK) {\\n            revert Denied(_account);\\n        }\\n        if (userPermissions & _mask != _mask) {\\n            revert Unauthorized(_account);\\n        }\\n    }\\n\\n    /// @notice This method returns true if the user has the expected permission and\\n    ///         is not in the deny list\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    function isAllowed(address _account, uint256 _mask) external view returns (bool) {\\n        uint256 userPermissions = Allowlist.get(_account);\\n        if (userPermissions & DENY_MASK == DENY_MASK) {\\n            return false;\\n        }\\n        return userPermissions & _mask == _mask;\\n    }\\n\\n    /// @notice This method returns true if the user is in the deny list\\n    /// @param _account Recipient to verify\\n    function isDenied(address _account) external view returns (bool) {\\n        return Allowlist.get(_account) & DENY_MASK == DENY_MASK;\\n    }\\n\\n    /// @notice This method returns true if the user has the expected permission\\n    ///         ignoring any deny list membership\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    function hasPermission(address _account, uint256 _mask) external view returns (bool) {\\n        return Allowlist.get(_account) & _mask == _mask;\\n    }\\n\\n    /// @notice This method retrieves the raw permission value\\n    /// @param _account Recipient to verify\\n    function getPermissions(address _account) external view returns (uint256) {\\n        return Allowlist.get(_account);\\n    }\\n}\\n\",\"keccak256\":\"0x2fd62fd1887e22fd11552ee7f8d3bac45a32d2b736e5ab2b2baeba1159f78b02\",\"license\":\"BUSL-1.1\"},\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\ncontract Initializable {\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    modifier init(uint256 version) {\\n        if (version != Version.get()) {\\n            revert InvalidInitialization(version, Version.get());\\n        }\\n        Version.set(version + 1); // prevents reentrency on the called method\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc93555f4bd660f91e565f20753e0d3a01e783e673bc0209d0d1e33c7b6941053\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiverOracleInput.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IRiverOracleInput {\\n    function setBeaconData(\\n        uint256 _validatorCount,\\n        uint256 _validatorBalanceSum,\\n        bytes32 _roundId\\n    ) external;\\n\\n    function totalSupply() external returns (uint256);\\n\\n    function totalShares() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x3c81f37602d3f604c7b2809325a49cee466e14cd8d244d91072fcd3c5a503d46\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    error Unauthorized(address caller);\\n    error InvalidCall();\\n    error InvalidArgument();\\n}\\n\",\"keccak256\":\"0xf3d3cec3d3d583aac19da0ace05f7ee067d47fd67e2a1f5f3195d7cbc5329325\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\n\\nlibrary LibOwnable {\\n    function _setAdmin(address newAdmin) internal {\\n        AdministratorAddress.set(newAdmin);\\n    }\\n\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n}\\n\",\"keccak256\":\"0xc189956546f854193e5fea6225b6eb0262ab192a97c4e32575eefe8205549794\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52ccf1daa33de9c72831e0d7458928c37ca7b5f8d8f732114095edeb81339920\",\"license\":\"MIT\"},\"contracts/src/state/allowlist/AllowerAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary AllowerAddress {\\n    bytes32 internal constant ALLOWER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowerAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ALLOWER_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ALLOWER_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x7e16007dba29cf60e7439b8bca3a27e1cb2ef29854d09e7cdd9a1151c771dfff\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/allowlist/Allowlist.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Allowlist {\\n    bytes32 internal constant ALLOWLIST_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowlist\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => uint256) value;\\n    }\\n\\n    function get(address account) internal view returns (uint256) {\\n        bytes32 slot = ALLOWLIST_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[account];\\n    }\\n\\n    function set(address account, uint256 status) internal {\\n        bytes32 slot = ALLOWLIST_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[account] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x5e9e8221908bc75cb519a2ae49855a8f1006d3056248690d55894c75c2e62c4c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary AdministratorAddress {\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x6c103a106ff958994c38f055a316144416df36aeb299ba660e7b8af063931b72\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Version {\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VERSION_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf90d1ecf583061aa70dc464ec1fde21da6e9309601bcbba38f47d26257a1c656\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610922806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80636e8cac1111610076578063e580d9941161005b578063e580d9941461014c578063e838dfbb1461015f578063f8350ed01461017257600080fd5b80636e8cac11146101165780638d944fd91461012957600080fd5b806307a40008146100a8578063160a7925146100cd5780634679a9e1146100ee5780635a40910214610103575b600080fd5b6100b0610185565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e06100db3660046106c5565b610194565b6040519081526020016100c4565b6101016100fc3660046106c5565b6101a5565b005b6101016101113660046106e7565b6101f1565b610101610124366004610711565b61027b565b61013c6101373660046106e7565b6102f4565b60405190151581526020016100c4565b61010161015a366004610790565b61030a565b61013c61016d3660046106c5565b61048f565b61013c6101803660046106e7565b6104a8565b600061018f6104d9565b905090565b600061019f8261050d565b92915050565b6101ad61055b565b6001600160a01b0316336001600160a01b0316146101e55760405163472511eb60e11b81523360048201526024015b60405180910390fd5b6101ee81610565565b50565b60006101fc8361050d565b9050600160ff1b8082161415610249576040517fe7d05e270000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016101dc565b81828216146102765760405163472511eb60e11b81526001600160a01b03841660048201526024016101dc565b505050565b6000610285610598565b81146102cf5780610294610598565b6040517fe7e93b38000000000000000000000000000000000000000000000000000000008152600481019290925260248201526044016101dc565b6102e26102dd826001610812565b6105c8565b6102eb836105f6565b61027682610565565b600081826103018561050d565b16149392505050565b6103126104d9565b6001600160a01b0316336001600160a01b03161415801561034c57506103366105ff565b6001600160a01b0316336001600160a01b031614155b1561036c5760405163472511eb60e11b81523360048201526024016101dc565b826103a3576040517f6b0f2f7c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8281146103dc576040517fb7c599df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b838110156104375761042f8585838181106103fc576103fc61082a565b905060200201602081019061041191906106c5565b8484848181106104235761042361082a565b9050602002013561062f565b6001016103df565b508383604051610448929190610840565b60405180910390207f4caf22f66c30786a07375d69e72415b42a7c7b79774bb0cf692f166bcc08f86b8383604051610481929190610880565b60405180910390a250505050565b6000600160ff1b806104a08461050d565b161492915050565b6000806104b48461050d565b9050600160ff1b80821614156104ce57600091505061019f565b821690911492915050565b600061018f61050960017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b806108d5565b5490565b60008061053b60017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a41356108d5565b6001600160a01b0390931660009081526020939093525050604090205490565b600061018f6105ff565b6101ee61059360017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b806108d5565b829055565b600061018f61050960017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6108d5565b6101ee61059360017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6108d5565b6101ee8161067b565b600061018f61050960017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb1136108d5565b600061065c60017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a41356108d5565b6001600160a01b03909316600090815260209390935250604090912055565b6101ee61059360017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb1136108d5565b80356001600160a01b03811681146106c057600080fd5b919050565b6000602082840312156106d757600080fd5b6106e0826106a9565b9392505050565b600080604083850312156106fa57600080fd5b610703836106a9565b946020939093013593505050565b6000806040838503121561072457600080fd5b61072d836106a9565b915061073b602084016106a9565b90509250929050565b60008083601f84011261075657600080fd5b50813567ffffffffffffffff81111561076e57600080fd5b6020830191508360208260051b850101111561078957600080fd5b9250929050565b600080600080604085870312156107a657600080fd5b843567ffffffffffffffff808211156107be57600080fd5b6107ca88838901610744565b909650945060208701359150808211156107e357600080fd5b506107f087828801610744565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610825576108256107fc565b500190565b634e487b7160e01b600052603260045260246000fd5b60008184825b85811015610875576001600160a01b0361085f836106a9565b1683526020928301929190910190600101610846565b509095945050505050565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156108b957600080fd5b8260051b80856040850137600092016040019182525092915050565b6000828210156108e7576108e76107fc565b50039056fea2646970667358221220b9e1768a95dd260f4e8d44da30be49f4fde02f9a5a22450814ac985eb3ae021c64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80636e8cac1111610076578063e580d9941161005b578063e580d9941461014c578063e838dfbb1461015f578063f8350ed01461017257600080fd5b80636e8cac11146101165780638d944fd91461012957600080fd5b806307a40008146100a8578063160a7925146100cd5780634679a9e1146100ee5780635a40910214610103575b600080fd5b6100b0610185565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e06100db3660046106c5565b610194565b6040519081526020016100c4565b6101016100fc3660046106c5565b6101a5565b005b6101016101113660046106e7565b6101f1565b610101610124366004610711565b61027b565b61013c6101373660046106e7565b6102f4565b60405190151581526020016100c4565b61010161015a366004610790565b61030a565b61013c61016d3660046106c5565b61048f565b61013c6101803660046106e7565b6104a8565b600061018f6104d9565b905090565b600061019f8261050d565b92915050565b6101ad61055b565b6001600160a01b0316336001600160a01b0316146101e55760405163472511eb60e11b81523360048201526024015b60405180910390fd5b6101ee81610565565b50565b60006101fc8361050d565b9050600160ff1b8082161415610249576040517fe7d05e270000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016101dc565b81828216146102765760405163472511eb60e11b81526001600160a01b03841660048201526024016101dc565b505050565b6000610285610598565b81146102cf5780610294610598565b6040517fe7e93b38000000000000000000000000000000000000000000000000000000008152600481019290925260248201526044016101dc565b6102e26102dd826001610812565b6105c8565b6102eb836105f6565b61027682610565565b600081826103018561050d565b16149392505050565b6103126104d9565b6001600160a01b0316336001600160a01b03161415801561034c57506103366105ff565b6001600160a01b0316336001600160a01b031614155b1561036c5760405163472511eb60e11b81523360048201526024016101dc565b826103a3576040517f6b0f2f7c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8281146103dc576040517fb7c599df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b838110156104375761042f8585838181106103fc576103fc61082a565b905060200201602081019061041191906106c5565b8484848181106104235761042361082a565b9050602002013561062f565b6001016103df565b508383604051610448929190610840565b60405180910390207f4caf22f66c30786a07375d69e72415b42a7c7b79774bb0cf692f166bcc08f86b8383604051610481929190610880565b60405180910390a250505050565b6000600160ff1b806104a08461050d565b161492915050565b6000806104b48461050d565b9050600160ff1b80821614156104ce57600091505061019f565b821690911492915050565b600061018f61050960017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b806108d5565b5490565b60008061053b60017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a41356108d5565b6001600160a01b0390931660009081526020939093525050604090205490565b600061018f6105ff565b6101ee61059360017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b806108d5565b829055565b600061018f61050960017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6108d5565b6101ee61059360017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6108d5565b6101ee8161067b565b600061018f61050960017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb1136108d5565b600061065c60017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a41356108d5565b6001600160a01b03909316600090815260209390935250604090912055565b6101ee61059360017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb1136108d5565b80356001600160a01b03811681146106c057600080fd5b919050565b6000602082840312156106d757600080fd5b6106e0826106a9565b9392505050565b600080604083850312156106fa57600080fd5b610703836106a9565b946020939093013593505050565b6000806040838503121561072457600080fd5b61072d836106a9565b915061073b602084016106a9565b90509250929050565b60008083601f84011261075657600080fd5b50813567ffffffffffffffff81111561076e57600080fd5b6020830191508360208260051b850101111561078957600080fd5b9250929050565b600080600080604085870312156107a657600080fd5b843567ffffffffffffffff808211156107be57600080fd5b6107ca88838901610744565b909650945060208701359150808211156107e357600080fd5b506107f087828801610744565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610825576108256107fc565b500190565b634e487b7160e01b600052603260045260246000fd5b60008184825b85811015610875576001600160a01b0361085f836106a9565b1683526020928301929190910190600101610846565b509095945050505050565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156108b957600080fd5b8260051b80856040850137600092016040019182525092915050565b6000828210156108e7576108e76107fc565b50039056fea2646970667358221220b9e1768a95dd260f4e8d44da30be49f4fde02f9a5a22450814ac985eb3ae021c64736f6c634300080a0033",
  "devdoc": {
    "author": "Kiln",
    "kind": "dev",
    "methods": {
      "allow(address[],uint256[])": {
        "params": {
          "_accounts": "Accounts with statuses to edit",
          "_statuses": "Allowlist statuses for each account, in the same order as _accounts"
        }
      },
      "getPermissions(address)": {
        "params": {
          "_account": "Recipient to verify"
        }
      },
      "hasPermission(address,uint256)": {
        "params": {
          "_account": "Recipient to verify",
          "_mask": "Combination of permissions to verify"
        }
      },
      "initAllowlistV1(address,address)": {
        "params": {
          "_admin": "Address of the Allowlist administrator",
          "_allower": "Address of the allower"
        }
      },
      "isAllowed(address,uint256)": {
        "params": {
          "_account": "Recipient to verify",
          "_mask": "Combination of permissions to verify"
        }
      },
      "isDenied(address)": {
        "params": {
          "_account": "Recipient to verify"
        }
      },
      "onlyAllowed(address,uint256)": {
        "params": {
          "_account": "Recipient to verify",
          "_mask": "Combination of permissions to verify"
        }
      },
      "setAllower(address)": {
        "params": {
          "_newAllowerAddress": "New address allowed to edit the allowlist"
        }
      }
    },
    "title": "Allowlist (v1)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allow(address[],uint256[])": {
        "notice": "Sets the allowlisting status for one or more accounts"
      },
      "getAllower()": {
        "notice": "Retrieves the allower address"
      },
      "getPermissions(address)": {
        "notice": "This method retrieves the raw permission value"
      },
      "hasPermission(address,uint256)": {
        "notice": "This method returns true if the user has the expected permission         ignoring any deny list membership"
      },
      "initAllowlistV1(address,address)": {
        "notice": "Initializes the allowlist"
      },
      "isAllowed(address,uint256)": {
        "notice": "This method returns true if the user has the expected permission and         is not in the deny list"
      },
      "isDenied(address)": {
        "notice": "This method returns true if the user is in the deny list"
      },
      "onlyAllowed(address,uint256)": {
        "notice": "This method should be used as a modifier and is expected to revert         if the user hasn't got the required permission or if the user is         in the deny list."
      },
      "setAllower(address)": {
        "notice": "Changes the allower address"
      }
    },
    "notice": "This contract handles the list of allowed recipients.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}