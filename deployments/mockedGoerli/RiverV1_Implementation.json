{
  "address": "0x90a0219f84b47f7e4406c7C463bBc28a6D5a23fA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "AllowanceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyDeposit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "InactiveOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentPublicKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentSignatures",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFundedKeyDeletionAttempt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidKeyCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPublicKeyCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPublicKeysLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUnsortedIndexes",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_providedValidatorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "InvalidValidatorCountReport",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWithdrawalCredentials",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoAvailableValidatorKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullTransfer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "OperatorAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "OperatorNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OperatorNotFoundAtIndex",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operatorAddress",
          "type": "address"
        }
      ],
      "name": "AddedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalKeyCount",
          "type": "uint256"
        }
      ],
      "name": "AddedValidatorKeys",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validatorCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validatorBalanceSum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "roundId",
          "type": "bytes32"
        }
      ],
      "name": "BeaconDataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "ChangedAllowlistStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "keyCount",
          "type": "uint256"
        }
      ],
      "name": "RemovedValidatorKeys",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOperatorAddress",
          "type": "address"
        }
      ],
      "name": "SetOperatorAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "SetOperatorLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "SetOperatorStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStoppedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "SetOperatorStoppedValidatorCount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserDeposit",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_KEY_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNATURE_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_keyCount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_publicKeys",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_signatures",
          "type": "bytes"
        }
      ],
      "name": "addValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "allow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxCount",
          "type": "uint256"
        }
      ],
      "name": "depositToConsensusLayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdministrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllower",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconValidatorBalanceSum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beaconValidatorBalanceSum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconValidatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beaconValidatorCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositedValidatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositedValidatorCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getOperator",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keys",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopped",
              "type": "uint256"
            }
          ],
          "internalType": "struct Operators.Operator",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getOperatorByName",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keys",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopped",
              "type": "uint256"
            }
          ],
          "internalType": "struct Operators.Operator",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getOperatorDetails",
      "outputs": [
        {
          "internalType": "int256",
          "name": "_index",
          "type": "int256"
        },
        {
          "internalType": "address",
          "name": "_operatorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorIndex",
          "type": "uint256"
        }
      ],
      "name": "getValidator",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "funded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositContractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_withdrawalCredentials",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_systemAdministratorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allowerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_globalFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_operatorRewardsShare",
          "type": "uint256"
        }
      ],
      "name": "initRiverV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "removeValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAllowerAddress",
          "type": "address"
        }
      ],
      "name": "setAllower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_validatorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorBalanceSum",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_roundId",
          "type": "bytes32"
        }
      ],
      "name": "setBeaconData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "setGlobalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newOperatorAddress",
          "type": "address"
        }
      ],
      "name": "setOperatorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newLimit",
          "type": "uint256"
        }
      ],
      "name": "setOperatorLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newOperatorRewardsShare",
          "type": "uint256"
        }
      ],
      "name": "setOperatorRewardsShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_newStatus",
          "type": "bool"
        }
      ],
      "name": "setOperatorStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newStoppedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "setOperatorStoppedValidatorCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "sharesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2cb0a8f38856992f3dfda4b2fd15f2aeb0f30dcf9334646e99713b5181a903d5",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0x90a0219f84b47f7e4406c7C463bBc28a6D5a23fA",
    "transactionIndex": 5,
    "gasUsed": "4609346",
    "logsBloom": "0x
    "blockHash": "0x5fb00d3c94a2fd408c402acf955f6cd0a998e93bf240bf479a21929055e01a41",
    "transactionHash": "0x2cb0a8f38856992f3dfda4b2fd15f2aeb0f30dcf9334646e99713b5181a903d5",
    "logs": [],
    "blockNumber": 6467201,
    "cumulativeGasUsed": "6213138",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5c5f5052e91f71390a2ebc628971f49a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllowanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InactiveOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentPublicKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFundedKeyDeletionAttempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeysLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUnsortedIndexes\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providedValidatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"InvalidValidatorCountReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawalCredentials\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAvailableValidatorKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"OperatorAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"OperatorNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OperatorNotFoundAtIndex\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"}],\"name\":\"AddedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalKeyCount\",\"type\":\"uint256\"}],\"name\":\"AddedValidatorKeys\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorBalanceSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"roundId\",\"type\":\"bytes32\"}],\"name\":\"BeaconDataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ChangedAllowlistStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyCount\",\"type\":\"uint256\"}],\"name\":\"RemovedValidatorKeys\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperatorAddress\",\"type\":\"address\"}],\"name\":\"SetOperatorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"SetOperatorLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetOperatorStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStoppedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"SetOperatorStoppedValidatorCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserDeposit\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_KEY_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNATURE_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keyCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_publicKeys\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"addValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"allow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"}],\"name\":\"depositToConsensusLayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdministrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconValidatorBalanceSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beaconValidatorBalanceSum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beaconValidatorCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositedValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositedValidatorCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopped\",\"type\":\"uint256\"}],\"internalType\":\"struct Operators.Operator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getOperatorByName\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopped\",\"type\":\"uint256\"}],\"internalType\":\"struct Operators.Operator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getOperatorDetails\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"_index\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorIndex\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"funded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_withdrawalCredentials\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_systemAdministratorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_globalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operatorRewardsShare\",\"type\":\"uint256\"}],\"name\":\"initRiverV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"removeValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAllowerAddress\",\"type\":\"address\"}],\"name\":\"setAllower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorBalanceSum\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_roundId\",\"type\":\"bytes32\"}],\"name\":\"setBeaconData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setGlobalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOperatorAddress\",\"type\":\"address\"}],\"name\":\"setOperatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setOperatorLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newOperatorRewardsShare\",\"type\":\"uint256\"}],\"name\":\"setOperatorRewardsShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setOperatorStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newStoppedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"setOperatorStoppedValidatorCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"SkillZ\",\"kind\":\"dev\",\"methods\":{\"addOperator(string,address)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_name\":\"The name identifying the operator\",\"_operator\":\"The address representing the operator, receiving the rewards\"}},\"addValidators(uint256,uint256,bytes,bytes)\":{\"details\":\"Only callable by the administrator or the operator address\",\"params\":{\"_index\":\"The operator index\",\"_keyCount\":\"The amount of keys provided\",\"_publicKeys\":\"Public keys of the validator, concatenated\",\"_signatures\":\"Signatures of the validator keys, concatenated\"}},\"allow(address,bool)\":{\"params\":{\"_account\":\"Account status to edit\",\"_status\":\"Allowlist status\"}},\"deposit(address)\":{\"params\":{\"_referral\":\"Referral address, address(0) if none\"}},\"depositToConsensusLayer(uint256)\":{\"params\":{\"_maxCount\":\"The maximum amount of validator keys to fund\"}},\"getOperator(uint256)\":{\"params\":{\"_index\":\"The index of the operator\"}},\"getOperatorByName(string)\":{\"params\":{\"_name\":\"The name identifying the operator\"}},\"getValidator(uint256,uint256)\":{\"params\":{\"_operatorIndex\":\"The index of the operator\",\"_validatorIndex\":\"The index of the validator\"}},\"initRiverV1(address,bytes32,address,address,address,uint256,uint256)\":{\"params\":{\"_allowerAddress\":\"Address able to manage the allowlist\",\"_depositContractAddress\":\"Address to make Consensus Layer deposits\",\"_globalFee\":\"Amount retained when the eth balance increases, splitted between the treasury and the operators\",\"_operatorRewardsShare\":\"Share of the global fee used to reward node operators\",\"_systemAdministratorAddress\":\"Administrator address\",\"_treasuryAddress\":\"Address receiving the fee minus the operator share\",\"_withdrawalCredentials\":\"Credentials to use for every validator deposit\"}},\"removeValidators(uint256,uint256[])\":{\"details\":\"Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order, otherwise the method will revert\",\"params\":{\"_index\":\"The operator index\",\"_indexes\":\"The indexes of the keys to remove\"}},\"setAllower(address)\":{\"params\":{\"_newAllowerAddress\":\"New address allowed to edit the allowlist\"}},\"setBeaconData(uint256,uint256,bytes32)\":{\"details\":\"Can only be called by the oracle address\",\"params\":{\"_roundId\":\"An identifier for this update\",\"_validatorBalanceSum\":\"The validator balance sum of the active validators on the consensus layer\",\"_validatorCount\":\"The number of active validators on the consensus layer\"}},\"setGlobalFee(uint256)\":{\"params\":{\"newFee\":\"New fee value\"}},\"setOperatorAddress(uint256,address)\":{\"details\":\"Only callable by the administrator or the previous operator address\",\"params\":{\"_index\":\"The operator index\",\"_newOperatorAddress\":\"The new address representing the operator\"}},\"setOperatorLimit(uint256,uint256)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_index\":\"The operator index\",\"_newLimit\":\"The new staking limit of the operator\"}},\"setOperatorRewardsShare(uint256)\":{\"params\":{\"newOperatorRewardsShare\":\"New share value\"}},\"setOperatorStatus(uint256,bool)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_index\":\"The operator index\",\"_newStatus\":\"The new status of the operator\"}},\"setOperatorStoppedValidatorCount(uint256,uint256)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_index\":\"The operator index\",\"_newStoppedValidatorCount\":\"The new stopped validator count of the operator\"}},\"setOracle(address)\":{\"params\":{\"_oracleAddress\":\"Address of the oracle\"}}},\"title\":\"River (v1)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOperator(string,address)\":{\"notice\":\"Adds an operator to the registry\"},\"addValidators(uint256,uint256,bytes,bytes)\":{\"notice\":\"Adds new keys for an operator\"},\"allow(address,bool)\":{\"notice\":\"Sets the allowlisting status for an account\"},\"deposit(address)\":{\"notice\":\"Explicit deposit method\"},\"depositToConsensusLayer(uint256)\":{\"notice\":\"Deposits current balance to the Consensus Layer by batches of 32 ETH\"},\"getAdministrator()\":{\"notice\":\"Retrieve system administrator address\"},\"getAllower()\":{\"notice\":\"Retrieves the allower address\"},\"getBeaconValidatorBalanceSum()\":{\"notice\":\"Get Beacon validator balance sum\"},\"getBeaconValidatorCount()\":{\"notice\":\"Get Beacon validator count (the amount of validator reported by the oracles)\"},\"getDepositedValidatorCount()\":{\"notice\":\"Get the deposited validator count (the count of deposits made by the contract)\"},\"getOperator(uint256)\":{\"notice\":\"Get operator details\"},\"getOperatorByName(string)\":{\"notice\":\"Get operator details by name\"},\"getOperatorCount()\":{\"notice\":\"Get operator count\"},\"getOracle()\":{\"notice\":\"Get Oracle address\"},\"getValidator(uint256,uint256)\":{\"notice\":\"Get the details of a validator\"},\"initRiverV1(address,bytes32,address,address,address,uint256,uint256)\":{\"notice\":\"Initializes the River system\"},\"removeValidators(uint256,uint256[])\":{\"notice\":\"Remove validator keys\"},\"setAllower(address)\":{\"notice\":\"Changes the allower address\"},\"setBeaconData(uint256,uint256,bytes32)\":{\"notice\":\"Sets the validator count and validator balance sum reported by the oracle\"},\"setGlobalFee(uint256)\":{\"notice\":\"Changes the global fee parameter\"},\"setOperatorAddress(uint256,address)\":{\"notice\":\"Changes the operator address of an operator\"},\"setOperatorLimit(uint256,uint256)\":{\"notice\":\"Changes the operator staking limit\"},\"setOperatorRewardsShare(uint256)\":{\"notice\":\"Changes the operator rewards share.\"},\"setOperatorStatus(uint256,bool)\":{\"notice\":\"Changes the operator status\"},\"setOperatorStoppedValidatorCount(uint256,uint256)\":{\"notice\":\"Changes the operator stopped validator cound\"},\"setOracle(address)\":{\"notice\":\"Set Oracle address\"}},\"notice\":\"This contract merges all the manager contracts and implements all the virtual methods stitching all components together\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/River.1.sol\":\"RiverV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\ncontract Initializable {\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    modifier init(uint256 version) {\\n        if (version != Version.get()) {\\n            revert InvalidInitialization(version, Version.get());\\n        }\\n        Version.set(version + 1); // prevents reentrency on the called method\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc93555f4bd660f91e565f20753e0d3a01e783e673bc0209d0d1e33c7b6941053\",\"license\":\"BUSL-1.1\"},\"contracts/src/River.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./components/DepositManager.1.sol\\\";\\nimport \\\"./components/TransferManager.1.sol\\\";\\nimport \\\"./components/SharesManager.1.sol\\\";\\nimport \\\"./components/OracleManager.1.sol\\\";\\nimport \\\"./components/OperatorsManager.1.sol\\\";\\nimport \\\"./components/AllowlistManager.1.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./libraries/LibOwnable.sol\\\";\\n\\nimport \\\"./state/shared/AdministratorAddress.sol\\\";\\nimport \\\"./state/river/TreasuryAddress.sol\\\";\\nimport \\\"./state/river/OperatorRewardsShare.sol\\\";\\nimport \\\"./state/river/GlobalFee.sol\\\";\\n\\n/// @title River (v1)\\n/// @author SkillZ\\n/// @notice This contract merges all the manager contracts and implements all the virtual methods stitching all components together\\ncontract RiverV1 is\\n    DepositManagerV1,\\n    TransferManagerV1,\\n    SharesManagerV1,\\n    OracleManagerV1,\\n    OperatorsManagerV1,\\n    AllowlistManagerV1,\\n    Initializable\\n{\\n    uint256 public constant BASE = 100000;\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() override(OperatorsManagerV1, OracleManagerV1, AllowlistManagerV1) {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _allowerAddress Address able to manage the allowlist\\n    /// @param _treasuryAddress Address receiving the fee minus the operator share\\n    /// @param _globalFee Amount retained when the eth balance increases, splitted between the treasury and the operators\\n    /// @param _operatorRewardsShare Share of the global fee used to reward node operators\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _systemAdministratorAddress,\\n        address _allowerAddress,\\n        address _treasuryAddress,\\n        uint256 _globalFee,\\n        uint256 _operatorRewardsShare\\n    ) external init(0) {\\n        LibOwnable._setAdmin(_systemAdministratorAddress);\\n        TreasuryAddress.set(_treasuryAddress);\\n        GlobalFee.set(_globalFee);\\n        OperatorRewardsShare.set(_operatorRewardsShare);\\n\\n        DepositManagerV1.initDepositManagerV1(_depositContractAddress, _withdrawalCredentials);\\n        AllowlistManagerV1.initAllowlistManagerV1(_allowerAddress);\\n    }\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param newFee New fee value\\n    function setGlobalFee(uint256 newFee) external onlyAdmin {\\n        if (newFee > BASE) {\\n            revert Errors.InvalidArgument();\\n        }\\n\\n        GlobalFee.set(newFee);\\n    }\\n\\n    /// @notice Changes the operator rewards share.\\n    /// @param newOperatorRewardsShare New share value\\n    function setOperatorRewardsShare(uint256 newOperatorRewardsShare) external onlyAdmin {\\n        if (newOperatorRewardsShare > BASE) {\\n            revert Errors.InvalidArgument();\\n        }\\n\\n        OperatorRewardsShare.set(newOperatorRewardsShare);\\n    }\\n\\n    /// @notice Retrieve system administrator address\\n    function getAdministrator() external view returns (address) {\\n        return LibOwnable._getAdmin();\\n    }\\n\\n    /// @notice Handler called whenever a user deposits ETH to the system. Mints the adequate amount of shares.\\n    /// @param _depositor User address that made the deposit\\n    /// @param _amount Amount of ETH deposited\\n    function _onDeposit(address _depositor, uint256 _amount) internal override {\\n        if (AllowlistManagerV1._isAllowed(_depositor) == false) {\\n            revert Errors.Unauthorized(_depositor);\\n        }\\n        SharesManagerV1._mintShares(_depositor, _amount);\\n    }\\n\\n    /// @notice Handler called whenever an allowlist check is made for an address. Asks the Allowlist Manager component.\\n    /// @param _account Address to verify\\n    function _isAccountAllowed(address _account) internal view override returns (bool) {\\n        return AllowlistManagerV1._isAllowed(_account);\\n    }\\n\\n    /// @notice Handler called whenever a deposit to the consensus layer is made. Should retrieve _requestedAmount or lower keys\\n    /// @param _requestedAmount Amount of keys required. Contract is expected to send _requestedAmount or lower.\\n    function _getNextValidators(uint256 _requestedAmount)\\n        internal\\n        override\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        return OperatorsManagerV1._getNextValidatorsFromActiveOperators(_requestedAmount);\\n    }\\n\\n    /// @notice Handler called whenever the balance of ETH handled by the system increases. Splits funds between operators and treasury.\\n    /// @param _amount Additional eth received\\n    function _onEarnings(uint256 _amount) internal override {\\n        uint256 globalFee = GlobalFee.get();\\n        uint256 sharesToMint = (_amount * _totalShares() * globalFee) /\\n            ((_assetBalance() * BASE) - (_amount * globalFee));\\n\\n        uint256 operatorRewards = (sharesToMint * OperatorRewardsShare.get()) / BASE;\\n\\n        Operators.Operator[] memory operators = Operators.getAllActive();\\n        uint256[] memory validatorCounts = new uint256[](operators.length);\\n\\n        uint256 totalActiveValidators = 0;\\n        for (uint256 idx = 0; idx < operators.length; ++idx) {\\n            uint256 operatorActiveValidatorCount = operators[idx].funded - operators[idx].stopped;\\n            totalActiveValidators += operatorActiveValidatorCount;\\n            validatorCounts[idx] = operatorActiveValidatorCount;\\n        }\\n\\n        if (totalActiveValidators > 0) {\\n            uint256 rewardsPerActiveValidator = operatorRewards / totalActiveValidators;\\n\\n            for (uint256 idx = 0; idx < validatorCounts.length; ++idx) {\\n                _mintRawShares(operators[idx].operator, validatorCounts[idx] * rewardsPerActiveValidator);\\n            }\\n        } else {\\n            operatorRewards = 0;\\n        }\\n\\n        _mintRawShares(TreasuryAddress.get(), sharesToMint - operatorRewards);\\n    }\\n\\n    /// @notice Handler called whenever the total balance of ETH is requested\\n    function _assetBalance() internal view override returns (uint256) {\\n        uint256 beaconValidatorCount = BeaconValidatorCount.get();\\n        uint256 depositedValidatorCount = DepositedValidatorCount.get();\\n        if (beaconValidatorCount < depositedValidatorCount) {\\n            return\\n                BeaconValidatorBalanceSum.get() +\\n                address(this).balance +\\n                (depositedValidatorCount - beaconValidatorCount) *\\n                DepositManagerV1.DEPOSIT_SIZE;\\n        } else {\\n            return BeaconValidatorBalanceSum.get() + address(this).balance;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6a81e614b45a23d27b85d2a1a9a8dfd02cc2e49f5e35f03ddd43f1e609b07984\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/AllowlistManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/river/AllowerAddress.sol\\\";\\nimport \\\"../state/river/Allowlist.sol\\\";\\nimport \\\"../libraries/LibOwnable.sol\\\";\\n\\n/// @title Allowlist Manager (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the allowlist of accounts allowed to own shares\\nabstract contract AllowlistManagerV1 {\\n    event ChangedAllowlistStatus(address indexed account, bool status);\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() virtual {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Initializes the allower address\\n    /// @param _allowerAddress Address allowed to edit the allowlist\\n    function initAllowlistManagerV1(address _allowerAddress) internal {\\n        AllowerAddress.set(_allowerAddress);\\n    }\\n\\n    /// @notice Changes the allower address\\n    /// @param _newAllowerAddress New address allowed to edit the allowlist\\n    function setAllower(address _newAllowerAddress) external onlyAdmin {\\n        AllowerAddress.set(_newAllowerAddress);\\n    }\\n\\n    /// @notice Retrieves the allower address\\n    function getAllower() external view returns (address) {\\n        return AllowerAddress.get();\\n    }\\n\\n    /// @notice Sets the allowlisting status for an account\\n    /// @param _account Account status to edit\\n    /// @param _status Allowlist status\\n    function allow(address _account, bool _status) external {\\n        if (msg.sender != AllowerAddress.get() && msg.sender != AdministratorAddress.get()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n\\n        Allowlist.set(_account, _status);\\n\\n        emit ChangedAllowlistStatus(_account, _status);\\n    }\\n\\n    function _isAllowed(address _account) internal view returns (bool) {\\n        return Allowlist.get(_account);\\n    }\\n\\n    function isAllowed(address _account) external view returns (bool) {\\n        return _isAllowed(_account);\\n    }\\n}\\n\",\"keccak256\":\"0x29456f9191faa60cc93b5866163046210f4aac73cc7b62a6a5ed82f76b72a746\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/DepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IDepositContract.sol\\\";\\n\\nimport \\\"../libraries/BytesLib.sol\\\";\\nimport \\\"../libraries/Uint256Lib.sol\\\";\\n\\nimport \\\"../state/river/DepositContractAddress.sol\\\";\\nimport \\\"../state/river/WithdrawalCredentials.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\n\\n/// @title Deposit Manager (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the interactions with the official deposit contract, funding all validators\\n/// @dev _onValidatorKeyRequest must be overriden.\\nabstract contract DepositManagerV1 {\\n    error NotEnoughFunds();\\n    error InconsistentPublicKeys();\\n    error InconsistentSignatures();\\n    error NoAvailableValidatorKeys();\\n    error InvalidPublicKeyCount();\\n    error InvalidSignatureCount();\\n    error InvalidWithdrawalCredentials();\\n\\n    uint256 public constant PUBLIC_KEY_LENGTH = 48;\\n    uint256 public constant SIGNATURE_LENGTH = 96;\\n    uint256 public constant DEPOSIT_SIZE = 32 ether;\\n\\n    /// @notice Initializer to set the deposit contract address and the withdrawal credentials to use\\n    /// @param _depositContractAddress The address of the deposit contract\\n    /// @param _withdrawalCredentials The withdrawal credentials to apply to all deposits\\n    function initDepositManagerV1(address _depositContractAddress, bytes32 _withdrawalCredentials) internal {\\n        DepositContractAddress.set(IDepositContract(_depositContractAddress));\\n\\n        WithdrawalCredentials.set(_withdrawalCredentials);\\n    }\\n\\n    /// @notice Internal helper to retrieve validator keys ready to be funded\\n    /// @dev Must be overriden with an implementation that provides keyCount or less keys upon call\\n    /// @param _keyCount The amount of keys (or less) to return.\\n    function _getNextValidators(uint256 _keyCount)\\n        internal\\n        virtual\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    function depositToConsensusLayer(uint256 _maxCount) external {\\n        uint256 validatorsToDeposit = Uint256Lib.min(address(this).balance / DEPOSIT_SIZE, _maxCount);\\n\\n        if (validatorsToDeposit == 0) {\\n            revert NotEnoughFunds();\\n        }\\n\\n        (bytes[] memory publicKeys, bytes[] memory signatures) = _getNextValidators(validatorsToDeposit);\\n\\n        uint256 receivedPublicKeyCount = publicKeys.length;\\n\\n        if (receivedPublicKeyCount == 0) {\\n            revert NoAvailableValidatorKeys();\\n        }\\n\\n        if (receivedPublicKeyCount > validatorsToDeposit) {\\n            revert InvalidPublicKeyCount();\\n        }\\n\\n        uint256 receivedSignatureCount = signatures.length;\\n\\n        if (receivedSignatureCount != receivedPublicKeyCount) {\\n            revert InvalidSignatureCount();\\n        }\\n\\n        bytes32 withdrawalCredentials = WithdrawalCredentials.get();\\n\\n        if (withdrawalCredentials == 0) {\\n            revert InvalidWithdrawalCredentials();\\n        }\\n\\n        for (uint256 idx = 0; idx < receivedPublicKeyCount; idx += 1) {\\n            _depositValidator(publicKeys[idx], signatures[idx], withdrawalCredentials);\\n        }\\n\\n        DepositedValidatorCount.set(DepositedValidatorCount.get() + receivedPublicKeyCount);\\n    }\\n\\n    /// @notice Deposits 32 ETH to the official Deposit contract\\n    /// @param _publicKey The public key of the validator\\n    /// @param _signature The signature provided by the operator\\n    /// @param _withdrawalCredentials The withdrawal credentials provided by River\\n    function _depositValidator(\\n        bytes memory _publicKey,\\n        bytes memory _signature,\\n        bytes32 _withdrawalCredentials\\n    ) internal {\\n        if (_publicKey.length != PUBLIC_KEY_LENGTH) {\\n            revert InconsistentPublicKeys();\\n        }\\n\\n        if (_signature.length != SIGNATURE_LENGTH) {\\n            revert InconsistentSignatures();\\n        }\\n        uint256 value = DEPOSIT_SIZE;\\n\\n        uint256 depositAmount = value / 1000000000 wei;\\n        assert(depositAmount * 1000000000 wei == value);\\n\\n        bytes32 pubkeyRoot = sha256(BytesLib.pad64(_publicKey));\\n        bytes32 signatureRoot = sha256(\\n            abi.encodePacked(\\n                sha256(BytesLib.slice(_signature, 0, 64)),\\n                sha256(BytesLib.pad64(BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)))\\n            )\\n        );\\n\\n        bytes32 depositDataRoot = sha256(\\n            abi.encodePacked(\\n                sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\n                sha256(abi.encodePacked(Uint256Lib.toLittleEndian64(depositAmount), signatureRoot))\\n            )\\n        );\\n\\n        uint256 targetBalance = address(this).balance - value;\\n\\n        DepositContractAddress.get().deposit{value: value}(\\n            _publicKey,\\n            abi.encodePacked(_withdrawalCredentials),\\n            _signature,\\n            depositDataRoot\\n        );\\n        require(address(this).balance == targetBalance, \\\"EXPECTING_DEPOSIT_TO_HAPPEN\\\");\\n    }\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    function getDepositedValidatorCount() external view returns (uint256 depositedValidatorCount) {\\n        depositedValidatorCount = DepositedValidatorCount.get();\\n    }\\n}\\n\",\"keccak256\":\"0x1c6e210b2b3163aed6309a8c4876cad579b9c85d3e9471e996f2b7e3b5f73b6b\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/OperatorsManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../libraries/Uint256Lib.sol\\\";\\nimport \\\"../libraries/LibOwnable.sol\\\";\\n\\nimport \\\"../state/river/Operators.sol\\\";\\nimport \\\"../state/river/ValidatorKeys.sol\\\";\\n\\n/// @title Operators Manager (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the operator and key list\\ncontract OperatorsManagerV1 {\\n    error OperatorAlreadyExists(string name);\\n    error InactiveOperator(uint256 index);\\n    error InvalidFundedKeyDeletionAttempt();\\n    error InvalidUnsortedIndexes();\\n    error InvalidKeyCount();\\n    error InvalidPublicKeysLength();\\n    error InvalidSignatureLength();\\n    error InvalidIndexOutOfBounds();\\n\\n    event AddedOperator(uint256 indexed index, string name, address operatorAddress);\\n    event SetOperatorStatus(uint256 indexed index, bool active);\\n    event SetOperatorLimit(uint256 indexed index, uint256 newLimit);\\n    event SetOperatorStoppedValidatorCount(uint256 indexed index, uint256 newStoppedValidatorCount);\\n    event SetOperatorAddress(uint256 indexed index, address newOperatorAddress);\\n    event AddedValidatorKeys(uint256 indexed index, uint256 totalKeyCount);\\n    event RemovedValidatorKeys(uint256 indexed index, uint256 keyCount);\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() virtual {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents the call from working if the operator is not active\\n    /// @param _index The name identifying the operator\\n    modifier active(uint256 _index) {\\n        if (Operators.getByIndex(_index).active == false) {\\n            revert InactiveOperator(_index);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents anyone except the admin or the given operator to make the call. Also checks if operator is active\\n    /// @param _index The name identifying the operator\\n    modifier operatorOrAdmin(uint256 _index) {\\n        if (msg.sender == LibOwnable._getAdmin()) {\\n            _;\\n            return;\\n        }\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n        if (operator.active == false) {\\n            revert InactiveOperator(_index);\\n        }\\n        if (msg.sender != operator.operator) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    function getOperatorDetails(string calldata _name) external view returns (int256 _index, address _operatorAddress) {\\n        _index = Operators.indexOf(_name);\\n        _operatorAddress = Operators.get(_name).operator;\\n    }\\n\\n    /// @notice Adds an operator to the registry\\n    /// @dev Only callable by the administrator\\n    /// @param _name The name identifying the operator\\n    /// @param _operator The address representing the operator, receiving the rewards\\n    function addOperator(string calldata _name, address _operator) external onlyAdmin {\\n        if (Operators.exists(_name) == true) {\\n            revert OperatorAlreadyExists(_name);\\n        }\\n\\n        Operators.Operator memory newOperator = Operators.Operator({\\n            active: true,\\n            operator: _operator,\\n            name: _name,\\n            limit: 0,\\n            funded: 0,\\n            keys: 0,\\n            stopped: 0\\n        });\\n\\n        uint256 operatorIndex = Operators.set(_name, newOperator);\\n\\n        emit AddedOperator(operatorIndex, newOperator.name, newOperator.operator);\\n    }\\n\\n    /// @notice Changes the operator address of an operator\\n    /// @dev Only callable by the administrator or the previous operator address\\n    /// @param _index The operator index\\n    /// @param _newOperatorAddress The new address representing the operator\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external operatorOrAdmin(_index) {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        operator.operator = _newOperatorAddress;\\n\\n        emit SetOperatorAddress(_index, operator.operator);\\n    }\\n\\n    /// @notice Changes the operator status\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStatus The new status of the operator\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external onlyAdmin {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        operator.active = _newStatus;\\n\\n        emit SetOperatorStatus(_index, _newStatus);\\n    }\\n\\n    /// @notice Changes the operator stopped validator cound\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStoppedValidatorCount The new stopped validator count of the operator\\n    function setOperatorStoppedValidatorCount(uint256 _index, uint256 _newStoppedValidatorCount) external onlyAdmin {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        if (_newStoppedValidatorCount > operator.funded) {\\n            revert Errors.InvalidArgument();\\n        }\\n\\n        operator.stopped = _newStoppedValidatorCount;\\n\\n        emit SetOperatorStoppedValidatorCount(_index, operator.stopped);\\n    }\\n\\n    /// @notice Changes the operator staking limit\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newLimit The new staking limit of the operator\\n    function setOperatorLimit(uint256 _index, uint256 _newLimit) external onlyAdmin {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        operator.limit = _newLimit;\\n\\n        emit SetOperatorLimit(_index, operator.limit);\\n    }\\n\\n    /// @notice Adds new keys for an operator\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @param _index The operator index\\n    /// @param _keyCount The amount of keys provided\\n    /// @param _publicKeys Public keys of the validator, concatenated\\n    /// @param _signatures Signatures of the validator keys, concatenated\\n    function addValidators(\\n        uint256 _index,\\n        uint256 _keyCount,\\n        bytes calldata _publicKeys,\\n        bytes calldata _signatures\\n    ) external operatorOrAdmin(_index) {\\n        if (_keyCount == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        if (_publicKeys.length != _keyCount * ValidatorKeys.PUBLIC_KEY_LENGTH) {\\n            revert InvalidPublicKeysLength();\\n        }\\n\\n        if (_signatures.length != _keyCount * ValidatorKeys.SIGNATURE_LENGTH) {\\n            revert InvalidSignatureLength();\\n        }\\n\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        for (uint256 idx = 0; idx < _keyCount; ++idx) {\\n            bytes memory publicKey = BytesLib.slice(\\n                _publicKeys,\\n                idx * ValidatorKeys.PUBLIC_KEY_LENGTH,\\n                ValidatorKeys.PUBLIC_KEY_LENGTH\\n            );\\n            bytes memory signature = BytesLib.slice(\\n                _signatures,\\n                idx * ValidatorKeys.SIGNATURE_LENGTH,\\n                ValidatorKeys.SIGNATURE_LENGTH\\n            );\\n            ValidatorKeys.set(_index, operator.keys + idx, publicKey, signature);\\n        }\\n\\n        operator.keys += _keyCount;\\n\\n        emit AddedValidatorKeys(_index, operator.keys);\\n    }\\n\\n    /// @notice Remove validator keys\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @dev The indexes must be provided sorted in decreasing order, otherwise the method will revert\\n    /// @param _index The operator index\\n    /// @param _indexes The indexes of the keys to remove\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external operatorOrAdmin(_index) {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        if (_indexes.length == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        for (uint256 idx = 0; idx < _indexes.length; ++idx) {\\n            uint256 keyIndex = _indexes[idx];\\n\\n            if (keyIndex < operator.funded) {\\n                revert InvalidFundedKeyDeletionAttempt();\\n            }\\n\\n            if (keyIndex >= operator.keys) {\\n                revert InvalidIndexOutOfBounds();\\n            }\\n\\n            if (idx > 0 && _indexes[idx] >= _indexes[idx - 1]) {\\n                revert InvalidUnsortedIndexes();\\n            }\\n\\n            uint256 lastKeyIndex = operator.keys - 1;\\n            (bytes memory lastPublicKey, bytes memory lastSignature) = ValidatorKeys.get(_index, lastKeyIndex);\\n            ValidatorKeys.set(_index, keyIndex, lastPublicKey, lastSignature);\\n            ValidatorKeys.set(_index, lastKeyIndex, new bytes(0), new bytes(0));\\n            operator.keys -= 1;\\n        }\\n\\n        emit RemovedValidatorKeys(_index, operator.keys);\\n    }\\n\\n    /// @notice Get operator details by name\\n    /// @param _name The name identifying the operator\\n    function getOperatorByName(string calldata _name) external view returns (Operators.Operator memory) {\\n        return Operators.get(_name);\\n    }\\n\\n    /// @notice Get operator details\\n    /// @param _index The index of the operator\\n    function getOperator(uint256 _index) external view returns (Operators.Operator memory) {\\n        return Operators.getByIndex(_index);\\n    }\\n\\n    /// @notice Get operator count\\n    function getOperatorCount() external view returns (uint256) {\\n        return Operators.getCount();\\n    }\\n\\n    /// @notice Get the details of a validator\\n    /// @param _operatorIndex The index of the operator\\n    /// @param _validatorIndex The index of the validator\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (\\n            bytes memory publicKey,\\n            bytes memory signature,\\n            bool funded\\n        )\\n    {\\n        (publicKey, signature) = ValidatorKeys.get(_operatorIndex, _validatorIndex);\\n        funded = _validatorIndex <= Operators.getByIndex(_operatorIndex).funded;\\n    }\\n\\n    /// @notice Internal utility to concatenate bytes arrays together\\n    function _concatenateByteArrays(bytes[] memory arr1, bytes[] memory arr2)\\n        internal\\n        pure\\n        returns (bytes[] memory res)\\n    {\\n        res = new bytes[](arr1.length + arr2.length);\\n        for (uint256 idx = 0; idx < arr1.length; ++idx) {\\n            res[idx] = arr1[idx];\\n        }\\n        for (uint256 idx = 0; idx < arr2.length; ++idx) {\\n            res[idx + arr1.length] = arr2[idx];\\n        }\\n    }\\n\\n    /// @notice Handler called whenever a deposit to the consensus layer is made. Should retrieve _requestedAmount or lower keys\\n    /// @param _requestedAmount Amount of keys required. Contract is expected to send _requestedAmount or lower.\\n    function _getNextValidatorsFromActiveOperators(uint256 _requestedAmount)\\n        internal\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        Operators.CachedOperator[] memory operators = Operators.getAllFundable();\\n\\n        if (operators.length == 0) {\\n            return (new bytes[](0), new bytes[](0));\\n        }\\n\\n        uint256 selectedOperatorIndex = 0;\\n        for (uint256 idx = 1; idx < operators.length; ++idx) {\\n            if (\\n                operators[idx].funded - operators[idx].stopped <\\n                operators[selectedOperatorIndex].funded - operators[selectedOperatorIndex].stopped\\n            ) {\\n                selectedOperatorIndex = idx;\\n            }\\n        }\\n\\n        uint256 selectedOperatorAvailableKeys = Uint256Lib.min(\\n            operators[selectedOperatorIndex].keys,\\n            operators[selectedOperatorIndex].limit\\n        ) - operators[selectedOperatorIndex].funded;\\n\\n        if (selectedOperatorAvailableKeys == 0) {\\n            return (new bytes[](0), new bytes[](0));\\n        }\\n\\n        Operators.Operator storage operator = Operators.get(operators[selectedOperatorIndex].name);\\n        if (selectedOperatorAvailableKeys >= _requestedAmount) {\\n            (publicKeys, signatures) = ValidatorKeys.getKeys(\\n                operators[selectedOperatorIndex].index,\\n                operators[selectedOperatorIndex].funded,\\n                _requestedAmount\\n            );\\n            operator.funded += _requestedAmount;\\n        } else {\\n            (publicKeys, signatures) = ValidatorKeys.getKeys(\\n                operators[selectedOperatorIndex].index,\\n                operators[selectedOperatorIndex].funded,\\n                selectedOperatorAvailableKeys\\n            );\\n            operator.funded += selectedOperatorAvailableKeys;\\n            (\\n                bytes[] memory additionalPublicKeys,\\n                bytes[] memory additionalSignatures\\n            ) = _getNextValidatorsFromActiveOperators(_requestedAmount - selectedOperatorAvailableKeys);\\n            publicKeys = _concatenateByteArrays(publicKeys, additionalPublicKeys);\\n            signatures = _concatenateByteArrays(signatures, additionalSignatures);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe98ddc144312d60e26959b4cb722f3a0f8e96ecbdbeb070fb8f8d939975df111\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/OracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../libraries/LibOwnable.sol\\\";\\n\\nimport \\\"../state/river/OracleAddress.sol\\\";\\nimport \\\"../state/river/LastOracleRoundId.sol\\\";\\nimport \\\"../state/river/BeaconValidatorBalanceSum.sol\\\";\\nimport \\\"../state/river/BeaconValidatorCount.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\n\\n/// @title Oracle Manager (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the inputs provided by the oracle\\nabstract contract OracleManagerV1 {\\n    event BeaconDataUpdate(uint256 validatorCount, uint256 validatorBalanceSum, bytes32 roundId);\\n\\n    error InvalidValidatorCountReport(uint256 _providedValidatorCount, uint256 _depositedValidatorCount);\\n\\n    /// @notice Handler called if the delta between the last and new validator balance sum is positive\\n    /// @dev Must be overriden\\n    /// @param _profits The positive increase in the validator balance sum (staking rewards)\\n    function _onEarnings(uint256 _profits) internal virtual;\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() virtual {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Sets the validator count and validator balance sum reported by the oracle\\n    /// @dev Can only be called by the oracle address\\n    /// @param _validatorCount The number of active validators on the consensus layer\\n    /// @param _validatorBalanceSum The validator balance sum of the active validators on the consensus layer\\n    /// @param _roundId An identifier for this update\\n    function setBeaconData(\\n        uint256 _validatorCount,\\n        uint256 _validatorBalanceSum,\\n        bytes32 _roundId\\n    ) external {\\n        if (msg.sender != OracleAddress.get()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n\\n        if (_validatorCount > DepositedValidatorCount.get()) {\\n            revert InvalidValidatorCountReport(_validatorCount, DepositedValidatorCount.get());\\n        }\\n\\n        uint256 previousValidatorBalanceSum = BeaconValidatorBalanceSum.get();\\n        uint256 newValidators = _validatorCount - BeaconValidatorCount.get();\\n\\n        BeaconValidatorBalanceSum.set(_validatorBalanceSum);\\n        BeaconValidatorCount.set(_validatorCount);\\n        LastOracleRoundId.set(_roundId);\\n\\n        if (previousValidatorBalanceSum < _validatorBalanceSum) {\\n            _onEarnings(_validatorBalanceSum - previousValidatorBalanceSum - newValidators * 32 ether);\\n        }\\n\\n        emit BeaconDataUpdate(_validatorCount, _validatorBalanceSum, _roundId);\\n    }\\n\\n    /// @notice Get Oracle address\\n    function getOracle() external view returns (address oracle) {\\n        oracle = OracleAddress.get();\\n    }\\n\\n    /// @notice Set Oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external onlyAdmin {\\n        OracleAddress.set(_oracleAddress);\\n    }\\n\\n    /// @notice Get Beacon validator balance sum\\n    function getBeaconValidatorBalanceSum() external view returns (uint256 beaconValidatorBalanceSum) {\\n        beaconValidatorBalanceSum = BeaconValidatorBalanceSum.get();\\n    }\\n\\n    /// @notice Get Beacon validator count (the amount of validator reported by the oracles)\\n    function getBeaconValidatorCount() external view returns (uint256 beaconValidatorCount) {\\n        beaconValidatorCount = BeaconValidatorCount.get();\\n    }\\n}\\n\",\"keccak256\":\"0x5cc8d84276ea4049f9a0c370248c926cbeed1ef1d4d56c2dbe0cc95fd357050f\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/SharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nimport \\\"../state/river/Shares.sol\\\";\\nimport \\\"../state/river/SharesPerOwner.sol\\\";\\nimport \\\"../state/river/ApprovalsPerOwner.sol\\\";\\n\\n/// @title Shares Manager (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the shares of the depositor and the rebasing effect depending on the oracle data\\nabstract contract SharesManagerV1 is IERC20 {\\n    error BalanceTooLow();\\n    error UnauthorizedOperation();\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n    error NullTransfer();\\n\\n    function _isAccountAllowed(address _account) internal view virtual returns (bool);\\n\\n    modifier allowed(address _account) {\\n        if (!_isAccountAllowed(_account)) {\\n            revert Errors.Unauthorized(_account);\\n        }\\n        _;\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"River\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"rETH\\\";\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _assetBalance();\\n    }\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance) {\\n        return _balanceOf(_owner);\\n    }\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining) {\\n        return ApprovalsPerOwner.get(_owner, _spender);\\n    }\\n\\n    function sharesOf(address _owner) external view returns (uint256 shares) {\\n        return SharesPerOwner.get(_owner);\\n    }\\n\\n    function transfer(address _to, uint256 _value) external allowed(msg.sender) allowed(_to) returns (bool success) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        if (_balanceOf(msg.sender) < _value) {\\n            revert BalanceTooLow();\\n        }\\n\\n        uint256 shares = _sharesFromBalance(_value);\\n\\n        SharesPerOwner.set(msg.sender, SharesPerOwner.get(msg.sender) - shares);\\n        SharesPerOwner.set(_to, SharesPerOwner.get(_to) + shares);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external allowed(_from) allowed(_to) returns (bool success) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        if (_from != msg.sender) {\\n            uint256 currentAllowance = ApprovalsPerOwner.get(_from, msg.sender);\\n            if (currentAllowance < _value) {\\n                revert AllowanceTooLow(_from, msg.sender, currentAllowance, _value);\\n            }\\n            ApprovalsPerOwner.set(_from, msg.sender, currentAllowance - _value);\\n        }\\n\\n        if (_balanceOf(_from) < _value) {\\n            revert BalanceTooLow();\\n        }\\n\\n        uint256 shares = _sharesFromBalance(_value);\\n\\n        SharesPerOwner.set(_from, SharesPerOwner.get(_from) - shares);\\n        SharesPerOwner.set(_to, SharesPerOwner.get(_to) + shares);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) external allowed(msg.sender) returns (bool success) {\\n        ApprovalsPerOwner.set(msg.sender, _spender, _value);\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function _assetBalance() internal view virtual returns (uint256);\\n\\n    function _balanceFromShares(uint256 shares) internal view returns (uint256) {\\n        uint256 _totalSharesValue = Shares.get();\\n\\n        if (_totalSharesValue == 0) {\\n            return 0;\\n        }\\n\\n        return ((shares * _assetBalance())) / _totalSharesValue;\\n    }\\n\\n    function _sharesFromBalance(uint256 balance) internal view returns (uint256) {\\n        uint256 assetBalance = _assetBalance();\\n\\n        if (assetBalance == 0) {\\n            return 0;\\n        }\\n\\n        return (balance * Shares.get()) / assetBalance;\\n    }\\n\\n    // assuming funds are received, _assetBalance should have taken _value into account\\n    function _mintShares(address _owner, uint256 _value) internal {\\n        uint256 assetBalance = _assetBalance();\\n        uint256 oldTotalAssetBalance = _assetBalance() - _value;\\n\\n        if (oldTotalAssetBalance == 0) {\\n            _mintRawShares(_owner, assetBalance);\\n        } else {\\n            uint256 sharesToMint = (_value * _totalShares()) / oldTotalAssetBalance;\\n            _mintRawShares(_owner, sharesToMint);\\n        }\\n    }\\n\\n    // assuming funds are received, _assetBalance should have taken _value into account\\n    function _mintRawShares(address _owner, uint256 _value) internal {\\n        Shares.set(Shares.get() + _value);\\n        SharesPerOwner.set(_owner, SharesPerOwner.get(_owner) + _value);\\n        emit Transfer(address(0), _owner, _value);\\n    }\\n\\n    function _balanceOf(address _owner) internal view returns (uint256 balance) {\\n        return _balanceFromShares(SharesPerOwner.get(_owner));\\n    }\\n\\n    function _totalShares() internal view returns (uint256) {\\n        return Shares.get();\\n    }\\n\\n    function totalShares() external view returns (uint256) {\\n        return _totalShares();\\n    }\\n}\\n\",\"keccak256\":\"0xf551a5ff0993182a33ad4dfcf34d3ce3a45e1820299d86c39816865019c5b30d\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/TransferManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\n\\n/// @title Transfer Manager (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the inbound transfers cases or the explicit submissions\\nabstract contract TransferManagerV1 {\\n    event UserDeposit(address indexed user, address indexed referral, uint256 amount);\\n\\n    error EmptyDeposit();\\n\\n    /// @notice Handler called whenever a user has sent funds to the contract\\n    /// @dev Must be overriden\\n    /// @param _depositor Address that made the deposit\\n    /// @param _amount Amount deposited\\n    function _onDeposit(address _depositor, uint256 _amount) internal virtual;\\n\\n    /// @notice Internal utility calling the deposit handler and emitting the deposit details and the referral address\\n    /// @param _referral Referral address, address(0) if none\\n    function _deposit(address _referral) internal {\\n        if (msg.value == 0) {\\n            revert EmptyDeposit();\\n        }\\n\\n        _onDeposit(msg.sender, msg.value);\\n\\n        emit UserDeposit(msg.sender, _referral, msg.value);\\n    }\\n\\n    /// @notice Explicit deposit method\\n    /// @param _referral Referral address, address(0) if none\\n    function deposit(address _referral) external payable {\\n        _deposit(_referral);\\n    }\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable {\\n        _deposit(address(0));\\n    }\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable {\\n        revert Errors.InvalidCall();\\n    }\\n}\\n\",\"keccak256\":\"0x54b067272d53e86078925c0606f4412dfd0e8eb27fb37fc0be108096fc4deb74\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IDepositContract.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IDepositContract {\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawalCredentials,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa5b1f77965814e1cc883111cb2909bf58647c401d03ada85b95a65cf54f8b029\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n}\\n\",\"keccak256\":\"0x3fdc46f7b30b29d3b9d540ba1b06cfaede61a7c6ce31c8fe434a9af6f411a920\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/BytesLib.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary BytesLib {\\n    function pad64(bytes memory _b) internal pure returns (bytes memory) {\\n        assert(_b.length >= 32 && _b.length <= 64);\\n        if (64 == _b.length) return _b;\\n\\n        bytes memory zero32 = new bytes(32);\\n        assembly {\\n            mstore(add(zero32, 0x20), 0)\\n        }\\n\\n        if (32 == _b.length) return BytesLib.concat(_b, zero32);\\n        else return BytesLib.concat(_b, BytesLib.slice(zero32, 0, uint256(64) - _b.length));\\n    }\\n\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xb7520fc078933f9e1db774a3040baee1f915a70475d76e4731f6ef34d386e8f9\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    error Unauthorized(address caller);\\n    error InvalidCall();\\n    error InvalidArgument();\\n}\\n\",\"keccak256\":\"0xf3d3cec3d3d583aac19da0ace05f7ee067d47fd67e2a1f5f3195d7cbc5329325\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\n\\nlibrary LibOwnable {\\n    function _setAdmin(address newAdmin) internal {\\n        AdministratorAddress.set(newAdmin);\\n    }\\n\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n}\\n\",\"keccak256\":\"0xc189956546f854193e5fea6225b6eb0262ab192a97c4e32575eefe8205549794\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Uint256Lib.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Uint256Lib {\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 temp_value = _value;\\n        for (uint256 i = 0; i < 8; ++i) {\\n            result = (result << 8) | (temp_value & 0xFF);\\n            temp_value >>= 8;\\n        }\\n\\n        assert(0 == temp_value); // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256 max) {\\n        return (a > b ? b : a);\\n    }\\n}\\n\",\"keccak256\":\"0x0cba10266338d44e5778d43600eb69e2089c45124625f77ee935f06788af15f8\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52ccf1daa33de9c72831e0d7458928c37ca7b5f8d8f732114095edeb81339920\",\"license\":\"MIT\"},\"contracts/src/state/river/AllowerAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary AllowerAddress {\\n    bytes32 public constant ALLOWER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowerAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ALLOWER_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ALLOWER_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x5f8036d3f955fc9b8a8e3cce6886d609400eb70ec6f22439180f20791ba76144\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Allowlist.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Allowlist {\\n    bytes32 public constant ALLOWLIST_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowlist\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => bool) value;\\n    }\\n\\n    function get(address account) internal view returns (bool) {\\n        bytes32 slot = ALLOWLIST_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[account];\\n    }\\n\\n    function set(address account, bool status) internal {\\n        bytes32 slot = ALLOWLIST_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[account] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xff5f7d64a4cc4fc6d6f1e419099fda67f2b1add2c8b8c6addbd7be483cc20970\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ApprovalsPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary ApprovalsPerOwner {\\n    bytes32 public constant APPROVALS_PER_OWNER_SLOT = bytes32(uint256(keccak256(\\\"river.state.approvalsPerOwner\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => mapping(address => uint256)) value;\\n    }\\n\\n    function get(address owner, address operator) internal view returns (uint256) {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[owner][operator];\\n    }\\n\\n    function set(\\n        address owner,\\n        address operator,\\n        uint256 newValue\\n    ) internal {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[owner][operator] = newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x0d12a15523294cafd172326e1be4b98c1bcf639fc4a286bda8370fc85a41fcd9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/BeaconValidatorBalanceSum.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary BeaconValidatorBalanceSum {\\n    bytes32 public constant VALIDATOR_BALANCE_SUM_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.beaconValidatorBalanceSum\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VALIDATOR_BALANCE_SUM_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VALIDATOR_BALANCE_SUM_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x01f9af561a5e2a64da59d72a305f68ec31016d5202c53de74c6a477c6bdd0ff3\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/BeaconValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary BeaconValidatorCount {\\n    bytes32 public constant BEACON_VALIDATOR_COUNT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.beaconValidatorCount\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(BEACON_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(BEACON_VALIDATOR_COUNT_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x5260d1258dfd22d70f33a8a0cb1757d4770096fd5697c384423a3359d72aa957\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositContractAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../interfaces/IDepositContract.sol\\\";\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary DepositContractAddress {\\n    bytes32 public constant DEPOSIT_CONTRACT_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositContractAddress\\\")) - 1);\\n\\n    function get() internal view returns (IDepositContract) {\\n        return IDepositContract(UnstructuredStorage.getStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT));\\n    }\\n\\n    function set(IDepositContract newValue) internal {\\n        return UnstructuredStorage.setStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT, address(newValue));\\n    }\\n}\\n\",\"keccak256\":\"0xc53c4c1976e8da650ed4c246d0504db7a108de7dc3e3d60bb702eee247192f2c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositedValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary DepositedValidatorCount {\\n    bytes32 public constant DEPOSITED_VALIDATOR_COUNT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositedValidatorCount\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xa1c3309b1b7b9ecdd328f62c0bef365a230d4a7275e2a590794bd6f368e2baa9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/GlobalFee.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary GlobalFee {\\n    bytes32 public constant GLOBAL_FEE_SLOT = bytes32(uint256(keccak256(\\\"river.state.globalFee\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(GLOBAL_FEE_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(GLOBAL_FEE_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf35e8f433c5761e219bee317aa5ae1d78d42e5387ad0b1023b8384f99c5104b4\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/LastOracleRoundId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary LastOracleRoundId {\\n    bytes32 public constant LAST_ORACLE_ROUND_ID_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.lastOracleRoundId\\\")) - 1);\\n\\n    function get() internal view returns (bytes32) {\\n        return UnstructuredStorage.getStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT);\\n    }\\n\\n    function set(bytes32 newValue) internal {\\n        UnstructuredStorage.setStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x0f0657382184c4246a6c528476b0c8f2a1eb9002f70b39a9c974fa47f80a20f3\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OperatorRewardsShare.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary OperatorRewardsShare {\\n    bytes32 public constant OPERATOR_REWARDS_SHARE_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.operatorRewardsShare\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(OPERATOR_REWARDS_SHARE_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(OPERATOR_REWARDS_SHARE_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xbffff7d0ed1614a246acb5b31a5555c6992bed9e305b46158d206267b1975e78\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Operators.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Operators {\\n    bytes32 public constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.operators\\\")) - 1);\\n\\n    bytes32 public constant OPERATORS_MAPPING_SLOT = bytes32(uint256(keccak256(\\\"river.state.operatorsMapping\\\")) - 1);\\n\\n    struct Operator {\\n        bool active;\\n        string name;\\n        address operator;\\n        uint256 limit;\\n        uint256 funded;\\n        uint256 keys;\\n        uint256 stopped;\\n    }\\n\\n    struct CachedOperator {\\n        bool active;\\n        string name;\\n        address operator;\\n        uint256 limit;\\n        uint256 funded;\\n        uint256 keys;\\n        uint256 stopped;\\n        uint256 index;\\n    }\\n\\n    struct OperatorResolution {\\n        bool active;\\n        uint256 index;\\n    }\\n\\n    struct SlotOperator {\\n        Operator[] value;\\n    }\\n\\n    struct SlotOperatorMapping {\\n        mapping(string => OperatorResolution) value;\\n    }\\n\\n    error OperatorNotFound(string name);\\n    error OperatorNotFoundAtIndex(uint256 index);\\n\\n    function _getOperatorIndex(string memory name) internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n\\n        if (opm.value[name].active == false) {\\n            revert OperatorNotFound(name);\\n        }\\n\\n        return opm.value[name].index;\\n    }\\n\\n    function _getOperatorActive(string memory name) internal view returns (bool) {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n        return opm.value[name].active;\\n    }\\n\\n    function _setOperatorIndex(\\n        string memory name,\\n        bool active,\\n        uint256 index\\n    ) internal {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n        opm.value[name] = OperatorResolution({active: active, index: index});\\n    }\\n\\n    function exists(string memory name) internal view returns (bool) {\\n        return _getOperatorActive(name);\\n    }\\n\\n    function indexOf(string memory name) internal view returns (int256) {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n\\n        if (opm.value[name].active == false) {\\n            return -1;\\n        }\\n\\n        return int256(opm.value[name].index);\\n    }\\n\\n    function get(string memory name) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n        uint256 index = _getOperatorIndex(name);\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[index];\\n    }\\n\\n    function getByIndex(uint256 index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= index) {\\n            revert OperatorNotFoundAtIndex(index);\\n        }\\n\\n        return r.value[index];\\n    }\\n\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    function _hasFundableKeys(Operators.Operator memory operator) internal pure returns (bool) {\\n        return (operator.active &&\\n            operator.keys > operator.funded - operator.stopped &&\\n            operator.limit > operator.funded - operator.stopped);\\n    }\\n\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (r.value[idx].active == true) {\\n                ++activeCount;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (r.value[idx].active == true) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                ++activeIdx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    function getAllFundable() internal view returns (CachedOperator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (_hasFundableKeys(r.value[idx])) {\\n                ++activeCount;\\n            }\\n        }\\n\\n        CachedOperator[] memory activeOperators = new CachedOperator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            Operator memory op = r.value[idx];\\n            if (_hasFundableKeys(op)) {\\n                activeOperators[activeIdx] = CachedOperator({\\n                    active: op.active,\\n                    name: op.name,\\n                    operator: op.operator,\\n                    limit: op.limit,\\n                    funded: op.funded,\\n                    keys: op.keys,\\n                    stopped: op.stopped,\\n                    index: idx\\n                });\\n                ++activeIdx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    function set(string memory name, Operator memory newValue) internal returns (uint256) {\\n        bool opExists = _getOperatorActive(name);\\n\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (opExists == false) {\\n            r.value.push(newValue);\\n            _setOperatorIndex(name, newValue.active, r.value.length - 1);\\n            return (r.value.length - 1);\\n        } else {\\n            uint256 index = _getOperatorIndex(name);\\n            r.value[index] = newValue;\\n            if (opExists != newValue.active) {\\n                _setOperatorIndex(name, newValue.active, index);\\n            }\\n            return (index);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0bc8a4401c8bd301f493469fb5e6ebc09c2f12e137c531087290118f1b07b9e\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OracleAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary OracleAddress {\\n    bytes32 public constant ORACLE_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.oracleAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ORACLE_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ORACLE_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xa139a378de089b55879828683570348b2346ce9b77591272f2d35e2f5f4aaa31\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Shares.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Shares {\\n    bytes32 public constant SHARES_SLOT = bytes32(uint256(keccak256(\\\"river.state.shares\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(SHARES_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(SHARES_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x649260bef1a65d4b72d548f4bb58aa7271f538410e0c44a347daf78079a49e72\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/SharesPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary SharesPerOwner {\\n    bytes32 public constant SHARES_SLOT = bytes32(uint256(keccak256(\\\"river.state.sharesPerOwner\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => uint256) value;\\n    }\\n\\n    function get(address owner) internal view returns (uint256) {\\n        bytes32 slot = SHARES_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[owner];\\n    }\\n\\n    function set(address owner, uint256 newValue) internal {\\n        bytes32 slot = SHARES_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[owner] = newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x3ff40c3621969618a10b5bfbf4850fb239484cd62ac1a3293e2778df20e16c2b\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/TreasuryAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary TreasuryAddress {\\n    bytes32 public constant TREASURY_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.treasuryAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(TREASURY_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(TREASURY_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xb346d50a19c00aff4ab10332f82013bac291d580222306202503a6ba50ac499c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ValidatorKeys.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/BytesLib.sol\\\";\\n\\nlibrary ValidatorKeys {\\n    uint256 public constant PUBLIC_KEY_LENGTH = 48;\\n    uint256 public constant SIGNATURE_LENGTH = 96;\\n\\n    error InvalidPublicKey();\\n    error InvalidSignature();\\n\\n    bytes32 public constant VALIDATOR_KEYS_SLOT = bytes32(uint256(keccak256(\\\"river.state.validatorKeys\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(uint256 => mapping(uint256 => bytes)) value;\\n    }\\n\\n    function get(uint256 operatorIndex, uint256 idx)\\n        internal\\n        view\\n        returns (bytes memory publicKey, bytes memory signature)\\n    {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        bytes storage entry = r.value[operatorIndex][idx];\\n\\n        publicKey = BytesLib.slice(entry, 0, PUBLIC_KEY_LENGTH);\\n        signature = BytesLib.slice(entry, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n    }\\n\\n    function getKeys(\\n        uint256 operatorIndex,\\n        uint256 startIdx,\\n        uint256 amount\\n    ) internal view returns (bytes[] memory publicKey, bytes[] memory signatures) {\\n        publicKey = new bytes[](amount);\\n        signatures = new bytes[](amount);\\n\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        for (uint256 idx = startIdx; idx < startIdx + amount; ++idx) {\\n            bytes memory rawCredentials = r.value[operatorIndex][idx];\\n            publicKey[idx - startIdx] = BytesLib.slice(rawCredentials, 0, PUBLIC_KEY_LENGTH);\\n            signatures[idx - startIdx] = BytesLib.slice(rawCredentials, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n        }\\n    }\\n\\n    function set(\\n        uint256 operatorIndex,\\n        uint256 idx,\\n        bytes memory publicKey,\\n        bytes memory signature\\n    ) internal {\\n        bytes memory concatenatedKeys = BytesLib.concat(publicKey, signature);\\n\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[operatorIndex][idx] = concatenatedKeys;\\n    }\\n}\\n\",\"keccak256\":\"0xa74ce8befc7ae8b68ea2288b1f632328a7c3c34025274ba3f2921992e6a02ba1\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/WithdrawalCredentials.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary WithdrawalCredentials {\\n    bytes32 public constant WITHDRAWAL_CREDENTIALS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.withdrawalCredentials\\\")) - 1);\\n\\n    function get() internal view returns (bytes32) {\\n        return UnstructuredStorage.getStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT);\\n    }\\n\\n    function set(bytes32 newValue) internal {\\n        UnstructuredStorage.setStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x513908d9f006eee6cb307131125d6f25e7d484a1403f75dd2ed3500dfcaf58a0\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary AdministratorAddress {\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x6c103a106ff958994c38f055a316144416df36aeb299ba660e7b8af063931b72\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Version {\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VERSION_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf90d1ecf583061aa70dc464ec1fde21da6e9309601bcbba38f47d26257a1c656\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615283806100206000396000f3fe6080604052600436106102e05760003560e01c80635f41a0c411610184578063a9059cbb116100d6578063d56580ff1161008a578063f340fa0111610064578063f340fa0114610867578063f5eb42dc1461087a578063f87e52961461089a576102f1565b8063d56580ff14610810578063dd62ed3e14610830578063ec342ad014610850576102f1565b8063babcc539116100bb578063babcc539146107bb578063bf15af56146107db578063cfa2d2b7146107f0576102f1565b8063a9059cbb1461077b578063b747e7dd1461079b576102f1565b806380d4027e11610138578063950c44ec11610112578063950c44ec1461070057806395d89b41146107205780639e3947f314610766576102f1565b806380d4027e146106b6578063833b1fce146106d657806387f2adfb146106eb576102f1565b806370a082311161016957806370a0823114610656578063714b55b2146106765780637adbf97314610696576102f1565b80635f41a0c41461060757806363b4118f14610627576102f1565b806323b872dd1161023d5780633a98ef39116101f157806350545d2f116101cb57806350545d2f146105b2578063540bc5ea146105d25780635a16f135146105e7576102f1565b80633a98ef39146105405780633eb8b77a146105555780634679a9e114610592576102f1565b8063291206f611610222578063291206f6146104e7578063313ce5671461050757806336bf332514610523576102f1565b806323b872dd146104b2578063252d6a34146104d2576102f1565b806313d86aed1161029457806318160ddd1161027957806318160ddd1461045a5780631864636c1461047d5780631a4a7c611461049d576102f1565b806313d86aed146104255780631696740714610445576102f1565b806307a40008116102c557806307a40008146103a8578063095ea7b3146103d5578063110496e514610405576102f1565b806305f63c8a1461032357806306fdde0314610359576102f1565b366102f1576102ef60006108ba565b005b6040517fae962d4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561032f57600080fd5b5061034361033e366004614b3f565b61093e565b6040516103509190614bb0565b60405180910390f35b34801561036557600080fd5b5060408051808201909152600581527f526976657200000000000000000000000000000000000000000000000000000060208201525b6040516103509190614c20565b3480156103b457600080fd5b506103bd610a82565b6040516001600160a01b039091168152602001610350565b3480156103e157600080fd5b506103f56103f0366004614c4f565b610a91565b6040519015158152602001610350565b34801561041157600080fd5b506102ef610420366004614c89565b610b21565b34801561043157600080fd5b506102ef610440366004614b3f565b610bd6565b34801561045157600080fd5b506103bd610dae565b34801561046657600080fd5b5061046f610db8565b604051908152602001610350565b34801561048957600080fd5b506102ef610498366004614cbc565b610dc2565b3480156104a957600080fd5b5061046f6111f4565b3480156104be57600080fd5b506103f56104cd366004614d3b565b6111fe565b3480156104de57600080fd5b5061046f6113d4565b3480156104f357600080fd5b506102ef610502366004614b3f565b6113de565b34801561051357600080fd5b5060405160128152602001610350565b34801561052f57600080fd5b5061046f6801bc16d674ec80000081565b34801561054c57600080fd5b5061046f611449565b34801561056157600080fd5b50610575610570366004614dc0565b611453565b604080519283526001600160a01b03909116602083015201610350565b34801561059e57600080fd5b506102ef6105ad366004614e02565b6114ef565b3480156105be57600080fd5b506102ef6105cd366004614e1d565b611533565b3480156105de57600080fd5b5061046f606081565b3480156105f357600080fd5b506102ef610602366004614e71565b6116f7565b34801561061357600080fd5b506102ef610622366004614e94565b611789565b34801561063357600080fd5b50610647610642366004614e94565b61182f565b60405161035093929190614eb6565b34801561066257600080fd5b5061046f610671366004614e02565b61185c565b34801561068257600080fd5b506102ef610691366004614e94565b61186d565b3480156106a257600080fd5b506102ef6106b1366004614e02565b6118ef565b3480156106c257600080fd5b506102ef6106d1366004614eee565b611933565b3480156106e257600080fd5b506103bd611a7d565b3480156106f757600080fd5b5061046f611a87565b34801561070c57600080fd5b506102ef61071b366004614f1a565b611a91565b34801561072c57600080fd5b5060408051808201909152600481527f7245544800000000000000000000000000000000000000000000000000000000602082015261039b565b34801561077257600080fd5b5061046f611b39565b34801561078757600080fd5b506103f5610796366004614c4f565b611b43565b3480156107a757600080fd5b506102ef6107b6366004614f8b565b611c65565b3480156107c757600080fd5b506103f56107d6366004614e02565b612045565b3480156107e757600080fd5b5061046f603081565b3480156107fc57600080fd5b5061034361080b366004614dc0565b612050565b34801561081c57600080fd5b506102ef61082b366004614b3f565b6121cb565b34801561083c57600080fd5b5061046f61084b36600461500e565b612233565b34801561085c57600080fd5b5061046f620186a081565b6102ef610875366004614e02565b612246565b34801561088657600080fd5b5061046f610895366004614e02565b61224f565b3480156108a657600080fd5b506102ef6108b5366004615038565b61225a565b346108f1576040517f95b66fe900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108fb33346123c1565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b6109896040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b61099282612400565b6040805160e08101909152815460ff16151581526001820180549192916020840191906109be9061505b565b80601f01602080910402602001604051908101604052809291908181526020018280546109ea9061505b565b8015610a375780601f10610a0c57610100808354040283529160200191610a37565b820191906000526020600020905b815481529060010190602001808311610a1a57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a09091015292915050565b6000610a8c61249c565b905090565b600033610a9d81612045565b610aca5760405163472511eb60e11b81526001600160a01b03821660048201526024015b60405180910390fd5b610ad53385856124d0565b6040518381526001600160a01b0385169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259060200160405180910390a3600191505b5092915050565b610b2961249c565b6001600160a01b0316336001600160a01b031614158015610b635750610b4d612527565b6001600160a01b0316336001600160a01b031614155b15610b835760405163472511eb60e11b8152336004820152602401610ac1565b610b8d8282612557565b816001600160a01b03167f1b4f0c8c88fcaadd952eda5461f779c8707eb21acf10b63097c2388c6ab3849182604051610bca911515815260200190565b60405180910390a25050565b6000610bf4610bee6801bc16d674ec800000476150a6565b836125b2565b905080610c2d576040517f81b5ad6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610c39836125c7565b8151919350915080610c77576040517f800526b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83811115610cb1576040517f5993bd5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8151818114610cec576040517f8b97390c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610cf66125dc565b905080610d2f576040517f9be7315900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83811015610d8957610d77868281518110610d4f57610d4f6150c8565b6020026020010151868381518110610d6957610d696150c8565b60200260200101518461260c565b610d826001826150de565b9050610d32565b50610da583610d96612aa7565b610da091906150de565b612ad7565b50505050505050565b6000610a8c612b0a565b6000610a8c612b14565b82610dcb612b0a565b6001600160a01b0316336001600160a01b03161415610fd7576000610def85612400565b905082610e0f576040516379b348ff60e11b815260040160405180910390fd5b60005b83811015610f92576000858583818110610e2e57610e2e6150c8565b9050602002013590508260040154811015610e5c5760405163213af80760e21b815260040160405180910390fd5b82600501548110610e80576040516317df2d8d60e01b815260040160405180910390fd5b600082118015610eca57508585610e986001856150f6565b818110610ea757610ea76150c8565b90506020020135868684818110610ec057610ec06150c8565b9050602002013510155b15610ee85760405163c9ee26af60e01b815260040160405180910390fd5b600060018460050154610efb91906150f6565b9050600080610f0a8a84612b80565b91509150610f1a8a858484612d08565b610f618a8460005b6040519080825280601f01601f191660200182016040528015610f4c576020820181803683370190505b50604080516000815260208101909152612d08565b6001866005016000828254610f7691906150f6565b925050819055505050505080610f8b90615123565b9050610e12565b50847f3162702bacdcc8640bbae8973e0bfe03af8a527f10b58caaf3695f0b268d7e908260050154604051610fc991815260200190565b60405180910390a2506111ee565b6000610fe282612400565b805490915060ff1661100a576040516301550a7360e41b815260048101839052602401610ac1565b60028101546001600160a01b031633146110395760405163472511eb60e11b8152336004820152602401610ac1565b600061104486612400565b905083611064576040516379b348ff60e11b815260040160405180910390fd5b60005b848110156111ac576000868683818110611083576110836150c8565b90506020020135905082600401548110156110b15760405163213af80760e21b815260040160405180910390fd5b826005015481106110d5576040516317df2d8d60e01b815260040160405180910390fd5b60008211801561111f575086866110ed6001856150f6565b8181106110fc576110fc6150c8565b90506020020135878784818110611115576111156150c8565b9050602002013510155b1561113d5760405163c9ee26af60e01b815260040160405180910390fd5b60006001846005015461115091906150f6565b905060008061115f8b84612b80565b9150915061116f8b858484612d08565b61117b8b846000610f22565b600186600501600082825461119091906150f6565b9250508190555050505050806111a590615123565b9050611067565b50857f3162702bacdcc8640bbae8973e0bfe03af8a527f10b58caaf3695f0b268d7e9082600501546040516111e391815260200190565b60405180910390a250505b50505050565b6000610a8c612d6d565b60008361120a81612045565b6112325760405163472511eb60e11b81526001600160a01b0382166004820152602401610ac1565b8361123c81612045565b6112645760405163472511eb60e11b81526001600160a01b0382166004820152602401610ac1565b83611282576040516336b216db60e21b815260040160405180910390fd5b6001600160a01b038616331461130f57600061129e8733612da2565b9050848110156112f9576040517f7b936de30000000000000000000000000000000000000000000000000000000081526001600160a01b03881660048201523360248201526044810182905260648101869052608401610ac1565b61130d873361130888856150f6565b6124d0565b505b8361131987612dfa565b1015611338576040516351940b3960e11b815260040160405180910390fd5b600061134385612e0d565b905061136287826113538a612e45565b61135d91906150f6565b612e93565b61137a868261137089612e45565b61135d91906150de565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040516113bf91815260200190565b60405180910390a35060019695505050505050565b6000610a8c612edf565b6113e6612b0a565b6001600160a01b0316336001600160a01b0316146114195760405163472511eb60e11b8152336004820152602401610ac1565b620186a081111561143d5760405163a9cb9e0d60e01b815260040160405180910390fd5b61144681612f0f565b50565b6000610a8c612f3d565b60008061149584848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612f4792505050565b91506114d684848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612fd792505050565b6002015491946001600160a01b03909216935090915050565b6114f7612b0a565b6001600160a01b0316336001600160a01b03161461152a5760405163472511eb60e11b8152336004820152602401610ac1565b61144681613043565b61153b612b0a565b6001600160a01b0316336001600160a01b03161461156e5760405163472511eb60e11b8152336004820152602401610ac1565b6115ad83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061307192505050565b1515600114156115ed5782826040517f832eebc5000000000000000000000000000000000000000000000000000000008152600401610ac192919061513e565b60006040518060e0016040528060011515815260200185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b0385166020808401919091526040808401839052606084018390526080840183905260a09093018290528251601f8801829004820281018201909352868352929350916116ac9190879087908190840183828082843760009201919091525086925061307c915050565b9050807f28febbb5486eda5a1e47ad578f9cb32c8a1983c86c80ab823ea5dc1fc04ede5e836020015184604001516040516116e892919061516d565b60405180910390a25050505050565b6116ff612b0a565b6001600160a01b0316336001600160a01b0316146117325760405163472511eb60e11b8152336004820152602401610ac1565b600061173d83612400565b805460ff1916831515908117825560405190815290915083907fe3bc5e5d3b000a1f65d146c40a38d89b1743b5729f4c6fe65f2e4b2dc620f2f2906020015b60405180910390a2505050565b611791612b0a565b6001600160a01b0316336001600160a01b0316146117c45760405163472511eb60e11b8152336004820152602401610ac1565b60006117cf83612400565b905080600401548211156117f65760405163a9cb9e0d60e01b815260040160405180910390fd5b6006810182905560405182815283907f773694db4f98cd263e42d4f798bcf603781d4491e48e8cbe96c219c1f13b777d9060200161177c565b606080600061183e8585612b80565b909350915061184c85612400565b6004015484111590509250925092565b600061186782612dfa565b92915050565b611875612b0a565b6001600160a01b0316336001600160a01b0316146118a85760405163472511eb60e11b8152336004820152602401610ac1565b60006118b383612400565b6003810183905560405183815290915083907f3adbeb5fbb94c52b64d90b31188c68a740868dde2238e03a04d581cae22cedf09060200161177c565b6118f7612b0a565b6001600160a01b0316336001600160a01b03161461192a5760405163472511eb60e11b8152336004820152602401610ac1565b61144681613277565b61193b6132a5565b6001600160a01b0316336001600160a01b03161461196e5760405163472511eb60e11b8152336004820152602401610ac1565b611976612aa7565b8311156119c15782611986612aa7565b6040517f76179ac500000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610ac1565b60006119cb612edf565b905060006119d76132d5565b6119e190866150f6565b90506119ec84613305565b6119f585613333565b6119fe83613361565b83821015611a3557611a35611a1c826801bc16d674ec800000615198565b611a2684876150f6565b611a3091906150f6565b61338f565b60408051868152602081018690529081018490527f98e488f5118fc11ab540716c2afc4e440c0a892d27a4efef33db94b4f9da65899060600160405180910390a15050505050565b6000610a8c6132a5565b6000610a8c612aa7565b6000611a9b613597565b8114611ae55780611aaa613597565b6040517fe7e93b3800000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610ac1565b611af8611af38260016150de565b6135c7565b611b01866135f5565b611b0a846135fe565b611b1383612f0f565b611b1c8261362c565b611b26888861365a565b611b2f8561152a565b5050505050505050565b6000610a8c6132d5565b600033611b4f81612045565b611b775760405163472511eb60e11b81526001600160a01b0382166004820152602401610ac1565b83611b8181612045565b611ba95760405163472511eb60e11b81526001600160a01b0382166004820152602401610ac1565b83611bc7576040516336b216db60e21b815260040160405180910390fd5b83611bd133612dfa565b1015611bf0576040516351940b3960e11b815260040160405180910390fd5b6000611bfb85612e0d565b9050611c0b338261135333612e45565b611c19868261137089612e45565b6040518581526001600160a01b0387169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600195945050505050565b85611c6e612b0a565b6001600160a01b0316336001600160a01b03161415611e3d5785611ca5576040516379b348ff60e11b815260040160405180910390fd5b611cb0603087615198565b8414611ccf5760405163287c2be760e21b815260040160405180910390fd5b611cda606087615198565b8214611cf957604051634be6321b60e01b815260040160405180910390fd5b6000611d0488612400565b905060005b87811015611de3576000611d6188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d5a925060309150869050615198565b603061366c565b90506000611db387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611dac925060609150879050615198565b606061366c565b9050611dd08b848660050154611dc991906150de565b8484612d08565b505080611ddc90615123565b9050611d09565b5086816005016000828254611df891906150de565b9091555050600581015460405190815288907f5974470818610308ee3a0d809bad2cd13d57a3e9a685d3ae337fdef1d2d1b6539060200160405180910390a250610da5565b6000611e4882612400565b805490915060ff16611e70576040516301550a7360e41b815260048101839052602401610ac1565b60028101546001600160a01b03163314611e9f5760405163472511eb60e11b8152336004820152602401610ac1565b86611ebd576040516379b348ff60e11b815260040160405180910390fd5b611ec8603088615198565b8514611ee75760405163287c2be760e21b815260040160405180910390fd5b611ef2606088615198565b8314611f1157604051634be6321b60e01b815260040160405180910390fd5b6000611f1c89612400565b905060005b88811015611fe6576000611f7289898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d5a925060309150869050615198565b90506000611fbd88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611dac925060609150879050615198565b9050611fd38c848660050154611dc991906150de565b505080611fdf90615123565b9050611f21565b5087816005016000828254611ffb91906150de565b9091555050600581015460405190815289907f5974470818610308ee3a0d809bad2cd13d57a3e9a685d3ae337fdef1d2d1b6539060200160405180910390a2505050505050505050565b600061186782613794565b61209b6040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b6120da83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612fd792505050565b6040805160e08101909152815460ff16151581526001820180549192916020840191906121069061505b565b80601f01602080910402602001604051908101604052809291908181526020018280546121329061505b565b801561217f5780601f106121545761010080835404028352916020019161217f565b820191906000526020600020905b81548152906001019060200180831161216257829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a0909101529392505050565b6121d3612b0a565b6001600160a01b0316336001600160a01b0316146122065760405163472511eb60e11b8152336004820152602401610ac1565b620186a081111561222a5760405163a9cb9e0d60e01b815260040160405180910390fd5b6114468161362c565b600061223f8383612da2565b9392505050565b611446816108ba565b600061186782612e45565b81612263612b0a565b6001600160a01b0316336001600160a01b031614156122f257600061228784612400565b60028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915560405190815290915084907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e79060200160405180910390a250505050565b60006122fd82612400565b805490915060ff16612325576040516301550a7360e41b815260048101839052602401610ac1565b60028101546001600160a01b031633146123545760405163472511eb60e11b8152336004820152602401610ac1565b600061235f85612400565b60028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03871690811790915560405190815290915085907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e7906020016116e8565b6123ca82613794565b6123f25760405163472511eb60e11b81526001600160a01b0383166004820152602401610ac1565b6123fc828261379f565b5050565b60008061242e60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe101136150f6565b805490915081908410612470576040517fd191a36c00000000000000000000000000000000000000000000000000000000815260048101859052602401610ac1565b806000018481548110612485576124856150c8565b906000526020600020906007020192505050919050565b6000610a8c6124cc60017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b806150f6565b5490565b60006124fd60017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee054078476150f6565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b6000610a8c6124cc60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb1136150f6565b600061258460017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a41356150f6565b6001600160a01b03939093166000908152602093909352506040909120805460ff1916911515919091179055565b60008183116125c1578261223f565b50919050565b6060806125d383613808565b91509150915091565b6000610a8c6124cc60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c426150f6565b6030835114612647576040517f50cb553000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060825114612682576040517f408ebd3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6801bc16d674ec800000600061269c633b9aca00836150a6565b9050816126ad82633b9aca00615198565b146126ba576126ba6151b7565b600060026126c787613b52565b6040516126d491906151cd565b602060405180830381855afa1580156126f1573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061271491906151e9565b90506000600280612728886000604061366c565b60405161273591906151cd565b602060405180830381855afa158015612752573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061277591906151e9565b60026127956127908a604061278b8160606150f6565b61366c565b613b52565b6040516127a291906151cd565b602060405180830381855afa1580156127bf573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906127e291906151e9565b60408051602081019390935282015260600160408051601f198184030181529082905261280e916151cd565b602060405180830381855afa15801561282b573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061284e91906151e9565b905060006002808488604051602001612871929190918252602082015260400190565b60408051601f198184030181529082905261288b916151cd565b602060405180830381855afa1580156128a8573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906128cb91906151e9565b60026128d687613bdb565b604080516020810192909252810186905260600160408051601f1981840301815290829052612904916151cd565b602060405180830381855afa158015612921573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061294491906151e9565b60408051602081019390935282015260600160408051601f1981840301815290829052612970916151cd565b602060405180830381855afa15801561298d573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906129b091906151e9565b905060006129be86476150f6565b90506129c8613c21565b6001600160a01b03166322895118878b8a6040516020016129eb91815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b8152600401612a1b9493929190615202565b6000604051808303818588803b158015612a3457600080fd5b505af1158015612a48573d6000803e3d6000fd5b5050505050804714612a9c5760405162461bcd60e51b815260206004820152601b60248201527f455850454354494e475f4445504f5349545f544f5f48415050454e00000000006044820152606401610ac1565b505050505050505050565b6000610a8c6124cc60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a86150f6565b611446612b0560017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a86150f6565b829055565b6000610a8c612527565b600080612b1f6132d5565b90506000612b2b612aa7565b905080821015612b77576801bc16d674ec800000612b4983836150f6565b612b539190615198565b47612b5c612edf565b612b6691906150de565b612b7091906150de565b9250505090565b47612b66612edf565b6060806000612bb060017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a082912855746150f6565b600086815260208281526040808320888452909152902080549192508291612c64908290612bdd9061505b565b80601f0160208091040260200160405190810160405280929190818152602001828054612c099061505b565b8015612c565780601f10612c2b57610100808354040283529160200191612c56565b820191906000526020600020905b815481529060010190602001808311612c3957829003601f168201915b50505050506000603061366c565b9450612cfc818054612c759061505b565b80601f0160208091040260200160405190810160405280929190818152602001828054612ca19061505b565b8015612cee5780601f10612cc357610100808354040283529160200191612cee565b820191906000526020600020905b815481529060010190602001808311612cd157829003601f168201915b50505050506030606061366c565b93505050509250929050565b6000612d148383613c51565b90506000612d4360017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a082912855746150f6565b600087815260208281526040808320898452825290912084519293508392611b2f92860190614aa6565b600080612d9b60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe101136150f6565b5492915050565b600080612dd060017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee054078476150f6565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b6000611867612e0883612e45565b613cce565b600080612e18612b14565b905080612e285750600092915050565b80612e31613cf2565b612e3b9085615198565b61223f91906150a6565b600080612e7360017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a88386150f6565b6001600160a01b0390931660009081526020939093525050604090205490565b6000612ec060017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a88386150f6565b6001600160a01b03909316600090815260209390935250604090912055565b6000610a8c6124cc60017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e609006150f6565b611446612b0560017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a376150f6565b6000610a8c613cf2565b600080612f7560017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd276150f6565b60405190915081908190612f8a9086906151cd565b9081526040519081900360200190205460ff16612fac57506000199392505050565b6040518190612fbc9086906151cd565b90815260200160405180910390206001015492505050919050565b60008061300560017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe101136150f6565b9050600061301284613d22565b8254909150829081908390811061302b5761302b6150c8565b90600052602060002090600702019350505050919050565b611446612b0560017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b806150f6565b600061186782613db0565b60008061308884613db0565b905060006130b760017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe101136150f6565b905080826131935780546001808201835560008381526020908190208851600790940201805460ff191693151593909317835587810151805189949361310293908501920190614aa6565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c0909101516006909101558451815461317b918891613176906001906150f6565b613e0e565b8054613189906001906150f6565b9350505050611867565b600061319e87613d22565b9050858260000182815481106131b6576131b66150c8565b6000918252602091829020835160079290920201805460ff191691151591909117815582820151805191926131f392600185019290910190614aa6565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c090910151600690910155855115158415151461326c5761326c87876000015183613e0e565b935061186792505050565b611446612b0560017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb6150f6565b6000610a8c6124cc60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb6150f6565b6000610a8c6124cc60017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a376150f6565b611446612b0560017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e609006150f6565b611446612b0560017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a376150f6565b611446612b0560017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb5296150f6565b6000613399613e92565b905060006133a78284615198565b620186a06133b3612b14565b6133bd9190615198565b6133c791906150f6565b826133d0612f3d565b6133da9086615198565b6133e49190615198565b6133ee91906150a6565b90506000620186a06133fe613ec2565b6134089084615198565b61341291906150a6565b9050600061341e613ef2565b90506000815167ffffffffffffffff81111561343c5761343c61510d565b604051908082528060200260200182016040528015613465578160200160208202803683370190505b5090506000805b83518110156134fa576000848281518110613489576134896150c8565b602002602001015160c001518583815181106134a7576134a76150c8565b6020026020010151608001516134bd91906150f6565b90506134c981846150de565b9250808483815181106134de576134de6150c8565b6020908102919091010152506134f381615123565b905061346c565b50801561357d57600061350d82866150a6565b905060005b835181101561357657613566858281518110613530576135306150c8565b6020026020010151604001518386848151811061354f5761354f6150c8565b60200260200101516135619190615198565b6141b1565b61356f81615123565b9050613512565b5050613582565b600093505b610da561358d61421f565b61356186886150f6565b6000610a8c6124cc60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6150f6565b611446612b0560017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6150f6565b6114468161424f565b611446612b0560017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa36150f6565b611446612b0560017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a86150f6565b6136638261427d565b6123fc816142ab565b60608161367a81601f6150de565b10156136c85760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610ac1565b6136d282846150de565b845110156137225760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610ac1565b606082158015613741576040519150600082526020820160405261378b565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561377a578051835260209283019201613762565b5050858452601f01601f1916604052505b50949350505050565b6000611867826142d9565b60006137a9612b14565b90506000826137b6612b14565b6137c091906150f6565b9050806137d6576137d184836141b1565b6111ee565b6000816137e1612f3d565b6137eb9086615198565b6137f591906150a6565b905061380185826141b1565b5050505050565b606080600061381561432a565b905080516000141561388357604080516000808252602082019092529061384c565b60608152602001906001900390816138375790505b506040805160008082526020820190925290613878565b60608152602001906001900390816138635790505b509250925050915091565b600060015b8251811015613937578282815181106138a3576138a36150c8565b602002602001015160c001518383815181106138c1576138c16150c8565b6020026020010151608001516138d791906150f6565b8382815181106138e9576138e96150c8565b602002602001015160c00151848381518110613907576139076150c8565b60200260200101516080015161391d91906150f6565b1015613927578091505b61393081615123565b9050613888565b50600082828151811061394c5761394c6150c8565b60200260200101516080015161399c84848151811061396d5761396d6150c8565b602002602001015160a0015185858151811061398b5761398b6150c8565b6020026020010151606001516125b2565b6139a691906150f6565b905080613a115760408051600080825260208201909252906139d8565b60608152602001906001900390816139c35790505b506040805160008082526020820190925290613a04565b60608152602001906001900390816139ef5790505b5094509450505050915091565b6000613a39848481518110613a2857613a286150c8565b602002602001015160200151612fd7565b9050868210613aae57613a87848481518110613a5757613a576150c8565b602002602001015160e00151858581518110613a7557613a756150c8565b6020026020010151608001518961470e565b809650819750505086816004016000828254613aa391906150de565b90915550613b499050565b613af3848481518110613ac357613ac36150c8565b602002602001015160e00151858581518110613ae157613ae16150c8565b6020026020010151608001518461470e565b809650819750505081816004016000828254613b0f91906150de565b909155506000905080613b2a613b25858b6150f6565b613808565b91509150613b388883614917565b9750613b448782614917565b965050505b50505050915091565b60606020825110158015613b6857506040825111155b613b7457613b746151b7565b815160401415613b82575090565b60408051602080825281830190925260009160208201818036833701905050905060006020820152825160201415613bbe5761223f8382613c51565b61223f83613bd68360008751604061278b91906150f6565b613c51565b600081815b6008811015613c0957600892831b60ff831617929190911c90613c0281615123565b9050613be0565b508015613c1857613c186151b7565b5060c01b919050565b6000610a8c6124cc60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf912606150f6565b6060806040519050835180825260208201818101602087015b81831015613c82578051835260209283019201613c6a565b50855184518101855292509050808201602086015b81831015613caf578051835260209283019201613c97565b508651929092011591909101601f01601f191660405250905092915050565b600080613cd9613cf2565b905080613ce95750600092915050565b80612e31612b14565b6000610a8c6124cc60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b6150f6565b600080613d5060017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd276150f6565b60405190915081908190613d659086906151cd565b9081526040519081900360200190205460ff16612fac57836040517f34eddfcf000000000000000000000000000000000000000000000000000000008152600401610ac19190614c20565b600080613dde60017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd276150f6565b60405190915081908190613df39086906151cd565b9081526040519081900360200190205460ff16949350505050565b6000613e3b60017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd276150f6565b604080518082018252851515815260208101859052905191925082918290613e649088906151cd565b908152604051602091819003820190208251815460ff19169015151781559101516001909101555050505050565b6000610a8c6124cc60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a376150f6565b6000610a8c6124cc60017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a86150f6565b60606000613f2160017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe101136150f6565b9050806000805b8254811015613f8057826000018181548110613f4657613f466150c8565b600091825260209091206007909102015460ff16151560011415613f7057613f6d82615123565b91505b613f7981615123565b9050613f28565b5060008167ffffffffffffffff811115613f9c57613f9c61510d565b60405190808252806020026020018201604052801561401857816020015b6140056040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b815260200190600190039081613fba5790505b5090506000805b84548110156141a65784600001818154811061403d5761403d6150c8565b600091825260209091206007909102015460ff1615156001141561419657846000018181548110614070576140706150c8565b60009182526020918290206040805160e08101909152600790920201805460ff161515825260018101805492939192918401916140ac9061505b565b80601f01602080910402602001604051908101604052809291908181526020018280546140d89061505b565b80156141255780601f106140fa57610100808354040283529160200191614125565b820191906000526020600020905b81548152906001019060200180831161410857829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a090910152835184908490811061417e5761417e6150c8565b60200260200101819052508161419390615123565b91505b61419f81615123565b905061401f565b509095945050505050565b6141cc816141bd613cf2565b6141c791906150de565b614a2a565b6141da828261137085612e45565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000610a8c6124cc60017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa36150f6565b611446612b0560017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb1136150f6565b611446612b0560017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf912606150f6565b611446612b0560017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c426150f6565b60008061430760017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a41356150f6565b6001600160a01b0390931660009081526020939093525050604090205460ff1690565b6060600061435960017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe101136150f6565b9050806000805b82548110156144a157614480836000018281548110614381576143816150c8565b60009182526020918290206040805160e08101909152600790920201805460ff161515825260018101805492939192918401916143bd9061505b565b80601f01602080910402602001604051908101604052809291908181526020018280546143e99061505b565b80156144365780601f1061440b57610100808354040283529160200191614436565b820191906000526020600020905b81548152906001019060200180831161441957829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a090910152614a58565b156144915761448e82615123565b91505b61449a81615123565b9050614360565b5060008167ffffffffffffffff8111156144bd576144bd61510d565b60405190808252806020026020018201604052801561454157816020015b61452e6040518061010001604052806000151581526020016060815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816144db5790505b5090506000805b84548110156141a6576000856000018281548110614568576145686150c8565b60009182526020918290206040805160e08101909152600790920201805460ff161515825260018101805492939192918401916145a49061505b565b80601f01602080910402602001604051908101604052809291908181526020018280546145d09061505b565b801561461d5780601f106145f25761010080835404028352916020019161461d565b820191906000526020600020905b81548152906001019060200180831161460057829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a090910152905061466d81614a58565b156146fd576040518061010001604052808260000151151581526020018260200151815260200182604001516001600160a01b0316815260200182606001518152602001826080015181526020018260a0015181526020018260c001518152602001838152508484815181106146e5576146e56150c8565b6020026020010181905250826146fa90615123565b92505b5061470781615123565b9050614548565b6060808267ffffffffffffffff81111561472a5761472a61510d565b60405190808252806020026020018201604052801561475d57816020015b60608152602001906001900390816147485790505b5091508267ffffffffffffffff8111156147795761477961510d565b6040519080825280602002602001820160405280156147ac57816020015b60608152602001906001900390816147975790505b50905060006147dc60017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a082912855746150f6565b905080855b6147eb86886150de565b81101561490c57600088815260208381526040808320848452909152812080546148149061505b565b80601f01602080910402602001604051908101604052809291908181526020018280546148409061505b565b801561488d5780601f106148625761010080835404028352916020019161488d565b820191906000526020600020905b81548152906001019060200180831161487057829003601f168201915b505050505090506148a1816000603061366c565b866148ac8a856150f6565b815181106148bc576148bc6150c8565b60200260200101819052506148d4816030606061366c565b856148df8a856150f6565b815181106148ef576148ef6150c8565b6020026020010181905250508061490590615123565b90506147e1565b505050935093915050565b60608151835161492791906150de565b67ffffffffffffffff81111561493f5761493f61510d565b60405190808252806020026020018201604052801561497257816020015b606081526020019060019003908161495d5790505b50905060005b83518110156149c957838181518110614993576149936150c8565b60200260200101518282815181106149ad576149ad6150c8565b6020026020010181905250806149c290615123565b9050614978565b5060005b8251811015610b1a578281815181106149e8576149e86150c8565b6020026020010151828551836149fe91906150de565b81518110614a0e57614a0e6150c8565b602002602001018190525080614a2390615123565b90506149cd565b611446612b0560017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b6150f6565b80516000908015614a7f57508160c001518260800151614a7891906150f6565b8260a00151115b801561186757508160c001518260800151614a9a91906150f6565b82606001511192915050565b828054614ab29061505b565b90600052602060002090601f016020900481019282614ad45760008555614b1a565b82601f10614aed57805160ff1916838001178555614b1a565b82800160010185558215614b1a579182015b82811115614b1a578251825591602001919060010190614aff565b50614b26929150614b2a565b5090565b5b80821115614b265760008155600101614b2b565b600060208284031215614b5157600080fd5b5035919050565b60005b83811015614b73578181015183820152602001614b5b565b838111156111ee5750506000910152565b60008151808452614b9c816020860160208601614b58565b601f01601f19169290920160200192915050565b602081528151151560208201526000602083015160e06040840152614bd9610100840182614b84565b90506001600160a01b03604085015116606084015260608401516080840152608084015160a084015260a084015160c084015260c084015160e08401528091505092915050565b60208152600061223f6020830184614b84565b80356001600160a01b0381168114614c4a57600080fd5b919050565b60008060408385031215614c6257600080fd5b614c6b83614c33565b946020939093013593505050565b80358015158114614c4a57600080fd5b60008060408385031215614c9c57600080fd5b614ca583614c33565b9150614cb360208401614c79565b90509250929050565b600080600060408486031215614cd157600080fd5b83359250602084013567ffffffffffffffff80821115614cf057600080fd5b818601915086601f830112614d0457600080fd5b813581811115614d1357600080fd5b8760208260051b8501011115614d2857600080fd5b6020830194508093505050509250925092565b600080600060608486031215614d5057600080fd5b614d5984614c33565b9250614d6760208501614c33565b9150604084013590509250925092565b60008083601f840112614d8957600080fd5b50813567ffffffffffffffff811115614da157600080fd5b602083019150836020828501011115614db957600080fd5b9250929050565b60008060208385031215614dd357600080fd5b823567ffffffffffffffff811115614dea57600080fd5b614df685828601614d77565b90969095509350505050565b600060208284031215614e1457600080fd5b61223f82614c33565b600080600060408486031215614e3257600080fd5b833567ffffffffffffffff811115614e4957600080fd5b614e5586828701614d77565b9094509250614e68905060208501614c33565b90509250925092565b60008060408385031215614e8457600080fd5b82359150614cb360208401614c79565b60008060408385031215614ea757600080fd5b50508035926020909101359150565b606081526000614ec96060830186614b84565b8281036020840152614edb8186614b84565b9150508215156040830152949350505050565b600080600060608486031215614f0357600080fd5b505081359360208301359350604090920135919050565b600080600080600080600060e0888a031215614f3557600080fd5b614f3e88614c33565b965060208801359550614f5360408901614c33565b9450614f6160608901614c33565b9350614f6f60808901614c33565b925060a0880135915060c0880135905092959891949750929550565b60008060008060008060808789031215614fa457600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115614fca57600080fd5b614fd68a838b01614d77565b90965094506060890135915080821115614fef57600080fd5b50614ffc89828a01614d77565b979a9699509497509295939492505050565b6000806040838503121561502157600080fd5b61502a83614c33565b9150614cb360208401614c33565b6000806040838503121561504b57600080fd5b82359150614cb360208401614c33565b600181811c9082168061506f57607f821691505b602082108114156125c157634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000826150c357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600082198211156150f1576150f1615090565b500190565b60008282101561510857615108615090565b500390565b634e487b7160e01b600052604160045260246000fd5b600060001982141561513757615137615090565b5060010190565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6040815260006151806040830185614b84565b90506001600160a01b03831660208301529392505050565b60008160001904831182151516156151b2576151b2615090565b500290565b634e487b7160e01b600052600160045260246000fd5b600082516151df818460208701614b58565b9190910192915050565b6000602082840312156151fb57600080fd5b5051919050565b6080815260006152156080830187614b84565b82810360208401526152278187614b84565b9050828103604084015261523b8186614b84565b9150508260608301529594505050505056fea2646970667358221220200a4b425f438c2fb35f24095af27d28ebe6325185cbb4a3466ac2bd2e20979464736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106102e05760003560e01c80635f41a0c411610184578063a9059cbb116100d6578063d56580ff1161008a578063f340fa0111610064578063f340fa0114610867578063f5eb42dc1461087a578063f87e52961461089a576102f1565b8063d56580ff14610810578063dd62ed3e14610830578063ec342ad014610850576102f1565b8063babcc539116100bb578063babcc539146107bb578063bf15af56146107db578063cfa2d2b7146107f0576102f1565b8063a9059cbb1461077b578063b747e7dd1461079b576102f1565b806380d4027e11610138578063950c44ec11610112578063950c44ec1461070057806395d89b41146107205780639e3947f314610766576102f1565b806380d4027e146106b6578063833b1fce146106d657806387f2adfb146106eb576102f1565b806370a082311161016957806370a0823114610656578063714b55b2146106765780637adbf97314610696576102f1565b80635f41a0c41461060757806363b4118f14610627576102f1565b806323b872dd1161023d5780633a98ef39116101f157806350545d2f116101cb57806350545d2f146105b2578063540bc5ea146105d25780635a16f135146105e7576102f1565b80633a98ef39146105405780633eb8b77a146105555780634679a9e114610592576102f1565b8063291206f611610222578063291206f6146104e7578063313ce5671461050757806336bf332514610523576102f1565b806323b872dd146104b2578063252d6a34146104d2576102f1565b806313d86aed1161029457806318160ddd1161027957806318160ddd1461045a5780631864636c1461047d5780631a4a7c611461049d576102f1565b806313d86aed146104255780631696740714610445576102f1565b806307a40008116102c557806307a40008146103a8578063095ea7b3146103d5578063110496e514610405576102f1565b806305f63c8a1461032357806306fdde0314610359576102f1565b366102f1576102ef60006108ba565b005b6040517fae962d4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561032f57600080fd5b5061034361033e366004614b3f565b61093e565b6040516103509190614bb0565b60405180910390f35b34801561036557600080fd5b5060408051808201909152600581527f526976657200000000000000000000000000000000000000000000000000000060208201525b6040516103509190614c20565b3480156103b457600080fd5b506103bd610a82565b6040516001600160a01b039091168152602001610350565b3480156103e157600080fd5b506103f56103f0366004614c4f565b610a91565b6040519015158152602001610350565b34801561041157600080fd5b506102ef610420366004614c89565b610b21565b34801561043157600080fd5b506102ef610440366004614b3f565b610bd6565b34801561045157600080fd5b506103bd610dae565b34801561046657600080fd5b5061046f610db8565b604051908152602001610350565b34801561048957600080fd5b506102ef610498366004614cbc565b610dc2565b3480156104a957600080fd5b5061046f6111f4565b3480156104be57600080fd5b506103f56104cd366004614d3b565b6111fe565b3480156104de57600080fd5b5061046f6113d4565b3480156104f357600080fd5b506102ef610502366004614b3f565b6113de565b34801561051357600080fd5b5060405160128152602001610350565b34801561052f57600080fd5b5061046f6801bc16d674ec80000081565b34801561054c57600080fd5b5061046f611449565b34801561056157600080fd5b50610575610570366004614dc0565b611453565b604080519283526001600160a01b03909116602083015201610350565b34801561059e57600080fd5b506102ef6105ad366004614e02565b6114ef565b3480156105be57600080fd5b506102ef6105cd366004614e1d565b611533565b3480156105de57600080fd5b5061046f606081565b3480156105f357600080fd5b506102ef610602366004614e71565b6116f7565b34801561061357600080fd5b506102ef610622366004614e94565b611789565b34801561063357600080fd5b50610647610642366004614e94565b61182f565b60405161035093929190614eb6565b34801561066257600080fd5b5061046f610671366004614e02565b61185c565b34801561068257600080fd5b506102ef610691366004614e94565b61186d565b3480156106a257600080fd5b506102ef6106b1366004614e02565b6118ef565b3480156106c257600080fd5b506102ef6106d1366004614eee565b611933565b3480156106e257600080fd5b506103bd611a7d565b3480156106f757600080fd5b5061046f611a87565b34801561070c57600080fd5b506102ef61071b366004614f1a565b611a91565b34801561072c57600080fd5b5060408051808201909152600481527f7245544800000000000000000000000000000000000000000000000000000000602082015261039b565b34801561077257600080fd5b5061046f611b39565b34801561078757600080fd5b506103f5610796366004614c4f565b611b43565b3480156107a757600080fd5b506102ef6107b6366004614f8b565b611c65565b3480156107c757600080fd5b506103f56107d6366004614e02565b612045565b3480156107e757600080fd5b5061046f603081565b3480156107fc57600080fd5b5061034361080b366004614dc0565b612050565b34801561081c57600080fd5b506102ef61082b366004614b3f565b6121cb565b34801561083c57600080fd5b5061046f61084b36600461500e565b612233565b34801561085c57600080fd5b5061046f620186a081565b6102ef610875366004614e02565b612246565b34801561088657600080fd5b5061046f610895366004614e02565b61224f565b3480156108a657600080fd5b506102ef6108b5366004615038565b61225a565b346108f1576040517f95b66fe900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108fb33346123c1565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b6109896040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b61099282612400565b6040805160e08101909152815460ff16151581526001820180549192916020840191906109be9061505b565b80601f01602080910402602001604051908101604052809291908181526020018280546109ea9061505b565b8015610a375780601f10610a0c57610100808354040283529160200191610a37565b820191906000526020600020905b815481529060010190602001808311610a1a57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a09091015292915050565b6000610a8c61249c565b905090565b600033610a9d81612045565b610aca5760405163472511eb60e11b81526001600160a01b03821660048201526024015b60405180910390fd5b610ad53385856124d0565b6040518381526001600160a01b0385169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259060200160405180910390a3600191505b5092915050565b610b2961249c565b6001600160a01b0316336001600160a01b031614158015610b635750610b4d612527565b6001600160a01b0316336001600160a01b031614155b15610b835760405163472511eb60e11b8152336004820152602401610ac1565b610b8d8282612557565b816001600160a01b03167f1b4f0c8c88fcaadd952eda5461f779c8707eb21acf10b63097c2388c6ab3849182604051610bca911515815260200190565b60405180910390a25050565b6000610bf4610bee6801bc16d674ec800000476150a6565b836125b2565b905080610c2d576040517f81b5ad6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610c39836125c7565b8151919350915080610c77576040517f800526b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83811115610cb1576040517f5993bd5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8151818114610cec576040517f8b97390c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610cf66125dc565b905080610d2f576040517f9be7315900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83811015610d8957610d77868281518110610d4f57610d4f6150c8565b6020026020010151868381518110610d6957610d696150c8565b60200260200101518461260c565b610d826001826150de565b9050610d32565b50610da583610d96612aa7565b610da091906150de565b612ad7565b50505050505050565b6000610a8c612b0a565b6000610a8c612b14565b82610dcb612b0a565b6001600160a01b0316336001600160a01b03161415610fd7576000610def85612400565b905082610e0f576040516379b348ff60e11b815260040160405180910390fd5b60005b83811015610f92576000858583818110610e2e57610e2e6150c8565b9050602002013590508260040154811015610e5c5760405163213af80760e21b815260040160405180910390fd5b82600501548110610e80576040516317df2d8d60e01b815260040160405180910390fd5b600082118015610eca57508585610e986001856150f6565b818110610ea757610ea76150c8565b90506020020135868684818110610ec057610ec06150c8565b9050602002013510155b15610ee85760405163c9ee26af60e01b815260040160405180910390fd5b600060018460050154610efb91906150f6565b9050600080610f0a8a84612b80565b91509150610f1a8a858484612d08565b610f618a8460005b6040519080825280601f01601f191660200182016040528015610f4c576020820181803683370190505b50604080516000815260208101909152612d08565b6001866005016000828254610f7691906150f6565b925050819055505050505080610f8b90615123565b9050610e12565b50847f3162702bacdcc8640bbae8973e0bfe03af8a527f10b58caaf3695f0b268d7e908260050154604051610fc991815260200190565b60405180910390a2506111ee565b6000610fe282612400565b805490915060ff1661100a576040516301550a7360e41b815260048101839052602401610ac1565b60028101546001600160a01b031633146110395760405163472511eb60e11b8152336004820152602401610ac1565b600061104486612400565b905083611064576040516379b348ff60e11b815260040160405180910390fd5b60005b848110156111ac576000868683818110611083576110836150c8565b90506020020135905082600401548110156110b15760405163213af80760e21b815260040160405180910390fd5b826005015481106110d5576040516317df2d8d60e01b815260040160405180910390fd5b60008211801561111f575086866110ed6001856150f6565b8181106110fc576110fc6150c8565b90506020020135878784818110611115576111156150c8565b9050602002013510155b1561113d5760405163c9ee26af60e01b815260040160405180910390fd5b60006001846005015461115091906150f6565b905060008061115f8b84612b80565b9150915061116f8b858484612d08565b61117b8b846000610f22565b600186600501600082825461119091906150f6565b9250508190555050505050806111a590615123565b9050611067565b50857f3162702bacdcc8640bbae8973e0bfe03af8a527f10b58caaf3695f0b268d7e9082600501546040516111e391815260200190565b60405180910390a250505b50505050565b6000610a8c612d6d565b60008361120a81612045565b6112325760405163472511eb60e11b81526001600160a01b0382166004820152602401610ac1565b8361123c81612045565b6112645760405163472511eb60e11b81526001600160a01b0382166004820152602401610ac1565b83611282576040516336b216db60e21b815260040160405180910390fd5b6001600160a01b038616331461130f57600061129e8733612da2565b9050848110156112f9576040517f7b936de30000000000000000000000000000000000000000000000000000000081526001600160a01b03881660048201523360248201526044810182905260648101869052608401610ac1565b61130d873361130888856150f6565b6124d0565b505b8361131987612dfa565b1015611338576040516351940b3960e11b815260040160405180910390fd5b600061134385612e0d565b905061136287826113538a612e45565b61135d91906150f6565b612e93565b61137a868261137089612e45565b61135d91906150de565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040516113bf91815260200190565b60405180910390a35060019695505050505050565b6000610a8c612edf565b6113e6612b0a565b6001600160a01b0316336001600160a01b0316146114195760405163472511eb60e11b8152336004820152602401610ac1565b620186a081111561143d5760405163a9cb9e0d60e01b815260040160405180910390fd5b61144681612f0f565b50565b6000610a8c612f3d565b60008061149584848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612f4792505050565b91506114d684848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612fd792505050565b6002015491946001600160a01b03909216935090915050565b6114f7612b0a565b6001600160a01b0316336001600160a01b03161461152a5760405163472511eb60e11b8152336004820152602401610ac1565b61144681613043565b61153b612b0a565b6001600160a01b0316336001600160a01b03161461156e5760405163472511eb60e11b8152336004820152602401610ac1565b6115ad83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061307192505050565b1515600114156115ed5782826040517f832eebc5000000000000000000000000000000000000000000000000000000008152600401610ac192919061513e565b60006040518060e0016040528060011515815260200185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b0385166020808401919091526040808401839052606084018390526080840183905260a09093018290528251601f8801829004820281018201909352868352929350916116ac9190879087908190840183828082843760009201919091525086925061307c915050565b9050807f28febbb5486eda5a1e47ad578f9cb32c8a1983c86c80ab823ea5dc1fc04ede5e836020015184604001516040516116e892919061516d565b60405180910390a25050505050565b6116ff612b0a565b6001600160a01b0316336001600160a01b0316146117325760405163472511eb60e11b8152336004820152602401610ac1565b600061173d83612400565b805460ff1916831515908117825560405190815290915083907fe3bc5e5d3b000a1f65d146c40a38d89b1743b5729f4c6fe65f2e4b2dc620f2f2906020015b60405180910390a2505050565b611791612b0a565b6001600160a01b0316336001600160a01b0316146117c45760405163472511eb60e11b8152336004820152602401610ac1565b60006117cf83612400565b905080600401548211156117f65760405163a9cb9e0d60e01b815260040160405180910390fd5b6006810182905560405182815283907f773694db4f98cd263e42d4f798bcf603781d4491e48e8cbe96c219c1f13b777d9060200161177c565b606080600061183e8585612b80565b909350915061184c85612400565b6004015484111590509250925092565b600061186782612dfa565b92915050565b611875612b0a565b6001600160a01b0316336001600160a01b0316146118a85760405163472511eb60e11b8152336004820152602401610ac1565b60006118b383612400565b6003810183905560405183815290915083907f3adbeb5fbb94c52b64d90b31188c68a740868dde2238e03a04d581cae22cedf09060200161177c565b6118f7612b0a565b6001600160a01b0316336001600160a01b03161461192a5760405163472511eb60e11b8152336004820152602401610ac1565b61144681613277565b61193b6132a5565b6001600160a01b0316336001600160a01b03161461196e5760405163472511eb60e11b8152336004820152602401610ac1565b611976612aa7565b8311156119c15782611986612aa7565b6040517f76179ac500000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610ac1565b60006119cb612edf565b905060006119d76132d5565b6119e190866150f6565b90506119ec84613305565b6119f585613333565b6119fe83613361565b83821015611a3557611a35611a1c826801bc16d674ec800000615198565b611a2684876150f6565b611a3091906150f6565b61338f565b60408051868152602081018690529081018490527f98e488f5118fc11ab540716c2afc4e440c0a892d27a4efef33db94b4f9da65899060600160405180910390a15050505050565b6000610a8c6132a5565b6000610a8c612aa7565b6000611a9b613597565b8114611ae55780611aaa613597565b6040517fe7e93b3800000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610ac1565b611af8611af38260016150de565b6135c7565b611b01866135f5565b611b0a846135fe565b611b1383612f0f565b611b1c8261362c565b611b26888861365a565b611b2f8561152a565b5050505050505050565b6000610a8c6132d5565b600033611b4f81612045565b611b775760405163472511eb60e11b81526001600160a01b0382166004820152602401610ac1565b83611b8181612045565b611ba95760405163472511eb60e11b81526001600160a01b0382166004820152602401610ac1565b83611bc7576040516336b216db60e21b815260040160405180910390fd5b83611bd133612dfa565b1015611bf0576040516351940b3960e11b815260040160405180910390fd5b6000611bfb85612e0d565b9050611c0b338261135333612e45565b611c19868261137089612e45565b6040518581526001600160a01b0387169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600195945050505050565b85611c6e612b0a565b6001600160a01b0316336001600160a01b03161415611e3d5785611ca5576040516379b348ff60e11b815260040160405180910390fd5b611cb0603087615198565b8414611ccf5760405163287c2be760e21b815260040160405180910390fd5b611cda606087615198565b8214611cf957604051634be6321b60e01b815260040160405180910390fd5b6000611d0488612400565b905060005b87811015611de3576000611d6188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d5a925060309150869050615198565b603061366c565b90506000611db387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611dac925060609150879050615198565b606061366c565b9050611dd08b848660050154611dc991906150de565b8484612d08565b505080611ddc90615123565b9050611d09565b5086816005016000828254611df891906150de565b9091555050600581015460405190815288907f5974470818610308ee3a0d809bad2cd13d57a3e9a685d3ae337fdef1d2d1b6539060200160405180910390a250610da5565b6000611e4882612400565b805490915060ff16611e70576040516301550a7360e41b815260048101839052602401610ac1565b60028101546001600160a01b03163314611e9f5760405163472511eb60e11b8152336004820152602401610ac1565b86611ebd576040516379b348ff60e11b815260040160405180910390fd5b611ec8603088615198565b8514611ee75760405163287c2be760e21b815260040160405180910390fd5b611ef2606088615198565b8314611f1157604051634be6321b60e01b815260040160405180910390fd5b6000611f1c89612400565b905060005b88811015611fe6576000611f7289898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d5a925060309150869050615198565b90506000611fbd88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611dac925060609150879050615198565b9050611fd38c848660050154611dc991906150de565b505080611fdf90615123565b9050611f21565b5087816005016000828254611ffb91906150de565b9091555050600581015460405190815289907f5974470818610308ee3a0d809bad2cd13d57a3e9a685d3ae337fdef1d2d1b6539060200160405180910390a2505050505050505050565b600061186782613794565b61209b6040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b6120da83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612fd792505050565b6040805160e08101909152815460ff16151581526001820180549192916020840191906121069061505b565b80601f01602080910402602001604051908101604052809291908181526020018280546121329061505b565b801561217f5780601f106121545761010080835404028352916020019161217f565b820191906000526020600020905b81548152906001019060200180831161216257829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a0909101529392505050565b6121d3612b0a565b6001600160a01b0316336001600160a01b0316146122065760405163472511eb60e11b8152336004820152602401610ac1565b620186a081111561222a5760405163a9cb9e0d60e01b815260040160405180910390fd5b6114468161362c565b600061223f8383612da2565b9392505050565b611446816108ba565b600061186782612e45565b81612263612b0a565b6001600160a01b0316336001600160a01b031614156122f257600061228784612400565b60028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915560405190815290915084907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e79060200160405180910390a250505050565b60006122fd82612400565b805490915060ff16612325576040516301550a7360e41b815260048101839052602401610ac1565b60028101546001600160a01b031633146123545760405163472511eb60e11b8152336004820152602401610ac1565b600061235f85612400565b60028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03871690811790915560405190815290915085907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e7906020016116e8565b6123ca82613794565b6123f25760405163472511eb60e11b81526001600160a01b0383166004820152602401610ac1565b6123fc828261379f565b5050565b60008061242e60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe101136150f6565b805490915081908410612470576040517fd191a36c00000000000000000000000000000000000000000000000000000000815260048101859052602401610ac1565b806000018481548110612485576124856150c8565b906000526020600020906007020192505050919050565b6000610a8c6124cc60017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b806150f6565b5490565b60006124fd60017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee054078476150f6565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b6000610a8c6124cc60017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb1136150f6565b600061258460017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a41356150f6565b6001600160a01b03939093166000908152602093909352506040909120805460ff1916911515919091179055565b60008183116125c1578261223f565b50919050565b6060806125d383613808565b91509150915091565b6000610a8c6124cc60017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c426150f6565b6030835114612647576040517f50cb553000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060825114612682576040517f408ebd3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6801bc16d674ec800000600061269c633b9aca00836150a6565b9050816126ad82633b9aca00615198565b146126ba576126ba6151b7565b600060026126c787613b52565b6040516126d491906151cd565b602060405180830381855afa1580156126f1573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061271491906151e9565b90506000600280612728886000604061366c565b60405161273591906151cd565b602060405180830381855afa158015612752573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061277591906151e9565b60026127956127908a604061278b8160606150f6565b61366c565b613b52565b6040516127a291906151cd565b602060405180830381855afa1580156127bf573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906127e291906151e9565b60408051602081019390935282015260600160408051601f198184030181529082905261280e916151cd565b602060405180830381855afa15801561282b573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061284e91906151e9565b905060006002808488604051602001612871929190918252602082015260400190565b60408051601f198184030181529082905261288b916151cd565b602060405180830381855afa1580156128a8573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906128cb91906151e9565b60026128d687613bdb565b604080516020810192909252810186905260600160408051601f1981840301815290829052612904916151cd565b602060405180830381855afa158015612921573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061294491906151e9565b60408051602081019390935282015260600160408051601f1981840301815290829052612970916151cd565b602060405180830381855afa15801561298d573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906129b091906151e9565b905060006129be86476150f6565b90506129c8613c21565b6001600160a01b03166322895118878b8a6040516020016129eb91815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b8152600401612a1b9493929190615202565b6000604051808303818588803b158015612a3457600080fd5b505af1158015612a48573d6000803e3d6000fd5b5050505050804714612a9c5760405162461bcd60e51b815260206004820152601b60248201527f455850454354494e475f4445504f5349545f544f5f48415050454e00000000006044820152606401610ac1565b505050505050505050565b6000610a8c6124cc60017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a86150f6565b611446612b0560017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a86150f6565b829055565b6000610a8c612527565b600080612b1f6132d5565b90506000612b2b612aa7565b905080821015612b77576801bc16d674ec800000612b4983836150f6565b612b539190615198565b47612b5c612edf565b612b6691906150de565b612b7091906150de565b9250505090565b47612b66612edf565b6060806000612bb060017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a082912855746150f6565b600086815260208281526040808320888452909152902080549192508291612c64908290612bdd9061505b565b80601f0160208091040260200160405190810160405280929190818152602001828054612c099061505b565b8015612c565780601f10612c2b57610100808354040283529160200191612c56565b820191906000526020600020905b815481529060010190602001808311612c3957829003601f168201915b50505050506000603061366c565b9450612cfc818054612c759061505b565b80601f0160208091040260200160405190810160405280929190818152602001828054612ca19061505b565b8015612cee5780601f10612cc357610100808354040283529160200191612cee565b820191906000526020600020905b815481529060010190602001808311612cd157829003601f168201915b50505050506030606061366c565b93505050509250929050565b6000612d148383613c51565b90506000612d4360017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a082912855746150f6565b600087815260208281526040808320898452825290912084519293508392611b2f92860190614aa6565b600080612d9b60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe101136150f6565b5492915050565b600080612dd060017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee054078476150f6565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b6000611867612e0883612e45565b613cce565b600080612e18612b14565b905080612e285750600092915050565b80612e31613cf2565b612e3b9085615198565b61223f91906150a6565b600080612e7360017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a88386150f6565b6001600160a01b0390931660009081526020939093525050604090205490565b6000612ec060017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a88386150f6565b6001600160a01b03909316600090815260209390935250604090912055565b6000610a8c6124cc60017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e609006150f6565b611446612b0560017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a376150f6565b6000610a8c613cf2565b600080612f7560017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd276150f6565b60405190915081908190612f8a9086906151cd565b9081526040519081900360200190205460ff16612fac57506000199392505050565b6040518190612fbc9086906151cd565b90815260200160405180910390206001015492505050919050565b60008061300560017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe101136150f6565b9050600061301284613d22565b8254909150829081908390811061302b5761302b6150c8565b90600052602060002090600702019350505050919050565b611446612b0560017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b806150f6565b600061186782613db0565b60008061308884613db0565b905060006130b760017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe101136150f6565b905080826131935780546001808201835560008381526020908190208851600790940201805460ff191693151593909317835587810151805189949361310293908501920190614aa6565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c0909101516006909101558451815461317b918891613176906001906150f6565b613e0e565b8054613189906001906150f6565b9350505050611867565b600061319e87613d22565b9050858260000182815481106131b6576131b66150c8565b6000918252602091829020835160079290920201805460ff191691151591909117815582820151805191926131f392600185019290910190614aa6565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c090910151600690910155855115158415151461326c5761326c87876000015183613e0e565b935061186792505050565b611446612b0560017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb6150f6565b6000610a8c6124cc60017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb6150f6565b6000610a8c6124cc60017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a376150f6565b611446612b0560017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e609006150f6565b611446612b0560017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a376150f6565b611446612b0560017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb5296150f6565b6000613399613e92565b905060006133a78284615198565b620186a06133b3612b14565b6133bd9190615198565b6133c791906150f6565b826133d0612f3d565b6133da9086615198565b6133e49190615198565b6133ee91906150a6565b90506000620186a06133fe613ec2565b6134089084615198565b61341291906150a6565b9050600061341e613ef2565b90506000815167ffffffffffffffff81111561343c5761343c61510d565b604051908082528060200260200182016040528015613465578160200160208202803683370190505b5090506000805b83518110156134fa576000848281518110613489576134896150c8565b602002602001015160c001518583815181106134a7576134a76150c8565b6020026020010151608001516134bd91906150f6565b90506134c981846150de565b9250808483815181106134de576134de6150c8565b6020908102919091010152506134f381615123565b905061346c565b50801561357d57600061350d82866150a6565b905060005b835181101561357657613566858281518110613530576135306150c8565b6020026020010151604001518386848151811061354f5761354f6150c8565b60200260200101516135619190615198565b6141b1565b61356f81615123565b9050613512565b5050613582565b600093505b610da561358d61421f565b61356186886150f6565b6000610a8c6124cc60017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6150f6565b611446612b0560017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd6150f6565b6114468161424f565b611446612b0560017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa36150f6565b611446612b0560017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a86150f6565b6136638261427d565b6123fc816142ab565b60608161367a81601f6150de565b10156136c85760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610ac1565b6136d282846150de565b845110156137225760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610ac1565b606082158015613741576040519150600082526020820160405261378b565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561377a578051835260209283019201613762565b5050858452601f01601f1916604052505b50949350505050565b6000611867826142d9565b60006137a9612b14565b90506000826137b6612b14565b6137c091906150f6565b9050806137d6576137d184836141b1565b6111ee565b6000816137e1612f3d565b6137eb9086615198565b6137f591906150a6565b905061380185826141b1565b5050505050565b606080600061381561432a565b905080516000141561388357604080516000808252602082019092529061384c565b60608152602001906001900390816138375790505b506040805160008082526020820190925290613878565b60608152602001906001900390816138635790505b509250925050915091565b600060015b8251811015613937578282815181106138a3576138a36150c8565b602002602001015160c001518383815181106138c1576138c16150c8565b6020026020010151608001516138d791906150f6565b8382815181106138e9576138e96150c8565b602002602001015160c00151848381518110613907576139076150c8565b60200260200101516080015161391d91906150f6565b1015613927578091505b61393081615123565b9050613888565b50600082828151811061394c5761394c6150c8565b60200260200101516080015161399c84848151811061396d5761396d6150c8565b602002602001015160a0015185858151811061398b5761398b6150c8565b6020026020010151606001516125b2565b6139a691906150f6565b905080613a115760408051600080825260208201909252906139d8565b60608152602001906001900390816139c35790505b506040805160008082526020820190925290613a04565b60608152602001906001900390816139ef5790505b5094509450505050915091565b6000613a39848481518110613a2857613a286150c8565b602002602001015160200151612fd7565b9050868210613aae57613a87848481518110613a5757613a576150c8565b602002602001015160e00151858581518110613a7557613a756150c8565b6020026020010151608001518961470e565b809650819750505086816004016000828254613aa391906150de565b90915550613b499050565b613af3848481518110613ac357613ac36150c8565b602002602001015160e00151858581518110613ae157613ae16150c8565b6020026020010151608001518461470e565b809650819750505081816004016000828254613b0f91906150de565b909155506000905080613b2a613b25858b6150f6565b613808565b91509150613b388883614917565b9750613b448782614917565b965050505b50505050915091565b60606020825110158015613b6857506040825111155b613b7457613b746151b7565b815160401415613b82575090565b60408051602080825281830190925260009160208201818036833701905050905060006020820152825160201415613bbe5761223f8382613c51565b61223f83613bd68360008751604061278b91906150f6565b613c51565b600081815b6008811015613c0957600892831b60ff831617929190911c90613c0281615123565b9050613be0565b508015613c1857613c186151b7565b5060c01b919050565b6000610a8c6124cc60017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf912606150f6565b6060806040519050835180825260208201818101602087015b81831015613c82578051835260209283019201613c6a565b50855184518101855292509050808201602086015b81831015613caf578051835260209283019201613c97565b508651929092011591909101601f01601f191660405250905092915050565b600080613cd9613cf2565b905080613ce95750600092915050565b80612e31612b14565b6000610a8c6124cc60017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b6150f6565b600080613d5060017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd276150f6565b60405190915081908190613d659086906151cd565b9081526040519081900360200190205460ff16612fac57836040517f34eddfcf000000000000000000000000000000000000000000000000000000008152600401610ac19190614c20565b600080613dde60017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd276150f6565b60405190915081908190613df39086906151cd565b9081526040519081900360200190205460ff16949350505050565b6000613e3b60017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd276150f6565b604080518082018252851515815260208101859052905191925082918290613e649088906151cd565b908152604051602091819003820190208251815460ff19169015151781559101516001909101555050505050565b6000610a8c6124cc60017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a376150f6565b6000610a8c6124cc60017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a86150f6565b60606000613f2160017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe101136150f6565b9050806000805b8254811015613f8057826000018181548110613f4657613f466150c8565b600091825260209091206007909102015460ff16151560011415613f7057613f6d82615123565b91505b613f7981615123565b9050613f28565b5060008167ffffffffffffffff811115613f9c57613f9c61510d565b60405190808252806020026020018201604052801561401857816020015b6140056040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b815260200190600190039081613fba5790505b5090506000805b84548110156141a65784600001818154811061403d5761403d6150c8565b600091825260209091206007909102015460ff1615156001141561419657846000018181548110614070576140706150c8565b60009182526020918290206040805160e08101909152600790920201805460ff161515825260018101805492939192918401916140ac9061505b565b80601f01602080910402602001604051908101604052809291908181526020018280546140d89061505b565b80156141255780601f106140fa57610100808354040283529160200191614125565b820191906000526020600020905b81548152906001019060200180831161410857829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a090910152835184908490811061417e5761417e6150c8565b60200260200101819052508161419390615123565b91505b61419f81615123565b905061401f565b509095945050505050565b6141cc816141bd613cf2565b6141c791906150de565b614a2a565b6141da828261137085612e45565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000610a8c6124cc60017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa36150f6565b611446612b0560017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb1136150f6565b611446612b0560017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf912606150f6565b611446612b0560017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c426150f6565b60008061430760017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a41356150f6565b6001600160a01b0390931660009081526020939093525050604090205460ff1690565b6060600061435960017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe101136150f6565b9050806000805b82548110156144a157614480836000018281548110614381576143816150c8565b60009182526020918290206040805160e08101909152600790920201805460ff161515825260018101805492939192918401916143bd9061505b565b80601f01602080910402602001604051908101604052809291908181526020018280546143e99061505b565b80156144365780601f1061440b57610100808354040283529160200191614436565b820191906000526020600020905b81548152906001019060200180831161441957829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a090910152614a58565b156144915761448e82615123565b91505b61449a81615123565b9050614360565b5060008167ffffffffffffffff8111156144bd576144bd61510d565b60405190808252806020026020018201604052801561454157816020015b61452e6040518061010001604052806000151581526020016060815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816144db5790505b5090506000805b84548110156141a6576000856000018281548110614568576145686150c8565b60009182526020918290206040805160e08101909152600790920201805460ff161515825260018101805492939192918401916145a49061505b565b80601f01602080910402602001604051908101604052809291908181526020018280546145d09061505b565b801561461d5780601f106145f25761010080835404028352916020019161461d565b820191906000526020600020905b81548152906001019060200180831161460057829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a090910152905061466d81614a58565b156146fd576040518061010001604052808260000151151581526020018260200151815260200182604001516001600160a01b0316815260200182606001518152602001826080015181526020018260a0015181526020018260c001518152602001838152508484815181106146e5576146e56150c8565b6020026020010181905250826146fa90615123565b92505b5061470781615123565b9050614548565b6060808267ffffffffffffffff81111561472a5761472a61510d565b60405190808252806020026020018201604052801561475d57816020015b60608152602001906001900390816147485790505b5091508267ffffffffffffffff8111156147795761477961510d565b6040519080825280602002602001820160405280156147ac57816020015b60608152602001906001900390816147975790505b50905060006147dc60017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a082912855746150f6565b905080855b6147eb86886150de565b81101561490c57600088815260208381526040808320848452909152812080546148149061505b565b80601f01602080910402602001604051908101604052809291908181526020018280546148409061505b565b801561488d5780601f106148625761010080835404028352916020019161488d565b820191906000526020600020905b81548152906001019060200180831161487057829003601f168201915b505050505090506148a1816000603061366c565b866148ac8a856150f6565b815181106148bc576148bc6150c8565b60200260200101819052506148d4816030606061366c565b856148df8a856150f6565b815181106148ef576148ef6150c8565b6020026020010181905250508061490590615123565b90506147e1565b505050935093915050565b60608151835161492791906150de565b67ffffffffffffffff81111561493f5761493f61510d565b60405190808252806020026020018201604052801561497257816020015b606081526020019060019003908161495d5790505b50905060005b83518110156149c957838181518110614993576149936150c8565b60200260200101518282815181106149ad576149ad6150c8565b6020026020010181905250806149c290615123565b9050614978565b5060005b8251811015610b1a578281815181106149e8576149e86150c8565b6020026020010151828551836149fe91906150de565b81518110614a0e57614a0e6150c8565b602002602001018190525080614a2390615123565b90506149cd565b611446612b0560017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b6150f6565b80516000908015614a7f57508160c001518260800151614a7891906150f6565b8260a00151115b801561186757508160c001518260800151614a9a91906150f6565b82606001511192915050565b828054614ab29061505b565b90600052602060002090601f016020900481019282614ad45760008555614b1a565b82601f10614aed57805160ff1916838001178555614b1a565b82800160010185558215614b1a579182015b82811115614b1a578251825591602001919060010190614aff565b50614b26929150614b2a565b5090565b5b80821115614b265760008155600101614b2b565b600060208284031215614b5157600080fd5b5035919050565b60005b83811015614b73578181015183820152602001614b5b565b838111156111ee5750506000910152565b60008151808452614b9c816020860160208601614b58565b601f01601f19169290920160200192915050565b602081528151151560208201526000602083015160e06040840152614bd9610100840182614b84565b90506001600160a01b03604085015116606084015260608401516080840152608084015160a084015260a084015160c084015260c084015160e08401528091505092915050565b60208152600061223f6020830184614b84565b80356001600160a01b0381168114614c4a57600080fd5b919050565b60008060408385031215614c6257600080fd5b614c6b83614c33565b946020939093013593505050565b80358015158114614c4a57600080fd5b60008060408385031215614c9c57600080fd5b614ca583614c33565b9150614cb360208401614c79565b90509250929050565b600080600060408486031215614cd157600080fd5b83359250602084013567ffffffffffffffff80821115614cf057600080fd5b818601915086601f830112614d0457600080fd5b813581811115614d1357600080fd5b8760208260051b8501011115614d2857600080fd5b6020830194508093505050509250925092565b600080600060608486031215614d5057600080fd5b614d5984614c33565b9250614d6760208501614c33565b9150604084013590509250925092565b60008083601f840112614d8957600080fd5b50813567ffffffffffffffff811115614da157600080fd5b602083019150836020828501011115614db957600080fd5b9250929050565b60008060208385031215614dd357600080fd5b823567ffffffffffffffff811115614dea57600080fd5b614df685828601614d77565b90969095509350505050565b600060208284031215614e1457600080fd5b61223f82614c33565b600080600060408486031215614e3257600080fd5b833567ffffffffffffffff811115614e4957600080fd5b614e5586828701614d77565b9094509250614e68905060208501614c33565b90509250925092565b60008060408385031215614e8457600080fd5b82359150614cb360208401614c79565b60008060408385031215614ea757600080fd5b50508035926020909101359150565b606081526000614ec96060830186614b84565b8281036020840152614edb8186614b84565b9150508215156040830152949350505050565b600080600060608486031215614f0357600080fd5b505081359360208301359350604090920135919050565b600080600080600080600060e0888a031215614f3557600080fd5b614f3e88614c33565b965060208801359550614f5360408901614c33565b9450614f6160608901614c33565b9350614f6f60808901614c33565b925060a0880135915060c0880135905092959891949750929550565b60008060008060008060808789031215614fa457600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115614fca57600080fd5b614fd68a838b01614d77565b90965094506060890135915080821115614fef57600080fd5b50614ffc89828a01614d77565b979a9699509497509295939492505050565b6000806040838503121561502157600080fd5b61502a83614c33565b9150614cb360208401614c33565b6000806040838503121561504b57600080fd5b82359150614cb360208401614c33565b600181811c9082168061506f57607f821691505b602082108114156125c157634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000826150c357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600082198211156150f1576150f1615090565b500190565b60008282101561510857615108615090565b500390565b634e487b7160e01b600052604160045260246000fd5b600060001982141561513757615137615090565b5060010190565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6040815260006151806040830185614b84565b90506001600160a01b03831660208301529392505050565b60008160001904831182151516156151b2576151b2615090565b500290565b634e487b7160e01b600052600160045260246000fd5b600082516151df818460208701614b58565b9190910192915050565b6000602082840312156151fb57600080fd5b5051919050565b6080815260006152156080830187614b84565b82810360208401526152278187614b84565b9050828103604084015261523b8186614b84565b9150508260608301529594505050505056fea2646970667358221220200a4b425f438c2fb35f24095af27d28ebe6325185cbb4a3466ac2bd2e20979464736f6c634300080a0033",
  "devdoc": {
    "author": "SkillZ",
    "kind": "dev",
    "methods": {
      "addOperator(string,address)": {
        "details": "Only callable by the administrator",
        "params": {
          "_name": "The name identifying the operator",
          "_operator": "The address representing the operator, receiving the rewards"
        }
      },
      "addValidators(uint256,uint256,bytes,bytes)": {
        "details": "Only callable by the administrator or the operator address",
        "params": {
          "_index": "The operator index",
          "_keyCount": "The amount of keys provided",
          "_publicKeys": "Public keys of the validator, concatenated",
          "_signatures": "Signatures of the validator keys, concatenated"
        }
      },
      "allow(address,bool)": {
        "params": {
          "_account": "Account status to edit",
          "_status": "Allowlist status"
        }
      },
      "deposit(address)": {
        "params": {
          "_referral": "Referral address, address(0) if none"
        }
      },
      "depositToConsensusLayer(uint256)": {
        "params": {
          "_maxCount": "The maximum amount of validator keys to fund"
        }
      },
      "getOperator(uint256)": {
        "params": {
          "_index": "The index of the operator"
        }
      },
      "getOperatorByName(string)": {
        "params": {
          "_name": "The name identifying the operator"
        }
      },
      "getValidator(uint256,uint256)": {
        "params": {
          "_operatorIndex": "The index of the operator",
          "_validatorIndex": "The index of the validator"
        }
      },
      "initRiverV1(address,bytes32,address,address,address,uint256,uint256)": {
        "params": {
          "_allowerAddress": "Address able to manage the allowlist",
          "_depositContractAddress": "Address to make Consensus Layer deposits",
          "_globalFee": "Amount retained when the eth balance increases, splitted between the treasury and the operators",
          "_operatorRewardsShare": "Share of the global fee used to reward node operators",
          "_systemAdministratorAddress": "Administrator address",
          "_treasuryAddress": "Address receiving the fee minus the operator share",
          "_withdrawalCredentials": "Credentials to use for every validator deposit"
        }
      },
      "removeValidators(uint256,uint256[])": {
        "details": "Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order, otherwise the method will revert",
        "params": {
          "_index": "The operator index",
          "_indexes": "The indexes of the keys to remove"
        }
      },
      "setAllower(address)": {
        "params": {
          "_newAllowerAddress": "New address allowed to edit the allowlist"
        }
      },
      "setBeaconData(uint256,uint256,bytes32)": {
        "details": "Can only be called by the oracle address",
        "params": {
          "_roundId": "An identifier for this update",
          "_validatorBalanceSum": "The validator balance sum of the active validators on the consensus layer",
          "_validatorCount": "The number of active validators on the consensus layer"
        }
      },
      "setGlobalFee(uint256)": {
        "params": {
          "newFee": "New fee value"
        }
      },
      "setOperatorAddress(uint256,address)": {
        "details": "Only callable by the administrator or the previous operator address",
        "params": {
          "_index": "The operator index",
          "_newOperatorAddress": "The new address representing the operator"
        }
      },
      "setOperatorLimit(uint256,uint256)": {
        "details": "Only callable by the administrator",
        "params": {
          "_index": "The operator index",
          "_newLimit": "The new staking limit of the operator"
        }
      },
      "setOperatorRewardsShare(uint256)": {
        "params": {
          "newOperatorRewardsShare": "New share value"
        }
      },
      "setOperatorStatus(uint256,bool)": {
        "details": "Only callable by the administrator",
        "params": {
          "_index": "The operator index",
          "_newStatus": "The new status of the operator"
        }
      },
      "setOperatorStoppedValidatorCount(uint256,uint256)": {
        "details": "Only callable by the administrator",
        "params": {
          "_index": "The operator index",
          "_newStoppedValidatorCount": "The new stopped validator count of the operator"
        }
      },
      "setOracle(address)": {
        "params": {
          "_oracleAddress": "Address of the oracle"
        }
      }
    },
    "title": "River (v1)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addOperator(string,address)": {
        "notice": "Adds an operator to the registry"
      },
      "addValidators(uint256,uint256,bytes,bytes)": {
        "notice": "Adds new keys for an operator"
      },
      "allow(address,bool)": {
        "notice": "Sets the allowlisting status for an account"
      },
      "deposit(address)": {
        "notice": "Explicit deposit method"
      },
      "depositToConsensusLayer(uint256)": {
        "notice": "Deposits current balance to the Consensus Layer by batches of 32 ETH"
      },
      "getAdministrator()": {
        "notice": "Retrieve system administrator address"
      },
      "getAllower()": {
        "notice": "Retrieves the allower address"
      },
      "getBeaconValidatorBalanceSum()": {
        "notice": "Get Beacon validator balance sum"
      },
      "getBeaconValidatorCount()": {
        "notice": "Get Beacon validator count (the amount of validator reported by the oracles)"
      },
      "getDepositedValidatorCount()": {
        "notice": "Get the deposited validator count (the count of deposits made by the contract)"
      },
      "getOperator(uint256)": {
        "notice": "Get operator details"
      },
      "getOperatorByName(string)": {
        "notice": "Get operator details by name"
      },
      "getOperatorCount()": {
        "notice": "Get operator count"
      },
      "getOracle()": {
        "notice": "Get Oracle address"
      },
      "getValidator(uint256,uint256)": {
        "notice": "Get the details of a validator"
      },
      "initRiverV1(address,bytes32,address,address,address,uint256,uint256)": {
        "notice": "Initializes the River system"
      },
      "removeValidators(uint256,uint256[])": {
        "notice": "Remove validator keys"
      },
      "setAllower(address)": {
        "notice": "Changes the allower address"
      },
      "setBeaconData(uint256,uint256,bytes32)": {
        "notice": "Sets the validator count and validator balance sum reported by the oracle"
      },
      "setGlobalFee(uint256)": {
        "notice": "Changes the global fee parameter"
      },
      "setOperatorAddress(uint256,address)": {
        "notice": "Changes the operator address of an operator"
      },
      "setOperatorLimit(uint256,uint256)": {
        "notice": "Changes the operator staking limit"
      },
      "setOperatorRewardsShare(uint256)": {
        "notice": "Changes the operator rewards share."
      },
      "setOperatorStatus(uint256,bool)": {
        "notice": "Changes the operator status"
      },
      "setOperatorStoppedValidatorCount(uint256,uint256)": {
        "notice": "Changes the operator stopped validator cound"
      },
      "setOracle(address)": {
        "notice": "Set Oracle address"
      }
    },
    "notice": "This contract merges all the manager contracts and implements all the virtual methods stitching all components together",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}