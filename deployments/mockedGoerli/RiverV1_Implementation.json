{
  "address": "0xb0ba0D0fdb66aFf9485bDeb686fbA504E378BdAE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "AllowanceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyDeposit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "InactiveOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentPublicKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentSignatures",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFundedKeyDeletionAttempt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidKeyCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPublicKeyCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPublicKeysLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUnsortedIndexes",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_providedValidatorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "InvalidValidatorCountReport",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWithdrawalCredentials",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoAvailableValidatorKeys",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullTransfer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "OperatorAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "OperatorNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OperatorNotFoundAtIndex",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operatorAddress",
          "type": "address"
        }
      ],
      "name": "AddedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalKeyCount",
          "type": "uint256"
        }
      ],
      "name": "AddedValidatorKeys",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validatorCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validatorBalanceSum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "roundId",
          "type": "bytes32"
        }
      ],
      "name": "BeaconDataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "ChangedAllowlistStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "keyCount",
          "type": "uint256"
        }
      ],
      "name": "RemovedValidatorKeys",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOperatorAddress",
          "type": "address"
        }
      ],
      "name": "SetOperatorAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "SetOperatorLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "SetOperatorStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStoppedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "SetOperatorStoppedValidatorCount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserDeposit",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_KEY_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNATURE_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_keyCount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_publicKeys",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_signatures",
          "type": "bytes"
        }
      ],
      "name": "addValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "allow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxCount",
          "type": "uint256"
        }
      ],
      "name": "depositToConsensusLayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdministrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconValidatorBalanceSum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beaconValidatorBalanceSum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconValidatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beaconValidatorCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositedValidatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositedValidatorCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getOperator",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keys",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopped",
              "type": "uint256"
            }
          ],
          "internalType": "struct Operators.Operator",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getOperatorByName",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funded",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keys",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopped",
              "type": "uint256"
            }
          ],
          "internalType": "struct Operators.Operator",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getOperatorDetails",
      "outputs": [
        {
          "internalType": "int256",
          "name": "_index",
          "type": "int256"
        },
        {
          "internalType": "address",
          "name": "_operatorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_operatorIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorIndex",
          "type": "uint256"
        }
      ],
      "name": "getValidator",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "funded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositContractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_withdrawalCredentials",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_systemAdministratorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allowerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_globalFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_operatorRewardsShare",
          "type": "uint256"
        }
      ],
      "name": "initRiverV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "removeValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_validatorCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorBalanceSum",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_roundId",
          "type": "bytes32"
        }
      ],
      "name": "setBeaconData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "setGlobalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newOperatorAddress",
          "type": "address"
        }
      ],
      "name": "setOperatorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newLimit",
          "type": "uint256"
        }
      ],
      "name": "setOperatorLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newOperatorRewardsShare",
          "type": "uint256"
        }
      ],
      "name": "setOperatorRewardsShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_newStatus",
          "type": "bool"
        }
      ],
      "name": "setOperatorStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newStoppedValidatorCount",
          "type": "uint256"
        }
      ],
      "name": "setOperatorStoppedValidatorCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "sharesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa6dd38463afb5c1e84c206549c353507c90d5d347d722e18752f16e2e46b569f",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0xb0ba0D0fdb66aFf9485bDeb686fbA504E378BdAE",
    "transactionIndex": 2,
    "gasUsed": "4491100",
    "logsBloom": "0x
    "blockHash": "0x72783bb505ac55303cf68826ac8664cc0917a8b3c9adf034df764d306982879f",
    "transactionHash": "0xa6dd38463afb5c1e84c206549c353507c90d5d347d722e18752f16e2e46b569f",
    "logs": [],
    "blockNumber": 6432761,
    "cumulativeGasUsed": "4533100",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "43221bad0243cd96359fad9a2f7cd1af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AllowanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InactiveOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentPublicKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFundedKeyDeletionAttempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeyCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeysLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUnsortedIndexes\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providedValidatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"InvalidValidatorCountReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawalCredentials\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAvailableValidatorKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"OperatorAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"OperatorNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OperatorNotFoundAtIndex\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"}],\"name\":\"AddedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalKeyCount\",\"type\":\"uint256\"}],\"name\":\"AddedValidatorKeys\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorBalanceSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"roundId\",\"type\":\"bytes32\"}],\"name\":\"BeaconDataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ChangedAllowlistStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyCount\",\"type\":\"uint256\"}],\"name\":\"RemovedValidatorKeys\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperatorAddress\",\"type\":\"address\"}],\"name\":\"SetOperatorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"SetOperatorLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetOperatorStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStoppedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"SetOperatorStoppedValidatorCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserDeposit\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_KEY_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNATURE_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keyCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_publicKeys\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"addValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"allow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"}],\"name\":\"depositToConsensusLayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdministrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconValidatorBalanceSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beaconValidatorBalanceSum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beaconValidatorCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositedValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositedValidatorCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopped\",\"type\":\"uint256\"}],\"internalType\":\"struct Operators.Operator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getOperatorByName\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopped\",\"type\":\"uint256\"}],\"internalType\":\"struct Operators.Operator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getOperatorDetails\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"_index\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorIndex\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"funded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_withdrawalCredentials\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_systemAdministratorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_globalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operatorRewardsShare\",\"type\":\"uint256\"}],\"name\":\"initRiverV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"removeValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorBalanceSum\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_roundId\",\"type\":\"bytes32\"}],\"name\":\"setBeaconData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setGlobalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOperatorAddress\",\"type\":\"address\"}],\"name\":\"setOperatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setOperatorLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newOperatorRewardsShare\",\"type\":\"uint256\"}],\"name\":\"setOperatorRewardsShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setOperatorStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newStoppedValidatorCount\",\"type\":\"uint256\"}],\"name\":\"setOperatorStoppedValidatorCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"SkillZ\",\"kind\":\"dev\",\"methods\":{\"addOperator(string,address)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_name\":\"The name identifying the operator\",\"_operator\":\"The address representing the operator, receiving the rewards\"}},\"addValidators(uint256,uint256,bytes,bytes)\":{\"details\":\"Only callable by the administrator or the operator address\",\"params\":{\"_index\":\"The operator index\",\"_keyCount\":\"The amount of keys provided\",\"_publicKeys\":\"Public keys of the validator, concatenated\",\"_signatures\":\"Signatures of the validator keys, concatenated\"}},\"allow(address,bool)\":{\"params\":{\"_account\":\"Account status to edit\",\"_status\":\"Allowlist status\"}},\"deposit(address)\":{\"params\":{\"_referral\":\"Referral address, address(0) if none\"}},\"depositToConsensusLayer(uint256)\":{\"params\":{\"_maxCount\":\"The maximum amount of validator keys to fund\"}},\"getOperator(uint256)\":{\"params\":{\"_index\":\"The index of the operator\"}},\"getOperatorByName(string)\":{\"params\":{\"_name\":\"The name identifying the operator\"}},\"getValidator(uint256,uint256)\":{\"params\":{\"_operatorIndex\":\"The index of the operator\",\"_validatorIndex\":\"The index of the validator\"}},\"initRiverV1(address,bytes32,address,address,address,uint256,uint256)\":{\"params\":{\"_allowerAddress\":\"Address able to manage the allowlist\",\"_depositContractAddress\":\"Address to make Consensus Layer deposits\",\"_globalFee\":\"Amount retained when the eth balance increases, splitted between the treasury and the operators\",\"_operatorRewardsShare\":\"Share of the global fee used to reward node operators\",\"_systemAdministratorAddress\":\"Administrator address\",\"_treasuryAddress\":\"Address receiving the fee minus the operator share\",\"_withdrawalCredentials\":\"Credentials to use for every validator deposit\"}},\"removeValidators(uint256,uint256[])\":{\"details\":\"Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order, otherwise the method will revert\",\"params\":{\"_index\":\"The operator index\",\"_indexes\":\"The indexes of the keys to remove\"}},\"setBeaconData(uint256,uint256,bytes32)\":{\"details\":\"Can only be called by the oracle address\",\"params\":{\"_roundId\":\"An identifier for this update\",\"_validatorBalanceSum\":\"The validator balance sum of the active validators on the consensus layer\",\"_validatorCount\":\"The number of active validators on the consensus layer\"}},\"setGlobalFee(uint256)\":{\"params\":{\"newFee\":\"New fee value\"}},\"setOperatorAddress(uint256,address)\":{\"details\":\"Only callable by the administrator or the previous operator address\",\"params\":{\"_index\":\"The operator index\",\"_newOperatorAddress\":\"The new address representing the operator\"}},\"setOperatorLimit(uint256,uint256)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_index\":\"The operator index\",\"_newLimit\":\"The new staking limit of the operator\"}},\"setOperatorRewardsShare(uint256)\":{\"params\":{\"newOperatorRewardsShare\":\"New share value\"}},\"setOperatorStatus(uint256,bool)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_index\":\"The operator index\",\"_newStatus\":\"The new status of the operator\"}},\"setOperatorStoppedValidatorCount(uint256,uint256)\":{\"details\":\"Only callable by the administrator\",\"params\":{\"_index\":\"The operator index\",\"_newStoppedValidatorCount\":\"The new stopped validator count of the operator\"}},\"setOracle(address)\":{\"params\":{\"_oracleAddress\":\"Address of the oracle\"}}},\"title\":\"River (v1)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOperator(string,address)\":{\"notice\":\"Adds an operator to the registry\"},\"addValidators(uint256,uint256,bytes,bytes)\":{\"notice\":\"Adds new keys for an operator\"},\"allow(address,bool)\":{\"notice\":\"Sets the allowlisting status for an account\"},\"deposit(address)\":{\"notice\":\"Explicit deposit method\"},\"depositToConsensusLayer(uint256)\":{\"notice\":\"Deposits current balance to the Consensus Layer by batches of 32 ETH\"},\"getAdministrator()\":{\"notice\":\"Retrieve system administrator address\"},\"getBeaconValidatorBalanceSum()\":{\"notice\":\"Get Beacon validator balance sum\"},\"getBeaconValidatorCount()\":{\"notice\":\"Get Beacon validator count (the amount of validator reported by the oracles)\"},\"getDepositedValidatorCount()\":{\"notice\":\"Get the deposited validator count (the count of deposits made by the contract)\"},\"getOperator(uint256)\":{\"notice\":\"Get operator details\"},\"getOperatorByName(string)\":{\"notice\":\"Get operator details by name\"},\"getOperatorCount()\":{\"notice\":\"Get operator count\"},\"getOracle()\":{\"notice\":\"Get Oracle address\"},\"getValidator(uint256,uint256)\":{\"notice\":\"Get the details of a validator\"},\"initRiverV1(address,bytes32,address,address,address,uint256,uint256)\":{\"notice\":\"Initializes the River system\"},\"removeValidators(uint256,uint256[])\":{\"notice\":\"Remove validator keys\"},\"setBeaconData(uint256,uint256,bytes32)\":{\"notice\":\"Sets the validator count and validator balance sum reported by the oracle\"},\"setGlobalFee(uint256)\":{\"notice\":\"Changes the global fee parameter\"},\"setOperatorAddress(uint256,address)\":{\"notice\":\"Changes the operator address of an operator\"},\"setOperatorLimit(uint256,uint256)\":{\"notice\":\"Changes the operator staking limit\"},\"setOperatorRewardsShare(uint256)\":{\"notice\":\"Changes the operator rewards share.\"},\"setOperatorStatus(uint256,bool)\":{\"notice\":\"Changes the operator status\"},\"setOperatorStoppedValidatorCount(uint256,uint256)\":{\"notice\":\"Changes the operator stopped validator cound\"},\"setOracle(address)\":{\"notice\":\"Set Oracle address\"}},\"notice\":\"This contract merges all the manager contracts and implements all the virtual methods stitching all components together\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/River.1.sol\":\"RiverV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\ncontract Initializable {\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    modifier init(uint256 version) {\\n        if (version != Version.get()) {\\n            revert InvalidInitialization(version, Version.get());\\n        }\\n        Version.set(version + 1); // prevents reentrency on the called method\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc93555f4bd660f91e565f20753e0d3a01e783e673bc0209d0d1e33c7b6941053\",\"license\":\"BUSL-1.1\"},\"contracts/src/River.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./components/DepositManager.1.sol\\\";\\nimport \\\"./components/TransferManager.1.sol\\\";\\nimport \\\"./components/SharesManager.1.sol\\\";\\nimport \\\"./components/OracleManager.1.sol\\\";\\nimport \\\"./components/OperatorsManager.1.sol\\\";\\nimport \\\"./components/AllowlistManager.1.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./libraries/LibOwnable.sol\\\";\\n\\nimport \\\"./state/shared/AdministratorAddress.sol\\\";\\nimport \\\"./state/river/TreasuryAddress.sol\\\";\\nimport \\\"./state/river/OperatorRewardsShare.sol\\\";\\nimport \\\"./state/river/GlobalFee.sol\\\";\\n\\n/// @title River (v1)\\n/// @author SkillZ\\n/// @notice This contract merges all the manager contracts and implements all the virtual methods stitching all components together\\ncontract RiverV1 is\\n    DepositManagerV1,\\n    TransferManagerV1,\\n    SharesManagerV1,\\n    OracleManagerV1,\\n    OperatorsManagerV1,\\n    AllowlistManagerV1,\\n    Initializable\\n{\\n    uint256 public constant BASE = 100000;\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() override(OperatorsManagerV1, OracleManagerV1) {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _allowerAddress Address able to manage the allowlist\\n    /// @param _treasuryAddress Address receiving the fee minus the operator share\\n    /// @param _globalFee Amount retained when the eth balance increases, splitted between the treasury and the operators\\n    /// @param _operatorRewardsShare Share of the global fee used to reward node operators\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _systemAdministratorAddress,\\n        address _allowerAddress,\\n        address _treasuryAddress,\\n        uint256 _globalFee,\\n        uint256 _operatorRewardsShare\\n    ) external init(0) {\\n        LibOwnable._setAdmin(_systemAdministratorAddress);\\n        TreasuryAddress.set(_treasuryAddress);\\n        GlobalFee.set(_globalFee);\\n        OperatorRewardsShare.set(_operatorRewardsShare);\\n\\n        DepositManagerV1.initDepositManagerV1(_depositContractAddress, _withdrawalCredentials);\\n        AllowlistManagerV1.initAllowlistManagerV1(_allowerAddress);\\n    }\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param newFee New fee value\\n    function setGlobalFee(uint256 newFee) external onlyAdmin {\\n        if (newFee > BASE) {\\n            revert Errors.InvalidArgument();\\n        }\\n\\n        GlobalFee.set(newFee);\\n    }\\n\\n    /// @notice Changes the operator rewards share.\\n    /// @param newOperatorRewardsShare New share value\\n    function setOperatorRewardsShare(uint256 newOperatorRewardsShare) external onlyAdmin {\\n        if (newOperatorRewardsShare > BASE) {\\n            revert Errors.InvalidArgument();\\n        }\\n\\n        OperatorRewardsShare.set(newOperatorRewardsShare);\\n    }\\n\\n    /// @notice Retrieve system administrator address\\n    function getAdministrator() external view returns (address) {\\n        return LibOwnable._getAdmin();\\n    }\\n\\n    /// @notice Handler called whenever a user deposits ETH to the system. Mints the adequate amount of shares.\\n    /// @param _depositor User address that made the deposit\\n    /// @param _amount Amount of ETH deposited\\n    function _onDeposit(address _depositor, uint256 _amount) internal override {\\n        if (AllowlistManagerV1._isAllowed(_depositor) == false) {\\n            revert Errors.Unauthorized(_depositor);\\n        }\\n        SharesManagerV1._mintShares(_depositor, _amount);\\n    }\\n\\n    /// @notice Handler called whenever an allowlist check is made for an address. Asks the Allowlist Manager component.\\n    /// @param _account Address to verify\\n    function _isAccountAllowed(address _account) internal view override returns (bool) {\\n        return AllowlistManagerV1._isAllowed(_account);\\n    }\\n\\n    /// @notice Handler called whenever a deposit to the consensus layer is made. Should retrieve _requestedAmount or lower keys\\n    /// @param _requestedAmount Amount of keys required. Contract is expected to send _requestedAmount or lower.\\n    function _getNextValidators(uint256 _requestedAmount)\\n        internal\\n        override\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        return OperatorsManagerV1._getNextValidatorsFromActiveOperators(_requestedAmount);\\n    }\\n\\n    /// @notice Handler called whenever the balance of ETH handled by the system increases. Splits funds between operators and treasury.\\n    /// @param _amount Additional eth received\\n    function _onEarnings(uint256 _amount) internal override {\\n        uint256 globalFee = GlobalFee.get();\\n        uint256 sharesToMint = (_amount * _totalShares() * globalFee) /\\n            ((_assetBalance() * BASE) - (_amount * globalFee));\\n\\n        uint256 operatorRewards = (sharesToMint * OperatorRewardsShare.get()) / BASE;\\n\\n        Operators.Operator[] memory operators = Operators.getAllActive();\\n        uint256[] memory validatorCounts = new uint256[](operators.length);\\n\\n        uint256 totalActiveValidators = 0;\\n        for (uint256 idx = 0; idx < operators.length; ++idx) {\\n            uint256 operatorActiveValidatorCount = operators[idx].funded - operators[idx].stopped;\\n            totalActiveValidators += operatorActiveValidatorCount;\\n            validatorCounts[idx] = operatorActiveValidatorCount;\\n        }\\n\\n        if (totalActiveValidators > 0) {\\n            uint256 rewardsPerActiveValidator = operatorRewards / totalActiveValidators;\\n\\n            for (uint256 idx = 0; idx < validatorCounts.length; ++idx) {\\n                _mintRawShares(operators[idx].operator, validatorCounts[idx] * rewardsPerActiveValidator);\\n            }\\n        } else {\\n            operatorRewards = 0;\\n        }\\n\\n        _mintRawShares(TreasuryAddress.get(), sharesToMint - operatorRewards);\\n    }\\n\\n    /// @notice Handler called whenever the total balance of ETH is requested\\n    function _assetBalance() internal view override returns (uint256) {\\n        uint256 beaconValidatorCount = BeaconValidatorCount.get();\\n        uint256 depositedValidatorCount = DepositedValidatorCount.get();\\n        if (beaconValidatorCount < depositedValidatorCount) {\\n            return\\n                BeaconValidatorBalanceSum.get() +\\n                address(this).balance +\\n                (depositedValidatorCount - beaconValidatorCount) *\\n                DepositManagerV1.DEPOSIT_SIZE;\\n        } else {\\n            return BeaconValidatorBalanceSum.get() + address(this).balance;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x84f6f1d851ca339acfccc863160a3c9471c5d8521c156595366d2fbd3d9e022e\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/AllowlistManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/river/AllowerAddress.sol\\\";\\nimport \\\"../state/river/Allowlist.sol\\\";\\n\\n/// @title Allowlist Manager (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the allowlist of accounts allowed to own shares\\nabstract contract AllowlistManagerV1 {\\n    event ChangedAllowlistStatus(address indexed account, bool status);\\n\\n    /// @notice Initializes the allower address\\n    /// @param _allowerAddress Address allowed to edit the allowlist\\n    function initAllowlistManagerV1(address _allowerAddress) internal {\\n        AllowerAddress.set(_allowerAddress);\\n    }\\n\\n    /// @notice Sets the allowlisting status for an account\\n    /// @param _account Account status to edit\\n    /// @param _status Allowlist status\\n    function allow(address _account, bool _status) external {\\n        if (msg.sender != AllowerAddress.get() && msg.sender != AdministratorAddress.get()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n\\n        Allowlist.set(_account, _status);\\n\\n        emit ChangedAllowlistStatus(_account, _status);\\n    }\\n\\n    function _isAllowed(address _account) internal view returns (bool) {\\n        return Allowlist.get(_account);\\n    }\\n\\n    function isAllowed(address _account) external view returns (bool) {\\n        return _isAllowed(_account);\\n    }\\n}\\n\",\"keccak256\":\"0x2a87f3221c5d11dc39d093d26b9d0b44c786d92b4aedaf17291994fd8ed15fe7\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/DepositManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IDepositContract.sol\\\";\\n\\nimport \\\"../libraries/BytesLib.sol\\\";\\nimport \\\"../libraries/Uint256Lib.sol\\\";\\n\\nimport \\\"../state/river/DepositContractAddress.sol\\\";\\nimport \\\"../state/river/WithdrawalCredentials.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\n\\n/// @title Deposit Manager (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the interactions with the official deposit contract, funding all validators\\n/// @dev _onValidatorKeyRequest must be overriden.\\nabstract contract DepositManagerV1 {\\n    error NotEnoughFunds();\\n    error InconsistentPublicKeys();\\n    error InconsistentSignatures();\\n    error NoAvailableValidatorKeys();\\n    error InvalidPublicKeyCount();\\n    error InvalidSignatureCount();\\n    error InvalidWithdrawalCredentials();\\n\\n    uint256 public constant PUBLIC_KEY_LENGTH = 48;\\n    uint256 public constant SIGNATURE_LENGTH = 96;\\n    uint256 public constant DEPOSIT_SIZE = 32 ether;\\n\\n    /// @notice Initializer to set the deposit contract address and the withdrawal credentials to use\\n    /// @param _depositContractAddress The address of the deposit contract\\n    /// @param _withdrawalCredentials The withdrawal credentials to apply to all deposits\\n    function initDepositManagerV1(address _depositContractAddress, bytes32 _withdrawalCredentials) internal {\\n        DepositContractAddress.set(IDepositContract(_depositContractAddress));\\n\\n        WithdrawalCredentials.set(_withdrawalCredentials);\\n    }\\n\\n    /// @notice Internal helper to retrieve validator keys ready to be funded\\n    /// @dev Must be overriden with an implementation that provides keyCount or less keys upon call\\n    /// @param _keyCount The amount of keys (or less) to return.\\n    function _getNextValidators(uint256 _keyCount)\\n        internal\\n        virtual\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    function depositToConsensusLayer(uint256 _maxCount) external {\\n        uint256 validatorsToDeposit = Uint256Lib.min(address(this).balance / DEPOSIT_SIZE, _maxCount);\\n\\n        if (validatorsToDeposit == 0) {\\n            revert NotEnoughFunds();\\n        }\\n\\n        (bytes[] memory publicKeys, bytes[] memory signatures) = _getNextValidators(validatorsToDeposit);\\n\\n        uint256 receivedPublicKeyCount = publicKeys.length;\\n\\n        if (receivedPublicKeyCount == 0) {\\n            revert NoAvailableValidatorKeys();\\n        }\\n\\n        if (receivedPublicKeyCount > validatorsToDeposit) {\\n            revert InvalidPublicKeyCount();\\n        }\\n\\n        uint256 receivedSignatureCount = signatures.length;\\n\\n        if (receivedSignatureCount != receivedPublicKeyCount) {\\n            revert InvalidSignatureCount();\\n        }\\n\\n        bytes32 withdrawalCredentials = WithdrawalCredentials.get();\\n\\n        if (withdrawalCredentials == 0) {\\n            revert InvalidWithdrawalCredentials();\\n        }\\n\\n        for (uint256 idx = 0; idx < receivedPublicKeyCount; idx += 1) {\\n            _depositValidator(publicKeys[idx], signatures[idx], withdrawalCredentials);\\n        }\\n\\n        DepositedValidatorCount.set(DepositedValidatorCount.get() + receivedPublicKeyCount);\\n    }\\n\\n    /// @notice Deposits 32 ETH to the official Deposit contract\\n    /// @param _publicKey The public key of the validator\\n    /// @param _signature The signature provided by the operator\\n    /// @param _withdrawalCredentials The withdrawal credentials provided by River\\n    function _depositValidator(\\n        bytes memory _publicKey,\\n        bytes memory _signature,\\n        bytes32 _withdrawalCredentials\\n    ) internal {\\n        if (_publicKey.length != PUBLIC_KEY_LENGTH) {\\n            revert InconsistentPublicKeys();\\n        }\\n\\n        if (_signature.length != SIGNATURE_LENGTH) {\\n            revert InconsistentSignatures();\\n        }\\n        uint256 value = DEPOSIT_SIZE;\\n\\n        uint256 depositAmount = value / 1000000000 wei;\\n        assert(depositAmount * 1000000000 wei == value);\\n\\n        bytes32 pubkeyRoot = sha256(BytesLib.pad64(_publicKey));\\n        bytes32 signatureRoot = sha256(\\n            abi.encodePacked(\\n                sha256(BytesLib.slice(_signature, 0, 64)),\\n                sha256(BytesLib.pad64(BytesLib.slice(_signature, 64, SIGNATURE_LENGTH - 64)))\\n            )\\n        );\\n\\n        bytes32 depositDataRoot = sha256(\\n            abi.encodePacked(\\n                sha256(abi.encodePacked(pubkeyRoot, _withdrawalCredentials)),\\n                sha256(abi.encodePacked(Uint256Lib.toLittleEndian64(depositAmount), signatureRoot))\\n            )\\n        );\\n\\n        uint256 targetBalance = address(this).balance - value;\\n\\n        DepositContractAddress.get().deposit{value: value}(\\n            _publicKey,\\n            abi.encodePacked(_withdrawalCredentials),\\n            _signature,\\n            depositDataRoot\\n        );\\n        require(address(this).balance == targetBalance, \\\"EXPECTING_DEPOSIT_TO_HAPPEN\\\");\\n    }\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    function getDepositedValidatorCount() external view returns (uint256 depositedValidatorCount) {\\n        depositedValidatorCount = DepositedValidatorCount.get();\\n    }\\n}\\n\",\"keccak256\":\"0x1c6e210b2b3163aed6309a8c4876cad579b9c85d3e9471e996f2b7e3b5f73b6b\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/OperatorsManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../libraries/Uint256Lib.sol\\\";\\nimport \\\"../libraries/LibOwnable.sol\\\";\\n\\nimport \\\"../state/river/Operators.sol\\\";\\nimport \\\"../state/river/ValidatorKeys.sol\\\";\\n\\n/// @title Operators Manager (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the operator and key list\\ncontract OperatorsManagerV1 {\\n    error OperatorAlreadyExists(string name);\\n    error InactiveOperator(uint256 index);\\n    error InvalidFundedKeyDeletionAttempt();\\n    error InvalidUnsortedIndexes();\\n    error InvalidKeyCount();\\n    error InvalidPublicKeysLength();\\n    error InvalidSignatureLength();\\n    error InvalidIndexOutOfBounds();\\n\\n    event AddedOperator(uint256 indexed index, string name, address operatorAddress);\\n    event SetOperatorStatus(uint256 indexed index, bool active);\\n    event SetOperatorLimit(uint256 indexed index, uint256 newLimit);\\n    event SetOperatorStoppedValidatorCount(uint256 indexed index, uint256 newStoppedValidatorCount);\\n    event SetOperatorAddress(uint256 indexed index, address newOperatorAddress);\\n    event AddedValidatorKeys(uint256 indexed index, uint256 totalKeyCount);\\n    event RemovedValidatorKeys(uint256 indexed index, uint256 keyCount);\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() virtual {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents the call from working if the operator is not active\\n    /// @param _index The name identifying the operator\\n    modifier active(uint256 _index) {\\n        if (Operators.getByIndex(_index).active == false) {\\n            revert InactiveOperator(_index);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents anyone except the admin or the given operator to make the call. Also checks if operator is active\\n    /// @param _index The name identifying the operator\\n    modifier operatorOrAdmin(uint256 _index) {\\n        if (msg.sender == LibOwnable._getAdmin()) {\\n            _;\\n            return;\\n        }\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n        if (operator.active == false) {\\n            revert InactiveOperator(_index);\\n        }\\n        if (msg.sender != operator.operator) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    function getOperatorDetails(string calldata _name) external view returns (int256 _index, address _operatorAddress) {\\n        _index = Operators.indexOf(_name);\\n        _operatorAddress = Operators.get(_name).operator;\\n    }\\n\\n    /// @notice Adds an operator to the registry\\n    /// @dev Only callable by the administrator\\n    /// @param _name The name identifying the operator\\n    /// @param _operator The address representing the operator, receiving the rewards\\n    function addOperator(string calldata _name, address _operator) external onlyAdmin {\\n        if (Operators.exists(_name) == true) {\\n            revert OperatorAlreadyExists(_name);\\n        }\\n\\n        Operators.Operator memory newOperator = Operators.Operator({\\n            active: true,\\n            operator: _operator,\\n            name: _name,\\n            limit: 0,\\n            funded: 0,\\n            keys: 0,\\n            stopped: 0\\n        });\\n\\n        uint256 operatorIndex = Operators.set(_name, newOperator);\\n\\n        emit AddedOperator(operatorIndex, newOperator.name, newOperator.operator);\\n    }\\n\\n    /// @notice Changes the operator address of an operator\\n    /// @dev Only callable by the administrator or the previous operator address\\n    /// @param _index The operator index\\n    /// @param _newOperatorAddress The new address representing the operator\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external operatorOrAdmin(_index) {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        operator.operator = _newOperatorAddress;\\n\\n        emit SetOperatorAddress(_index, operator.operator);\\n    }\\n\\n    /// @notice Changes the operator status\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStatus The new status of the operator\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external onlyAdmin {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        operator.active = _newStatus;\\n\\n        emit SetOperatorStatus(_index, _newStatus);\\n    }\\n\\n    /// @notice Changes the operator stopped validator cound\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStoppedValidatorCount The new stopped validator count of the operator\\n    function setOperatorStoppedValidatorCount(uint256 _index, uint256 _newStoppedValidatorCount) external onlyAdmin {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        operator.stopped = _newStoppedValidatorCount;\\n\\n        emit SetOperatorStoppedValidatorCount(_index, operator.stopped);\\n    }\\n\\n    /// @notice Changes the operator staking limit\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newLimit The new staking limit of the operator\\n    function setOperatorLimit(uint256 _index, uint256 _newLimit) external onlyAdmin {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        operator.limit = _newLimit;\\n\\n        emit SetOperatorLimit(_index, operator.limit);\\n    }\\n\\n    /// @notice Adds new keys for an operator\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @param _index The operator index\\n    /// @param _keyCount The amount of keys provided\\n    /// @param _publicKeys Public keys of the validator, concatenated\\n    /// @param _signatures Signatures of the validator keys, concatenated\\n    function addValidators(\\n        uint256 _index,\\n        uint256 _keyCount,\\n        bytes calldata _publicKeys,\\n        bytes calldata _signatures\\n    ) external operatorOrAdmin(_index) {\\n        if (_keyCount == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        if (_publicKeys.length != _keyCount * ValidatorKeys.PUBLIC_KEY_LENGTH) {\\n            revert InvalidPublicKeysLength();\\n        }\\n\\n        if (_signatures.length != _keyCount * ValidatorKeys.SIGNATURE_LENGTH) {\\n            revert InvalidSignatureLength();\\n        }\\n\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        for (uint256 idx = 0; idx < _keyCount; ++idx) {\\n            bytes memory publicKey = BytesLib.slice(\\n                _publicKeys,\\n                idx * ValidatorKeys.PUBLIC_KEY_LENGTH,\\n                ValidatorKeys.PUBLIC_KEY_LENGTH\\n            );\\n            bytes memory signature = BytesLib.slice(\\n                _signatures,\\n                idx * ValidatorKeys.SIGNATURE_LENGTH,\\n                ValidatorKeys.SIGNATURE_LENGTH\\n            );\\n            ValidatorKeys.set(_index, operator.keys + idx, publicKey, signature);\\n        }\\n\\n        operator.keys += _keyCount;\\n\\n        emit AddedValidatorKeys(_index, operator.keys);\\n    }\\n\\n    /// @notice Remove validator keys\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @dev The indexes must be provided sorted in decreasing order, otherwise the method will revert\\n    /// @param _index The operator index\\n    /// @param _indexes The indexes of the keys to remove\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external operatorOrAdmin(_index) {\\n        Operators.Operator storage operator = Operators.getByIndex(_index);\\n\\n        if (_indexes.length == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        for (uint256 idx = 0; idx < _indexes.length; ++idx) {\\n            uint256 keyIndex = _indexes[idx];\\n\\n            if (keyIndex < operator.funded) {\\n                revert InvalidFundedKeyDeletionAttempt();\\n            }\\n\\n            if (keyIndex >= operator.keys) {\\n                revert InvalidIndexOutOfBounds();\\n            }\\n\\n            if (idx > 0 && _indexes[idx] >= _indexes[idx - 1]) {\\n                revert InvalidUnsortedIndexes();\\n            }\\n\\n            uint256 lastKeyIndex = operator.keys - 1;\\n            (bytes memory lastPublicKey, bytes memory lastSignature) = ValidatorKeys.get(_index, lastKeyIndex);\\n            ValidatorKeys.set(_index, keyIndex, lastPublicKey, lastSignature);\\n            ValidatorKeys.set(_index, lastKeyIndex, new bytes(0), new bytes(0));\\n            operator.keys -= 1;\\n        }\\n\\n        emit RemovedValidatorKeys(_index, operator.keys);\\n    }\\n\\n    /// @notice Get operator details by name\\n    /// @param _name The name identifying the operator\\n    function getOperatorByName(string calldata _name) external view returns (Operators.Operator memory) {\\n        return Operators.get(_name);\\n    }\\n\\n    /// @notice Get operator details\\n    /// @param _index The index of the operator\\n    function getOperator(uint256 _index) external view returns (Operators.Operator memory) {\\n        return Operators.getByIndex(_index);\\n    }\\n\\n    /// @notice Get operator count\\n    function getOperatorCount() external view returns (uint256) {\\n        return Operators.getCount();\\n    }\\n\\n    /// @notice Get the details of a validator\\n    /// @param _operatorIndex The index of the operator\\n    /// @param _validatorIndex The index of the validator\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (\\n            bytes memory publicKey,\\n            bytes memory signature,\\n            bool funded\\n        )\\n    {\\n        (publicKey, signature) = ValidatorKeys.get(_operatorIndex, _validatorIndex);\\n        funded = _validatorIndex <= Operators.getByIndex(_operatorIndex).funded;\\n    }\\n\\n    /// @notice Internal utility to concatenate bytes arrays together\\n    function _concatenateByteArrays(bytes[] memory arr1, bytes[] memory arr2)\\n        internal\\n        pure\\n        returns (bytes[] memory res)\\n    {\\n        res = new bytes[](arr1.length + arr2.length);\\n        for (uint256 idx = 0; idx < arr1.length; ++idx) {\\n            res[idx] = arr1[idx];\\n        }\\n        for (uint256 idx = 0; idx < arr2.length; ++idx) {\\n            res[idx + arr1.length] = arr2[idx];\\n        }\\n    }\\n\\n    /// @notice Handler called whenever a deposit to the consensus layer is made. Should retrieve _requestedAmount or lower keys\\n    /// @param _requestedAmount Amount of keys required. Contract is expected to send _requestedAmount or lower.\\n    function _getNextValidatorsFromActiveOperators(uint256 _requestedAmount)\\n        internal\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        Operators.Operator[] memory operators = Operators.getAllFundable();\\n\\n        if (operators.length == 0) {\\n            return (new bytes[](0), new bytes[](0));\\n        }\\n\\n        uint256 selectedOperatorIndex = 0;\\n        for (uint256 idx = 1; idx < operators.length; ++idx) {\\n            if (operators[idx].funded < operators[selectedOperatorIndex].funded) {\\n                selectedOperatorIndex = idx;\\n            }\\n        }\\n\\n        uint256 availableOperatorKeys = Uint256Lib.min(\\n            operators[selectedOperatorIndex].keys,\\n            operators[selectedOperatorIndex].limit\\n        ) - operators[selectedOperatorIndex].funded;\\n\\n        Operators.Operator storage operator = Operators.get(operators[selectedOperatorIndex].name);\\n        if (availableOperatorKeys >= _requestedAmount) {\\n            (publicKeys, signatures) = ValidatorKeys.getKeys(\\n                selectedOperatorIndex,\\n                operators[selectedOperatorIndex].funded,\\n                _requestedAmount\\n            );\\n            operator.funded += _requestedAmount;\\n        } else {\\n            (publicKeys, signatures) = ValidatorKeys.getKeys(\\n                selectedOperatorIndex,\\n                operators[selectedOperatorIndex].funded,\\n                availableOperatorKeys\\n            );\\n            operator.funded += availableOperatorKeys;\\n            (\\n                bytes[] memory additionalPublicKeys,\\n                bytes[] memory additionalSignatures\\n            ) = _getNextValidatorsFromActiveOperators(_requestedAmount - availableOperatorKeys);\\n            publicKeys = _concatenateByteArrays(publicKeys, additionalPublicKeys);\\n            signatures = _concatenateByteArrays(signatures, additionalSignatures);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc22e212f9197477d047233ff44b9d457ead0bbd3511cfdc1c2143e7c8bc14ad7\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/OracleManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../libraries/LibOwnable.sol\\\";\\n\\nimport \\\"../state/river/OracleAddress.sol\\\";\\nimport \\\"../state/river/LastOracleRoundId.sol\\\";\\nimport \\\"../state/river/BeaconValidatorBalanceSum.sol\\\";\\nimport \\\"../state/river/BeaconValidatorCount.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\n\\n/// @title Oracle Manager (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the inputs provided by the oracle\\nabstract contract OracleManagerV1 {\\n    event BeaconDataUpdate(uint256 validatorCount, uint256 validatorBalanceSum, bytes32 roundId);\\n\\n    error InvalidValidatorCountReport(uint256 _providedValidatorCount, uint256 _depositedValidatorCount);\\n\\n    /// @notice Handler called if the delta between the last and new validator balance sum is positive\\n    /// @dev Must be overriden\\n    /// @param _profits The positive increase in the validator balance sum (staking rewards)\\n    function _onEarnings(uint256 _profits) internal virtual;\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() virtual {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Sets the validator count and validator balance sum reported by the oracle\\n    /// @dev Can only be called by the oracle address\\n    /// @param _validatorCount The number of active validators on the consensus layer\\n    /// @param _validatorBalanceSum The validator balance sum of the active validators on the consensus layer\\n    /// @param _roundId An identifier for this update\\n    function setBeaconData(\\n        uint256 _validatorCount,\\n        uint256 _validatorBalanceSum,\\n        bytes32 _roundId\\n    ) external {\\n        if (msg.sender != OracleAddress.get()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n\\n        if (_validatorCount > DepositedValidatorCount.get()) {\\n            revert InvalidValidatorCountReport(_validatorCount, DepositedValidatorCount.get());\\n        }\\n\\n        uint256 previousValidatorBalanceSum = BeaconValidatorBalanceSum.get();\\n        uint256 newValidators = _validatorCount - BeaconValidatorCount.get();\\n\\n        BeaconValidatorBalanceSum.set(_validatorBalanceSum);\\n        BeaconValidatorCount.set(_validatorCount);\\n        LastOracleRoundId.set(_roundId);\\n\\n        if (previousValidatorBalanceSum < _validatorBalanceSum) {\\n            _onEarnings(_validatorBalanceSum - previousValidatorBalanceSum - newValidators * 32 ether);\\n        }\\n\\n        emit BeaconDataUpdate(_validatorCount, _validatorBalanceSum, _roundId);\\n    }\\n\\n    /// @notice Get Oracle address\\n    function getOracle() external view returns (address oracle) {\\n        oracle = OracleAddress.get();\\n    }\\n\\n    /// @notice Set Oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external onlyAdmin {\\n        OracleAddress.set(_oracleAddress);\\n    }\\n\\n    /// @notice Get Beacon validator balance sum\\n    function getBeaconValidatorBalanceSum() external view returns (uint256 beaconValidatorBalanceSum) {\\n        beaconValidatorBalanceSum = BeaconValidatorBalanceSum.get();\\n    }\\n\\n    /// @notice Get Beacon validator count (the amount of validator reported by the oracles)\\n    function getBeaconValidatorCount() external view returns (uint256 beaconValidatorCount) {\\n        beaconValidatorCount = BeaconValidatorCount.get();\\n    }\\n}\\n\",\"keccak256\":\"0x5cc8d84276ea4049f9a0c370248c926cbeed1ef1d4d56c2dbe0cc95fd357050f\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/SharesManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nimport \\\"../state/river/Shares.sol\\\";\\nimport \\\"../state/river/SharesPerOwner.sol\\\";\\nimport \\\"../state/river/ApprovalsPerOwner.sol\\\";\\n\\n/// @title Shares Manager (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the shares of the depositor and the rebasing effect depending on the oracle data\\nabstract contract SharesManagerV1 is IERC20 {\\n    error BalanceTooLow();\\n    error UnauthorizedOperation();\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n    error NullTransfer();\\n\\n    function _isAccountAllowed(address _account) internal view virtual returns (bool);\\n\\n    modifier allowed(address _account) {\\n        if (!_isAccountAllowed(_account)) {\\n            revert Errors.Unauthorized(_account);\\n        }\\n        _;\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"River\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"rETH\\\";\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _assetBalance();\\n    }\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance) {\\n        return _balanceOf(_owner);\\n    }\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining) {\\n        return ApprovalsPerOwner.get(_owner, _spender);\\n    }\\n\\n    function sharesOf(address _owner) external view returns (uint256 shares) {\\n        return SharesPerOwner.get(_owner);\\n    }\\n\\n    function transfer(address _to, uint256 _value) external allowed(msg.sender) allowed(_to) returns (bool success) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        if (_balanceOf(msg.sender) < _value) {\\n            revert BalanceTooLow();\\n        }\\n\\n        uint256 shares = _sharesFromBalance(_value);\\n\\n        SharesPerOwner.set(msg.sender, SharesPerOwner.get(msg.sender) - shares);\\n        SharesPerOwner.set(_to, SharesPerOwner.get(_to) + shares);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external allowed(_from) allowed(_to) returns (bool success) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        if (_from != msg.sender) {\\n            uint256 currentAllowance = ApprovalsPerOwner.get(_from, msg.sender);\\n            if (currentAllowance < _value) {\\n                revert AllowanceTooLow(_from, msg.sender, currentAllowance, _value);\\n            }\\n            ApprovalsPerOwner.set(_from, msg.sender, currentAllowance - _value);\\n        }\\n\\n        if (_balanceOf(_from) < _value) {\\n            revert BalanceTooLow();\\n        }\\n\\n        uint256 shares = _sharesFromBalance(_value);\\n\\n        SharesPerOwner.set(_from, SharesPerOwner.get(_from) - shares);\\n        SharesPerOwner.set(_to, SharesPerOwner.get(_to) + shares);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) external allowed(msg.sender) returns (bool success) {\\n        ApprovalsPerOwner.set(msg.sender, _spender, _value);\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function _assetBalance() internal view virtual returns (uint256);\\n\\n    function _balanceFromShares(uint256 shares) internal view returns (uint256) {\\n        uint256 _totalSharesValue = Shares.get();\\n\\n        if (_totalSharesValue == 0) {\\n            return 0;\\n        }\\n\\n        return ((shares * _assetBalance())) / _totalSharesValue;\\n    }\\n\\n    function _sharesFromBalance(uint256 balance) internal view returns (uint256) {\\n        uint256 assetBalance = _assetBalance();\\n\\n        if (assetBalance == 0) {\\n            return 0;\\n        }\\n\\n        return (balance * Shares.get()) / assetBalance;\\n    }\\n\\n    // assuming funds are received, _assetBalance should have taken _value into account\\n    function _mintShares(address _owner, uint256 _value) internal {\\n        uint256 assetBalance = _assetBalance();\\n        uint256 oldTotalAssetBalance = _assetBalance() - _value;\\n\\n        if (oldTotalAssetBalance == 0) {\\n            _mintRawShares(_owner, assetBalance);\\n        } else {\\n            uint256 sharesToMint = (_value * _totalShares()) / oldTotalAssetBalance;\\n            _mintRawShares(_owner, sharesToMint);\\n        }\\n    }\\n\\n    // assuming funds are received, _assetBalance should have taken _value into account\\n    function _mintRawShares(address _owner, uint256 _value) internal {\\n        Shares.set(Shares.get() + _value);\\n        SharesPerOwner.set(_owner, SharesPerOwner.get(_owner) + _value);\\n        emit Transfer(address(0), _owner, _value);\\n    }\\n\\n    function _balanceOf(address _owner) internal view returns (uint256 balance) {\\n        return _balanceFromShares(SharesPerOwner.get(_owner));\\n    }\\n\\n    function _totalShares() internal view returns (uint256) {\\n        return Shares.get();\\n    }\\n\\n    function totalShares() external view returns (uint256) {\\n        return _totalShares();\\n    }\\n}\\n\",\"keccak256\":\"0xf551a5ff0993182a33ad4dfcf34d3ce3a45e1820299d86c39816865019c5b30d\",\"license\":\"BUSL-1.1\"},\"contracts/src/components/TransferManager.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/Errors.sol\\\";\\n\\n/// @title Transfer Manager (v1)\\n/// @author SkillZ\\n/// @notice This contract handles the inbound transfers cases or the explicit submissions\\nabstract contract TransferManagerV1 {\\n    event UserDeposit(address indexed user, address indexed referral, uint256 amount);\\n\\n    error EmptyDeposit();\\n\\n    /// @notice Handler called whenever a user has sent funds to the contract\\n    /// @dev Must be overriden\\n    /// @param _depositor Address that made the deposit\\n    /// @param _amount Amount deposited\\n    function _onDeposit(address _depositor, uint256 _amount) internal virtual;\\n\\n    /// @notice Internal utility calling the deposit handler and emitting the deposit details and the referral address\\n    /// @param _referral Referral address, address(0) if none\\n    function _deposit(address _referral) internal {\\n        if (msg.value == 0) {\\n            revert EmptyDeposit();\\n        }\\n\\n        _onDeposit(msg.sender, msg.value);\\n\\n        emit UserDeposit(msg.sender, _referral, msg.value);\\n    }\\n\\n    /// @notice Explicit deposit method\\n    /// @param _referral Referral address, address(0) if none\\n    function deposit(address _referral) external payable {\\n        _deposit(_referral);\\n    }\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable {\\n        _deposit(address(0));\\n    }\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable {\\n        revert Errors.InvalidCall();\\n    }\\n}\\n\",\"keccak256\":\"0x54b067272d53e86078925c0606f4412dfd0e8eb27fb37fc0be108096fc4deb74\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IDepositContract.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IDepositContract {\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawalCredentials,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa5b1f77965814e1cc883111cb2909bf58647c401d03ada85b95a65cf54f8b029\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n}\\n\",\"keccak256\":\"0x3fdc46f7b30b29d3b9d540ba1b06cfaede61a7c6ce31c8fe434a9af6f411a920\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/BytesLib.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary BytesLib {\\n    function pad64(bytes memory _b) internal pure returns (bytes memory) {\\n        assert(_b.length >= 32 && _b.length <= 64);\\n        if (64 == _b.length) return _b;\\n\\n        bytes memory zero32 = new bytes(32);\\n        assembly {\\n            mstore(add(zero32, 0x20), 0)\\n        }\\n\\n        if (32 == _b.length) return BytesLib.concat(_b, zero32);\\n        else return BytesLib.concat(_b, BytesLib.slice(zero32, 0, uint256(64) - _b.length));\\n    }\\n\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xb7520fc078933f9e1db774a3040baee1f915a70475d76e4731f6ef34d386e8f9\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    error Unauthorized(address caller);\\n    error InvalidCall();\\n    error InvalidArgument();\\n}\\n\",\"keccak256\":\"0xf3d3cec3d3d583aac19da0ace05f7ee067d47fd67e2a1f5f3195d7cbc5329325\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\n\\nlibrary LibOwnable {\\n    function _setAdmin(address newAdmin) internal {\\n        AdministratorAddress.set(newAdmin);\\n    }\\n\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n}\\n\",\"keccak256\":\"0xc189956546f854193e5fea6225b6eb0262ab192a97c4e32575eefe8205549794\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Uint256Lib.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Uint256Lib {\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 temp_value = _value;\\n        for (uint256 i = 0; i < 8; ++i) {\\n            result = (result << 8) | (temp_value & 0xFF);\\n            temp_value >>= 8;\\n        }\\n\\n        assert(0 == temp_value); // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256 max) {\\n        return (a > b ? b : a);\\n    }\\n}\\n\",\"keccak256\":\"0x0cba10266338d44e5778d43600eb69e2089c45124625f77ee935f06788af15f8\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52ccf1daa33de9c72831e0d7458928c37ca7b5f8d8f732114095edeb81339920\",\"license\":\"MIT\"},\"contracts/src/state/river/AllowerAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary AllowerAddress {\\n    bytes32 public constant ALLOWER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowerAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ALLOWER_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ALLOWER_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x5f8036d3f955fc9b8a8e3cce6886d609400eb70ec6f22439180f20791ba76144\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Allowlist.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Allowlist {\\n    bytes32 public constant ALLOWLIST_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowlist\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => bool) value;\\n    }\\n\\n    function get(address account) internal view returns (bool) {\\n        bytes32 slot = ALLOWLIST_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[account];\\n    }\\n\\n    function set(address account, bool status) internal {\\n        bytes32 slot = ALLOWLIST_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[account] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xff5f7d64a4cc4fc6d6f1e419099fda67f2b1add2c8b8c6addbd7be483cc20970\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ApprovalsPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary ApprovalsPerOwner {\\n    bytes32 public constant APPROVALS_PER_OWNER_SLOT = bytes32(uint256(keccak256(\\\"river.state.approvalsPerOwner\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => mapping(address => uint256)) value;\\n    }\\n\\n    function get(address owner, address operator) internal view returns (uint256) {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[owner][operator];\\n    }\\n\\n    function set(\\n        address owner,\\n        address operator,\\n        uint256 newValue\\n    ) internal {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[owner][operator] = newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x0d12a15523294cafd172326e1be4b98c1bcf639fc4a286bda8370fc85a41fcd9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/BeaconValidatorBalanceSum.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary BeaconValidatorBalanceSum {\\n    bytes32 public constant VALIDATOR_BALANCE_SUM_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.beaconValidatorBalanceSum\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VALIDATOR_BALANCE_SUM_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VALIDATOR_BALANCE_SUM_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x01f9af561a5e2a64da59d72a305f68ec31016d5202c53de74c6a477c6bdd0ff3\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/BeaconValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary BeaconValidatorCount {\\n    bytes32 public constant BEACON_VALIDATOR_COUNT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.beaconValidatorCount\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(BEACON_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(BEACON_VALIDATOR_COUNT_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x5260d1258dfd22d70f33a8a0cb1757d4770096fd5697c384423a3359d72aa957\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositContractAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../interfaces/IDepositContract.sol\\\";\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary DepositContractAddress {\\n    bytes32 public constant DEPOSIT_CONTRACT_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositContractAddress\\\")) - 1);\\n\\n    function get() internal view returns (IDepositContract) {\\n        return IDepositContract(UnstructuredStorage.getStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT));\\n    }\\n\\n    function set(IDepositContract newValue) internal {\\n        return UnstructuredStorage.setStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT, address(newValue));\\n    }\\n}\\n\",\"keccak256\":\"0xc53c4c1976e8da650ed4c246d0504db7a108de7dc3e3d60bb702eee247192f2c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/DepositedValidatorCount.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary DepositedValidatorCount {\\n    bytes32 public constant DEPOSITED_VALIDATOR_COUNT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositedValidatorCount\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xa1c3309b1b7b9ecdd328f62c0bef365a230d4a7275e2a590794bd6f368e2baa9\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/GlobalFee.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary GlobalFee {\\n    bytes32 public constant GLOBAL_FEE_SLOT = bytes32(uint256(keccak256(\\\"river.state.globalFee\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(GLOBAL_FEE_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(GLOBAL_FEE_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf35e8f433c5761e219bee317aa5ae1d78d42e5387ad0b1023b8384f99c5104b4\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/LastOracleRoundId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary LastOracleRoundId {\\n    bytes32 public constant LAST_ORACLE_ROUND_ID_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.lastOracleRoundId\\\")) - 1);\\n\\n    function get() internal view returns (bytes32) {\\n        return UnstructuredStorage.getStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT);\\n    }\\n\\n    function set(bytes32 newValue) internal {\\n        UnstructuredStorage.setStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x0f0657382184c4246a6c528476b0c8f2a1eb9002f70b39a9c974fa47f80a20f3\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OperatorRewardsShare.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary OperatorRewardsShare {\\n    bytes32 public constant OPERATOR_REWARDS_SHARE_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.operatorRewardsShare\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(OPERATOR_REWARDS_SHARE_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(OPERATOR_REWARDS_SHARE_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xbffff7d0ed1614a246acb5b31a5555c6992bed9e305b46158d206267b1975e78\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Operators.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Operators {\\n    bytes32 public constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.operators\\\")) - 1);\\n\\n    bytes32 public constant OPERATORS_MAPPING_SLOT = bytes32(uint256(keccak256(\\\"river.state.operatorsMapping\\\")) - 1);\\n\\n    struct Operator {\\n        bool active;\\n        string name;\\n        address operator;\\n        uint256 limit;\\n        uint256 funded;\\n        uint256 keys;\\n        uint256 stopped;\\n    }\\n\\n    struct OperatorResolution {\\n        bool active;\\n        uint256 index;\\n    }\\n\\n    struct SlotOperator {\\n        Operator[] value;\\n    }\\n\\n    struct SlotOperatorMapping {\\n        mapping(string => OperatorResolution) value;\\n    }\\n\\n    error OperatorNotFound(string name);\\n    error OperatorNotFoundAtIndex(uint256 index);\\n\\n    function _getOperatorIndex(string memory name) internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n\\n        if (opm.value[name].active == false) {\\n            revert OperatorNotFound(name);\\n        }\\n\\n        return opm.value[name].index;\\n    }\\n\\n    function _getOperatorActive(string memory name) internal view returns (bool) {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n        return opm.value[name].active;\\n    }\\n\\n    function _setOperatorIndex(\\n        string memory name,\\n        bool active,\\n        uint256 index\\n    ) internal {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n        opm.value[name] = OperatorResolution({active: active, index: index});\\n    }\\n\\n    function exists(string memory name) internal view returns (bool) {\\n        return _getOperatorActive(name);\\n    }\\n\\n    function indexOf(string memory name) internal view returns (int256) {\\n        bytes32 slot = OPERATORS_MAPPING_SLOT;\\n\\n        SlotOperatorMapping storage opm;\\n\\n        assembly {\\n            opm.slot := slot\\n        }\\n\\n        if (opm.value[name].active == false) {\\n            return -1;\\n        }\\n\\n        return int256(opm.value[name].index);\\n    }\\n\\n    function get(string memory name) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n        uint256 index = _getOperatorIndex(name);\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[index];\\n    }\\n\\n    function getByIndex(uint256 index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= index) {\\n            revert OperatorNotFoundAtIndex(index);\\n        }\\n\\n        return r.value[index];\\n    }\\n\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    function _hasFundableKeys(Operators.Operator memory operator) internal pure returns (bool) {\\n        return (operator.active && operator.keys > operator.funded && operator.limit > operator.funded);\\n    }\\n\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (r.value[idx].active == true) {\\n                ++activeCount;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (r.value[idx].active == true) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                ++activeIdx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    function getAllFundable() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (_hasFundableKeys(r.value[idx])) {\\n                ++activeCount;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (_hasFundableKeys(r.value[idx])) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                ++activeIdx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    function set(string memory name, Operator memory newValue) internal returns (uint256) {\\n        bool opExists = _getOperatorActive(name);\\n\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (opExists == false) {\\n            r.value.push(newValue);\\n            _setOperatorIndex(name, newValue.active, r.value.length - 1);\\n            return (r.value.length - 1);\\n        } else {\\n            uint256 index = _getOperatorIndex(name);\\n            r.value[index] = newValue;\\n            if (opExists != newValue.active) {\\n                _setOperatorIndex(name, newValue.active, index);\\n            }\\n            return (index);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x464cbea2c10197bfb58d46b55734223159d5f86dda5d83a8303ba23fc202aca0\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/OracleAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary OracleAddress {\\n    bytes32 public constant ORACLE_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.oracleAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ORACLE_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ORACLE_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xa139a378de089b55879828683570348b2346ce9b77591272f2d35e2f5f4aaa31\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/Shares.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Shares {\\n    bytes32 public constant SHARES_SLOT = bytes32(uint256(keccak256(\\\"river.state.shares\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(SHARES_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(SHARES_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x649260bef1a65d4b72d548f4bb58aa7271f538410e0c44a347daf78079a49e72\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/SharesPerOwner.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary SharesPerOwner {\\n    bytes32 public constant SHARES_SLOT = bytes32(uint256(keccak256(\\\"river.state.sharesPerOwner\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(address => uint256) value;\\n    }\\n\\n    function get(address owner) internal view returns (uint256) {\\n        bytes32 slot = SHARES_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[owner];\\n    }\\n\\n    function set(address owner, uint256 newValue) internal {\\n        bytes32 slot = SHARES_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[owner] = newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x3ff40c3621969618a10b5bfbf4850fb239484cd62ac1a3293e2778df20e16c2b\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/TreasuryAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary TreasuryAddress {\\n    bytes32 public constant TREASURY_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.treasuryAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(TREASURY_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(TREASURY_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xb346d50a19c00aff4ab10332f82013bac291d580222306202503a6ba50ac499c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/ValidatorKeys.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/BytesLib.sol\\\";\\n\\nlibrary ValidatorKeys {\\n    uint256 public constant PUBLIC_KEY_LENGTH = 48;\\n    uint256 public constant SIGNATURE_LENGTH = 96;\\n\\n    error InvalidPublicKey();\\n    error InvalidSignature();\\n\\n    bytes32 public constant VALIDATOR_KEYS_SLOT = bytes32(uint256(keccak256(\\\"river.state.validatorKeys\\\")) - 1);\\n\\n    struct Slot {\\n        mapping(uint256 => mapping(uint256 => bytes)) value;\\n    }\\n\\n    function get(uint256 operatorIndex, uint256 idx)\\n        internal\\n        view\\n        returns (bytes memory publicKey, bytes memory signature)\\n    {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        bytes storage entry = r.value[operatorIndex][idx];\\n\\n        publicKey = BytesLib.slice(entry, 0, PUBLIC_KEY_LENGTH);\\n        signature = BytesLib.slice(entry, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n    }\\n\\n    function getKeys(\\n        uint256 operatorIndex,\\n        uint256 startIdx,\\n        uint256 amount\\n    ) internal view returns (bytes[] memory publicKey, bytes[] memory signatures) {\\n        publicKey = new bytes[](amount);\\n        signatures = new bytes[](amount);\\n\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        for (uint256 idx = startIdx; idx < startIdx + amount; ++idx) {\\n            bytes memory rawCredentials = r.value[operatorIndex][idx];\\n            publicKey[idx - startIdx] = BytesLib.slice(rawCredentials, 0, PUBLIC_KEY_LENGTH);\\n            signatures[idx - startIdx] = BytesLib.slice(rawCredentials, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n        }\\n    }\\n\\n    function set(\\n        uint256 operatorIndex,\\n        uint256 idx,\\n        bytes memory publicKey,\\n        bytes memory signature\\n    ) internal {\\n        bytes memory concatenatedKeys = BytesLib.concat(publicKey, signature);\\n\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[operatorIndex][idx] = concatenatedKeys;\\n    }\\n}\\n\",\"keccak256\":\"0xa74ce8befc7ae8b68ea2288b1f632328a7c3c34025274ba3f2921992e6a02ba1\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/river/WithdrawalCredentials.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary WithdrawalCredentials {\\n    bytes32 public constant WITHDRAWAL_CREDENTIALS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.withdrawalCredentials\\\")) - 1);\\n\\n    function get() internal view returns (bytes32) {\\n        return UnstructuredStorage.getStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT);\\n    }\\n\\n    function set(bytes32 newValue) internal {\\n        UnstructuredStorage.setStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x513908d9f006eee6cb307131125d6f25e7d484a1403f75dd2ed3500dfcaf58a0\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary AdministratorAddress {\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x6c103a106ff958994c38f055a316144416df36aeb299ba660e7b8af063931b72\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Version {\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VERSION_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf90d1ecf583061aa70dc464ec1fde21da6e9309601bcbba38f47d26257a1c656\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615060806100206000396000f3fe6080604052600436106102ca5760003560e01c806363b4118f11610179578063a9059cbb116100d6578063d56580ff1161008a578063f340fa0111610064578063f340fa011461081c578063f5eb42dc1461082f578063f87e52961461084f576102db565b8063d56580ff146107c5578063dd62ed3e146107e5578063ec342ad014610805576102db565b8063babcc539116100bb578063babcc53914610770578063bf15af5614610790578063cfa2d2b7146107a5576102db565b8063a9059cbb14610730578063b747e7dd14610750576102db565b8063833b1fce1161012d578063950c44ec11610112578063950c44ec146106b557806395d89b41146106d55780639e3947f31461071b576102db565b8063833b1fce1461068b57806387f2adfb146106a0576102db565b8063714b55b21161015e578063714b55b21461062b5780637adbf9731461064b57806380d4027e1461066b576102db565b806363b4118f146105dc57806370a082311461060b576102db565b8063252d6a34116102275780633eb8b77a116101db578063540bc5ea116101c0578063540bc5ea146105875780635a16f1351461059c5780635f41a0c4146105bc576102db565b80633eb8b77a1461052a57806350545d2f14610567576102db565b8063313ce5671161020c578063313ce567146104dc57806336bf3325146104f85780633a98ef3914610515576102db565b8063252d6a34146104a7578063291206f6146104bc576102db565b8063169674071161027e5780631864636c116102635780631864636c146104525780631a4a7c611461047257806323b872dd14610487576102db565b8063169674071461040257806318160ddd1461042f576102db565b8063095ea7b3116102af578063095ea7b314610392578063110496e5146103c257806313d86aed146103e2576102db565b806305f63c8a1461030d57806306fdde0314610343576102db565b366102db576102d9600061086f565b005b6040517fae962d4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561031957600080fd5b5061032d61032836600461491c565b6108f3565b60405161033a919061498d565b60405180910390f35b34801561034f57600080fd5b5060408051808201909152600581527f526976657200000000000000000000000000000000000000000000000000000060208201525b60405161033a91906149fd565b34801561039e57600080fd5b506103b26103ad366004614a2c565b610a37565b604051901515815260200161033a565b3480156103ce57600080fd5b506102d96103dd366004614a66565b610ac7565b3480156103ee57600080fd5b506102d96103fd36600461491c565b610b7c565b34801561040e57600080fd5b50610417610d54565b6040516001600160a01b03909116815260200161033a565b34801561043b57600080fd5b50610444610d63565b60405190815260200161033a565b34801561045e57600080fd5b506102d961046d366004614a99565b610d6d565b34801561047e57600080fd5b5061044461119f565b34801561049357600080fd5b506103b26104a2366004614b18565b6111a9565b3480156104b357600080fd5b5061044461137f565b3480156104c857600080fd5b506102d96104d736600461491c565b611389565b3480156104e857600080fd5b506040516012815260200161033a565b34801561050457600080fd5b506104446801bc16d674ec80000081565b34801561052157600080fd5b506104446113f4565b34801561053657600080fd5b5061054a610545366004614b9d565b6113fe565b604080519283526001600160a01b0390911660208301520161033a565b34801561057357600080fd5b506102d9610582366004614bdf565b61149a565b34801561059357600080fd5b50610444606081565b3480156105a857600080fd5b506102d96105b7366004614c33565b61165e565b3480156105c857600080fd5b506102d96105d7366004614c56565b6116f0565b3480156105e857600080fd5b506105fc6105f7366004614c56565b611772565b60405161033a93929190614c78565b34801561061757600080fd5b50610444610626366004614cb0565b61179f565b34801561063757600080fd5b506102d9610646366004614c56565b6117b0565b34801561065757600080fd5b506102d9610666366004614cb0565b611832565b34801561067757600080fd5b506102d9610686366004614ccb565b611876565b34801561069757600080fd5b506104176119c0565b3480156106ac57600080fd5b506104446119ca565b3480156106c157600080fd5b506102d96106d0366004614cf7565b6119d4565b3480156106e157600080fd5b5060408051808201909152600481527f72455448000000000000000000000000000000000000000000000000000000006020820152610385565b34801561072757600080fd5b50610444611a7c565b34801561073c57600080fd5b506103b261074b366004614a2c565b611a86565b34801561075c57600080fd5b506102d961076b366004614d68565b611ba8565b34801561077c57600080fd5b506103b261078b366004614cb0565b611f88565b34801561079c57600080fd5b50610444603081565b3480156107b157600080fd5b5061032d6107c0366004614b9d565b611f93565b3480156107d157600080fd5b506102d96107e036600461491c565b61210e565b3480156107f157600080fd5b50610444610800366004614deb565b612176565b34801561081157600080fd5b50610444620186a081565b6102d961082a366004614cb0565b612189565b34801561083b57600080fd5b5061044461084a366004614cb0565b612192565b34801561085b57600080fd5b506102d961086a366004614e15565b61219d565b346108a6576040517f95b66fe900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108b03334612304565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b61093e6040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b61094782612343565b6040805160e08101909152815460ff161515815260018201805491929160208401919061097390614e38565b80601f016020809104026020016040519081016040528092919081815260200182805461099f90614e38565b80156109ec5780601f106109c1576101008083540402835291602001916109ec565b820191906000526020600020905b8154815290600101906020018083116109cf57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a09091015292915050565b600033610a4381611f88565b610a705760405163472511eb60e11b81526001600160a01b03821660048201526024015b60405180910390fd5b610a7b3385856123df565b6040518381526001600160a01b0385169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259060200160405180910390a3600191505b5092915050565b610acf612436565b6001600160a01b0316336001600160a01b031614158015610b095750610af361246a565b6001600160a01b0316336001600160a01b031614155b15610b295760405163472511eb60e11b8152336004820152602401610a67565b610b33828261249a565b816001600160a01b03167f1b4f0c8c88fcaadd952eda5461f779c8707eb21acf10b63097c2388c6ab3849182604051610b70911515815260200190565b60405180910390a25050565b6000610b9a610b946801bc16d674ec80000047614e83565b836124f5565b905080610bd3576040517f81b5ad6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610bdf8361250a565b8151919350915080610c1d576040517f800526b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83811115610c57576040517f5993bd5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8151818114610c92576040517f8b97390c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610c9c61251f565b905080610cd5576040517f9be7315900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83811015610d2f57610d1d868281518110610cf557610cf5614ea5565b6020026020010151868381518110610d0f57610d0f614ea5565b60200260200101518461254f565b610d28600182614ebb565b9050610cd8565b50610d4b83610d3c6129ea565b610d469190614ebb565b612a1a565b50505050505050565b6000610d5e612a4d565b905090565b6000610d5e612a57565b82610d76612a4d565b6001600160a01b0316336001600160a01b03161415610f82576000610d9a85612343565b905082610dba576040516379b348ff60e11b815260040160405180910390fd5b60005b83811015610f3d576000858583818110610dd957610dd9614ea5565b9050602002013590508260040154811015610e075760405163213af80760e21b815260040160405180910390fd5b82600501548110610e2b576040516317df2d8d60e01b815260040160405180910390fd5b600082118015610e7557508585610e43600185614ed3565b818110610e5257610e52614ea5565b90506020020135868684818110610e6b57610e6b614ea5565b9050602002013510155b15610e935760405163c9ee26af60e01b815260040160405180910390fd5b600060018460050154610ea69190614ed3565b9050600080610eb58a84612ac3565b91509150610ec58a858484612c4b565b610f0c8a8460005b6040519080825280601f01601f191660200182016040528015610ef7576020820181803683370190505b50604080516000815260208101909152612c4b565b6001866005016000828254610f219190614ed3565b925050819055505050505080610f3690614f00565b9050610dbd565b50847f3162702bacdcc8640bbae8973e0bfe03af8a527f10b58caaf3695f0b268d7e908260050154604051610f7491815260200190565b60405180910390a250611199565b6000610f8d82612343565b805490915060ff16610fb5576040516301550a7360e41b815260048101839052602401610a67565b60028101546001600160a01b03163314610fe45760405163472511eb60e11b8152336004820152602401610a67565b6000610fef86612343565b90508361100f576040516379b348ff60e11b815260040160405180910390fd5b60005b8481101561115757600086868381811061102e5761102e614ea5565b905060200201359050826004015481101561105c5760405163213af80760e21b815260040160405180910390fd5b82600501548110611080576040516317df2d8d60e01b815260040160405180910390fd5b6000821180156110ca57508686611098600185614ed3565b8181106110a7576110a7614ea5565b905060200201358787848181106110c0576110c0614ea5565b9050602002013510155b156110e85760405163c9ee26af60e01b815260040160405180910390fd5b6000600184600501546110fb9190614ed3565b905060008061110a8b84612ac3565b9150915061111a8b858484612c4b565b6111268b846000610ecd565b600186600501600082825461113b9190614ed3565b92505081905550505050508061115090614f00565b9050611012565b50857f3162702bacdcc8640bbae8973e0bfe03af8a527f10b58caaf3695f0b268d7e90826005015460405161118e91815260200190565b60405180910390a250505b50505050565b6000610d5e612cb0565b6000836111b581611f88565b6111dd5760405163472511eb60e11b81526001600160a01b0382166004820152602401610a67565b836111e781611f88565b61120f5760405163472511eb60e11b81526001600160a01b0382166004820152602401610a67565b8361122d576040516336b216db60e21b815260040160405180910390fd5b6001600160a01b03861633146112ba5760006112498733612ce5565b9050848110156112a4576040517f7b936de30000000000000000000000000000000000000000000000000000000081526001600160a01b03881660048201523360248201526044810182905260648101869052608401610a67565b6112b887336112b38885614ed3565b6123df565b505b836112c487612d3d565b10156112e3576040516351940b3960e11b815260040160405180910390fd5b60006112ee85612d50565b905061130d87826112fe8a612d88565b6113089190614ed3565b612dd6565b611325868261131b89612d88565b6113089190614ebb565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8760405161136a91815260200190565b60405180910390a35060019695505050505050565b6000610d5e612e22565b611391612a4d565b6001600160a01b0316336001600160a01b0316146113c45760405163472511eb60e11b8152336004820152602401610a67565b620186a08111156113e85760405163a9cb9e0d60e01b815260040160405180910390fd5b6113f181612e52565b50565b6000610d5e612e80565b60008061144084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612e8a92505050565b915061148184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612f1a92505050565b6002015491946001600160a01b03909216935090915050565b6114a2612a4d565b6001600160a01b0316336001600160a01b0316146114d55760405163472511eb60e11b8152336004820152602401610a67565b61151483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612f8692505050565b1515600114156115545782826040517f832eebc5000000000000000000000000000000000000000000000000000000008152600401610a67929190614f1b565b60006040518060e0016040528060011515815260200185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b0385166020808401919091526040808401839052606084018390526080840183905260a09093018290528251601f88018290048202810182019093528683529293509161161391908790879081908401838280828437600092019190915250869250612f91915050565b9050807f28febbb5486eda5a1e47ad578f9cb32c8a1983c86c80ab823ea5dc1fc04ede5e8360200151846040015160405161164f929190614f4a565b60405180910390a25050505050565b611666612a4d565b6001600160a01b0316336001600160a01b0316146116995760405163472511eb60e11b8152336004820152602401610a67565b60006116a483612343565b805460ff1916831515908117825560405190815290915083907fe3bc5e5d3b000a1f65d146c40a38d89b1743b5729f4c6fe65f2e4b2dc620f2f2906020015b60405180910390a2505050565b6116f8612a4d565b6001600160a01b0316336001600160a01b03161461172b5760405163472511eb60e11b8152336004820152602401610a67565b600061173683612343565b6006810183905560405183815290915083907f773694db4f98cd263e42d4f798bcf603781d4491e48e8cbe96c219c1f13b777d906020016116e3565b60608060006117818585612ac3565b909350915061178f85612343565b6004015484111590509250925092565b60006117aa82612d3d565b92915050565b6117b8612a4d565b6001600160a01b0316336001600160a01b0316146117eb5760405163472511eb60e11b8152336004820152602401610a67565b60006117f683612343565b6003810183905560405183815290915083907f3adbeb5fbb94c52b64d90b31188c68a740868dde2238e03a04d581cae22cedf0906020016116e3565b61183a612a4d565b6001600160a01b0316336001600160a01b03161461186d5760405163472511eb60e11b8152336004820152602401610a67565b6113f18161318c565b61187e6131ba565b6001600160a01b0316336001600160a01b0316146118b15760405163472511eb60e11b8152336004820152602401610a67565b6118b96129ea565b83111561190457826118c96129ea565b6040517f76179ac500000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610a67565b600061190e612e22565b9050600061191a6131ea565b6119249086614ed3565b905061192f8461321a565b61193885613248565b61194183613276565b838210156119785761197861195f826801bc16d674ec800000614f75565b6119698487614ed3565b6119739190614ed3565b6132a4565b60408051868152602081018690529081018490527f98e488f5118fc11ab540716c2afc4e440c0a892d27a4efef33db94b4f9da65899060600160405180910390a15050505050565b6000610d5e6131ba565b6000610d5e6129ea565b60006119de6134ac565b8114611a2857806119ed6134ac565b6040517fe7e93b3800000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610a67565b611a3b611a36826001614ebb565b6134dc565b611a448661350a565b611a4d84613513565b611a5683612e52565b611a5f82613541565b611a69888861356f565b611a7285613581565b5050505050505050565b6000610d5e6131ea565b600033611a9281611f88565b611aba5760405163472511eb60e11b81526001600160a01b0382166004820152602401610a67565b83611ac481611f88565b611aec5760405163472511eb60e11b81526001600160a01b0382166004820152602401610a67565b83611b0a576040516336b216db60e21b815260040160405180910390fd5b83611b1433612d3d565b1015611b33576040516351940b3960e11b815260040160405180910390fd5b6000611b3e85612d50565b9050611b4e33826112fe33612d88565b611b5c868261131b89612d88565b6040518581526001600160a01b0387169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600195945050505050565b85611bb1612a4d565b6001600160a01b0316336001600160a01b03161415611d805785611be8576040516379b348ff60e11b815260040160405180910390fd5b611bf3603087614f75565b8414611c125760405163287c2be760e21b815260040160405180910390fd5b611c1d606087614f75565b8214611c3c57604051634be6321b60e01b815260040160405180910390fd5b6000611c4788612343565b905060005b87811015611d26576000611ca488888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c9d925060309150869050614f75565b603061358a565b90506000611cf687878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611cef925060609150879050614f75565b606061358a565b9050611d138b848660050154611d0c9190614ebb565b8484612c4b565b505080611d1f90614f00565b9050611c4c565b5086816005016000828254611d3b9190614ebb565b9091555050600581015460405190815288907f5974470818610308ee3a0d809bad2cd13d57a3e9a685d3ae337fdef1d2d1b6539060200160405180910390a250610d4b565b6000611d8b82612343565b805490915060ff16611db3576040516301550a7360e41b815260048101839052602401610a67565b60028101546001600160a01b03163314611de25760405163472511eb60e11b8152336004820152602401610a67565b86611e00576040516379b348ff60e11b815260040160405180910390fd5b611e0b603088614f75565b8514611e2a5760405163287c2be760e21b815260040160405180910390fd5b611e35606088614f75565b8314611e5457604051634be6321b60e01b815260040160405180910390fd5b6000611e5f89612343565b905060005b88811015611f29576000611eb589898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c9d925060309150869050614f75565b90506000611f0088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611cef925060609150879050614f75565b9050611f168c848660050154611d0c9190614ebb565b505080611f2290614f00565b9050611e64565b5087816005016000828254611f3e9190614ebb565b9091555050600581015460405190815289907f5974470818610308ee3a0d809bad2cd13d57a3e9a685d3ae337fdef1d2d1b6539060200160405180910390a2505050505050505050565b60006117aa826136b2565b611fde6040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b61201d83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612f1a92505050565b6040805160e08101909152815460ff161515815260018201805491929160208401919061204990614e38565b80601f016020809104026020016040519081016040528092919081815260200182805461207590614e38565b80156120c25780601f10612097576101008083540402835291602001916120c2565b820191906000526020600020905b8154815290600101906020018083116120a557829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a0909101529392505050565b612116612a4d565b6001600160a01b0316336001600160a01b0316146121495760405163472511eb60e11b8152336004820152602401610a67565b620186a081111561216d5760405163a9cb9e0d60e01b815260040160405180910390fd5b6113f181613541565b60006121828383612ce5565b9392505050565b6113f18161086f565b60006117aa82612d88565b816121a6612a4d565b6001600160a01b0316336001600160a01b031614156122355760006121ca84612343565b60028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915560405190815290915084907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e79060200160405180910390a250505050565b600061224082612343565b805490915060ff16612268576040516301550a7360e41b815260048101839052602401610a67565b60028101546001600160a01b031633146122975760405163472511eb60e11b8152336004820152602401610a67565b60006122a285612343565b60028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03871690811790915560405190815290915085907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e79060200161164f565b61230d826136b2565b6123355760405163472511eb60e11b81526001600160a01b0383166004820152602401610a67565b61233f82826136bd565b5050565b60008061237160017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed3565b8054909150819084106123b3576040517fd191a36c00000000000000000000000000000000000000000000000000000000815260048101859052602401610a67565b8060000184815481106123c8576123c8614ea5565b906000526020600020906007020192505050919050565b600061240c60017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847614ed3565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b6000610d5e61246660017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b80614ed3565b5490565b6000610d5e61246660017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113614ed3565b60006124c760017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a4135614ed3565b6001600160a01b03939093166000908152602093909352506040909120805460ff1916911515919091179055565b60008183116125045782612182565b50919050565b60608061251683613726565b91509150915091565b6000610d5e61246660017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42614ed3565b603083511461258a576040517f50cb553000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608251146125c5576040517f408ebd3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6801bc16d674ec80000060006125df633b9aca0083614e83565b9050816125f082633b9aca00614f75565b146125fd576125fd614f94565b6000600261260a8761397d565b6040516126179190614faa565b602060405180830381855afa158015612634573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906126579190614fc6565b9050600060028061266b886000604061358a565b6040516126789190614faa565b602060405180830381855afa158015612695573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906126b89190614fc6565b60026126d86126d38a60406126ce816060614ed3565b61358a565b61397d565b6040516126e59190614faa565b602060405180830381855afa158015612702573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906127259190614fc6565b60408051602081019390935282015260600160408051601f198184030181529082905261275191614faa565b602060405180830381855afa15801561276e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906127919190614fc6565b9050600060028084886040516020016127b4929190918252602082015260400190565b60408051601f19818403018152908290526127ce91614faa565b602060405180830381855afa1580156127eb573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061280e9190614fc6565b600261281987613a06565b604080516020810192909252810186905260600160408051601f198184030181529082905261284791614faa565b602060405180830381855afa158015612864573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906128879190614fc6565b60408051602081019390935282015260600160408051601f19818403018152908290526128b391614faa565b602060405180830381855afa1580156128d0573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906128f39190614fc6565b905060006129018647614ed3565b905061290b613a4c565b6001600160a01b03166322895118878b8a60405160200161292e91815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b815260040161295e9493929190614fdf565b6000604051808303818588803b15801561297757600080fd5b505af115801561298b573d6000803e3d6000fd5b50505050508047146129df5760405162461bcd60e51b815260206004820152601b60248201527f455850454354494e475f4445504f5349545f544f5f48415050454e00000000006044820152606401610a67565b505050505050505050565b6000610d5e61246660017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8614ed3565b6113f1612a4860017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8614ed3565b829055565b6000610d5e61246a565b600080612a626131ea565b90506000612a6e6129ea565b905080821015612aba576801bc16d674ec800000612a8c8383614ed3565b612a969190614f75565b47612a9f612e22565b612aa99190614ebb565b612ab39190614ebb565b9250505090565b47612aa9612e22565b6060806000612af360017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614ed3565b600086815260208281526040808320888452909152902080549192508291612ba7908290612b2090614e38565b80601f0160208091040260200160405190810160405280929190818152602001828054612b4c90614e38565b8015612b995780601f10612b6e57610100808354040283529160200191612b99565b820191906000526020600020905b815481529060010190602001808311612b7c57829003601f168201915b50505050506000603061358a565b9450612c3f818054612bb890614e38565b80601f0160208091040260200160405190810160405280929190818152602001828054612be490614e38565b8015612c315780601f10612c0657610100808354040283529160200191612c31565b820191906000526020600020905b815481529060010190602001808311612c1457829003601f168201915b50505050506030606061358a565b93505050509250929050565b6000612c578383613a7c565b90506000612c8660017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614ed3565b600087815260208281526040808320898452825290912084519293508392611a7292860190614883565b600080612cde60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed3565b5492915050565b600080612d1360017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847614ed3565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b60006117aa612d4b83612d88565b613af9565b600080612d5b612a57565b905080612d6b5750600092915050565b80612d74613b1d565b612d7e9085614f75565b6121829190614e83565b600080612db660017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838614ed3565b6001600160a01b0390931660009081526020939093525050604090205490565b6000612e0360017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838614ed3565b6001600160a01b03909316600090815260209390935250604090912055565b6000610d5e61246660017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e60900614ed3565b6113f1612a4860017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37614ed3565b6000610d5e613b1d565b600080612eb860017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614ed3565b60405190915081908190612ecd908690614faa565b9081526040519081900360200190205460ff16612eef57506000199392505050565b6040518190612eff908690614faa565b90815260200160405180910390206001015492505050919050565b600080612f4860017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed3565b90506000612f5584613b4d565b82549091508290819083908110612f6e57612f6e614ea5565b90600052602060002090600702019350505050919050565b60006117aa82613bdb565b600080612f9d84613bdb565b90506000612fcc60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed3565b905080826130a85780546001808201835560008381526020908190208851600790940201805460ff191693151593909317835587810151805189949361301793908501920190614883565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c0909101516006909101558451815461309091889161308b90600190614ed3565b613c39565b805461309e90600190614ed3565b93505050506117aa565b60006130b387613b4d565b9050858260000182815481106130cb576130cb614ea5565b6000918252602091829020835160079290920201805460ff1916911515919091178155828201518051919261310892600185019290910190614883565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c09091015160069091015585511515841515146131815761318187876000015183613c39565b93506117aa92505050565b6113f1612a4860017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb614ed3565b6000610d5e61246660017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb614ed3565b6000610d5e61246660017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a37614ed3565b6113f1612a4860017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e60900614ed3565b6113f1612a4860017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a37614ed3565b6113f1612a4860017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb529614ed3565b60006132ae613cbd565b905060006132bc8284614f75565b620186a06132c8612a57565b6132d29190614f75565b6132dc9190614ed3565b826132e5612e80565b6132ef9086614f75565b6132f99190614f75565b6133039190614e83565b90506000620186a0613313613ced565b61331d9084614f75565b6133279190614e83565b90506000613333613d1d565b90506000815167ffffffffffffffff81111561335157613351614eea565b60405190808252806020026020018201604052801561337a578160200160208202803683370190505b5090506000805b835181101561340f57600084828151811061339e5761339e614ea5565b602002602001015160c001518583815181106133bc576133bc614ea5565b6020026020010151608001516133d29190614ed3565b90506133de8184614ebb565b9250808483815181106133f3576133f3614ea5565b60209081029190910101525061340881614f00565b9050613381565b5080156134925760006134228286614e83565b905060005b835181101561348b5761347b85828151811061344557613445614ea5565b6020026020010151604001518386848151811061346457613464614ea5565b60200260200101516134769190614f75565b613fdc565b61348481614f00565b9050613427565b5050613497565b600093505b610d4b6134a261404a565b6134768688614ed3565b6000610d5e61246660017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd614ed3565b6113f1612a4860017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd614ed3565b6113f18161407a565b6113f1612a4860017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa3614ed3565b6113f1612a4860017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a8614ed3565b613578826140a8565b61233f816140d6565b6113f181614104565b60608161359881601f614ebb565b10156135e65760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610a67565b6135f08284614ebb565b845110156136405760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610a67565b60608215801561365f57604051915060008252602082016040526136a9565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015613698578051835260209283019201613680565b5050858452601f01601f1916604052505b50949350505050565b60006117aa82614132565b60006136c7612a57565b90506000826136d4612a57565b6136de9190614ed3565b9050806136f4576136ef8483613fdc565b611199565b6000816136ff612e80565b6137099086614f75565b6137139190614e83565b905061371f8582613fdc565b5050505050565b6060806000613733614183565b90508051600014156137a157604080516000808252602082019092529061376a565b60608152602001906001900390816137555790505b506040805160008082526020820190925290613796565b60608152602001906001900390816137815790505b509250925050915091565b600060015b8251811015613805578282815181106137c1576137c1614ea5565b6020026020010151608001518382815181106137df576137df614ea5565b60200260200101516080015110156137f5578091505b6137fe81614f00565b90506137a6565b50600082828151811061381a5761381a614ea5565b60200260200101516080015161386a84848151811061383b5761383b614ea5565b602002602001015160a0015185858151811061385957613859614ea5565b6020026020010151606001516124f5565b6138749190614ed3565b9050600061389e84848151811061388d5761388d614ea5565b602002602001015160200151612f1a565b90508682106138f6576138cf838585815181106138bd576138bd614ea5565b6020026020010151608001518961450a565b8096508197505050868160040160008282546138eb9190614ebb565b909155506139749050565b61391e8385858151811061390c5761390c614ea5565b6020026020010151608001518461450a565b80965081975050508181600401600082825461393a9190614ebb565b909155506000905080613955613950858b614ed3565b613726565b915091506139638883614713565b975061396f8782614713565b965050505b50505050915091565b6060602082511015801561399357506040825111155b61399f5761399f614f94565b8151604014156139ad575090565b604080516020808252818301909252600091602082018180368337019050509050600060208201528251602014156139e9576121828382613a7c565b61218283613a01836000875160406126ce9190614ed3565b613a7c565b600081815b6008811015613a3457600892831b60ff831617929190911c90613a2d81614f00565b9050613a0b565b508015613a4357613a43614f94565b5060c01b919050565b6000610d5e61246660017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260614ed3565b6060806040519050835180825260208201818101602087015b81831015613aad578051835260209283019201613a95565b50855184518101855292509050808201602086015b81831015613ada578051835260209283019201613ac2565b508651929092011591909101601f01601f191660405250905092915050565b600080613b04613b1d565b905080613b145750600092915050565b80612d74612a57565b6000610d5e61246660017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b614ed3565b600080613b7b60017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614ed3565b60405190915081908190613b90908690614faa565b9081526040519081900360200190205460ff16612eef57836040517f34eddfcf000000000000000000000000000000000000000000000000000000008152600401610a6791906149fd565b600080613c0960017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614ed3565b60405190915081908190613c1e908690614faa565b9081526040519081900360200190205460ff16949350505050565b6000613c6660017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614ed3565b604080518082018252851515815260208101859052905191925082918290613c8f908890614faa565b908152604051602091819003820190208251815460ff19169015151781559101516001909101555050505050565b6000610d5e61246660017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37614ed3565b6000610d5e61246660017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a8614ed3565b60606000613d4c60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed3565b9050806000805b8254811015613dab57826000018181548110613d7157613d71614ea5565b600091825260209091206007909102015460ff16151560011415613d9b57613d9882614f00565b91505b613da481614f00565b9050613d53565b5060008167ffffffffffffffff811115613dc757613dc7614eea565b604051908082528060200260200182016040528015613e4357816020015b613e306040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b815260200190600190039081613de55790505b5090506000805b8454811015613fd157846000018181548110613e6857613e68614ea5565b600091825260209091206007909102015460ff16151560011415613fc157846000018181548110613e9b57613e9b614ea5565b60009182526020918290206040805160e08101909152600790920201805460ff16151582526001810180549293919291840191613ed790614e38565b80601f0160208091040260200160405190810160405280929190818152602001828054613f0390614e38565b8015613f505780601f10613f2557610100808354040283529160200191613f50565b820191906000526020600020905b815481529060010190602001808311613f3357829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a0909101528351849084908110613fa957613fa9614ea5565b602002602001018190525081613fbe90614f00565b91505b613fca81614f00565b9050613e4a565b509095945050505050565b613ff781613fe8613b1d565b613ff29190614ebb565b614826565b614005828261131b85612d88565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000610d5e61246660017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa3614ed3565b6113f1612a4860017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113614ed3565b6113f1612a4860017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260614ed3565b6113f1612a4860017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42614ed3565b6113f1612a4860017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b80614ed3565b60008061416060017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a4135614ed3565b6001600160a01b0390931660009081526020939093525050604090205460ff1690565b606060006141b260017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed3565b9050806000805b82548110156142fa576142d98360000182815481106141da576141da614ea5565b60009182526020918290206040805160e08101909152600790920201805460ff1615158252600181018054929391929184019161421690614e38565b80601f016020809104026020016040519081016040528092919081815260200182805461424290614e38565b801561428f5780601f106142645761010080835404028352916020019161428f565b820191906000526020600020905b81548152906001019060200180831161427257829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a090910152614854565b156142ea576142e782614f00565b91505b6142f381614f00565b90506141b9565b5060008167ffffffffffffffff81111561431657614316614eea565b60405190808252806020026020018201604052801561439257816020015b61437f6040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816143345790505b5090506000805b8454811015613fd1576143ba8560000182815481106141da576141da614ea5565b156144fa578460000181815481106143d4576143d4614ea5565b60009182526020918290206040805160e08101909152600790920201805460ff1615158252600181018054929391929184019161441090614e38565b80601f016020809104026020016040519081016040528092919081815260200182805461443c90614e38565b80156144895780601f1061445e57610100808354040283529160200191614489565b820191906000526020600020905b81548152906001019060200180831161446c57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a09091015283518490849081106144e2576144e2614ea5565b6020026020010181905250816144f790614f00565b91505b61450381614f00565b9050614399565b6060808267ffffffffffffffff81111561452657614526614eea565b60405190808252806020026020018201604052801561455957816020015b60608152602001906001900390816145445790505b5091508267ffffffffffffffff81111561457557614575614eea565b6040519080825280602002602001820160405280156145a857816020015b60608152602001906001900390816145935790505b50905060006145d860017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614ed3565b905080855b6145e78688614ebb565b811015614708576000888152602083815260408083208484529091528120805461461090614e38565b80601f016020809104026020016040519081016040528092919081815260200182805461463c90614e38565b80156146895780601f1061465e57610100808354040283529160200191614689565b820191906000526020600020905b81548152906001019060200180831161466c57829003601f168201915b5050505050905061469d816000603061358a565b866146a88a85614ed3565b815181106146b8576146b8614ea5565b60200260200101819052506146d0816030606061358a565b856146db8a85614ed3565b815181106146eb576146eb614ea5565b6020026020010181905250508061470190614f00565b90506145dd565b505050935093915050565b6060815183516147239190614ebb565b67ffffffffffffffff81111561473b5761473b614eea565b60405190808252806020026020018201604052801561476e57816020015b60608152602001906001900390816147595790505b50905060005b83518110156147c55783818151811061478f5761478f614ea5565b60200260200101518282815181106147a9576147a9614ea5565b6020026020010181905250806147be90614f00565b9050614774565b5060005b8251811015610ac0578281815181106147e4576147e4614ea5565b6020026020010151828551836147fa9190614ebb565b8151811061480a5761480a614ea5565b60200260200101819052508061481f90614f00565b90506147c9565b6113f1612a4860017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b614ed3565b8051600090801561486c575081608001518260a00151115b80156117aa57505060808101516060909101511190565b82805461488f90614e38565b90600052602060002090601f0160209004810192826148b157600085556148f7565b82601f106148ca57805160ff19168380011785556148f7565b828001600101855582156148f7579182015b828111156148f75782518255916020019190600101906148dc565b50614903929150614907565b5090565b5b808211156149035760008155600101614908565b60006020828403121561492e57600080fd5b5035919050565b60005b83811015614950578181015183820152602001614938565b838111156111995750506000910152565b60008151808452614979816020860160208601614935565b601f01601f19169290920160200192915050565b602081528151151560208201526000602083015160e060408401526149b6610100840182614961565b90506001600160a01b03604085015116606084015260608401516080840152608084015160a084015260a084015160c084015260c084015160e08401528091505092915050565b6020815260006121826020830184614961565b80356001600160a01b0381168114614a2757600080fd5b919050565b60008060408385031215614a3f57600080fd5b614a4883614a10565b946020939093013593505050565b80358015158114614a2757600080fd5b60008060408385031215614a7957600080fd5b614a8283614a10565b9150614a9060208401614a56565b90509250929050565b600080600060408486031215614aae57600080fd5b83359250602084013567ffffffffffffffff80821115614acd57600080fd5b818601915086601f830112614ae157600080fd5b813581811115614af057600080fd5b8760208260051b8501011115614b0557600080fd5b6020830194508093505050509250925092565b600080600060608486031215614b2d57600080fd5b614b3684614a10565b9250614b4460208501614a10565b9150604084013590509250925092565b60008083601f840112614b6657600080fd5b50813567ffffffffffffffff811115614b7e57600080fd5b602083019150836020828501011115614b9657600080fd5b9250929050565b60008060208385031215614bb057600080fd5b823567ffffffffffffffff811115614bc757600080fd5b614bd385828601614b54565b90969095509350505050565b600080600060408486031215614bf457600080fd5b833567ffffffffffffffff811115614c0b57600080fd5b614c1786828701614b54565b9094509250614c2a905060208501614a10565b90509250925092565b60008060408385031215614c4657600080fd5b82359150614a9060208401614a56565b60008060408385031215614c6957600080fd5b50508035926020909101359150565b606081526000614c8b6060830186614961565b8281036020840152614c9d8186614961565b9150508215156040830152949350505050565b600060208284031215614cc257600080fd5b61218282614a10565b600080600060608486031215614ce057600080fd5b505081359360208301359350604090920135919050565b600080600080600080600060e0888a031215614d1257600080fd5b614d1b88614a10565b965060208801359550614d3060408901614a10565b9450614d3e60608901614a10565b9350614d4c60808901614a10565b925060a0880135915060c0880135905092959891949750929550565b60008060008060008060808789031215614d8157600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115614da757600080fd5b614db38a838b01614b54565b90965094506060890135915080821115614dcc57600080fd5b50614dd989828a01614b54565b979a9699509497509295939492505050565b60008060408385031215614dfe57600080fd5b614e0783614a10565b9150614a9060208401614a10565b60008060408385031215614e2857600080fd5b82359150614a9060208401614a10565b600181811c90821680614e4c57607f821691505b6020821081141561250457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082614ea057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60008219821115614ece57614ece614e6d565b500190565b600082821015614ee557614ee5614e6d565b500390565b634e487b7160e01b600052604160045260246000fd5b6000600019821415614f1457614f14614e6d565b5060010190565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b604081526000614f5d6040830185614961565b90506001600160a01b03831660208301529392505050565b6000816000190483118215151615614f8f57614f8f614e6d565b500290565b634e487b7160e01b600052600160045260246000fd5b60008251614fbc818460208701614935565b9190910192915050565b600060208284031215614fd857600080fd5b5051919050565b608081526000614ff26080830187614961565b82810360208401526150048187614961565b905082810360408401526150188186614961565b9150508260608301529594505050505056fea2646970667358221220c76dfc42b31c5406bfc123ee5814fed411ace0b129a8fcd425bd9ab052b3b10c64736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106102ca5760003560e01c806363b4118f11610179578063a9059cbb116100d6578063d56580ff1161008a578063f340fa0111610064578063f340fa011461081c578063f5eb42dc1461082f578063f87e52961461084f576102db565b8063d56580ff146107c5578063dd62ed3e146107e5578063ec342ad014610805576102db565b8063babcc539116100bb578063babcc53914610770578063bf15af5614610790578063cfa2d2b7146107a5576102db565b8063a9059cbb14610730578063b747e7dd14610750576102db565b8063833b1fce1161012d578063950c44ec11610112578063950c44ec146106b557806395d89b41146106d55780639e3947f31461071b576102db565b8063833b1fce1461068b57806387f2adfb146106a0576102db565b8063714b55b21161015e578063714b55b21461062b5780637adbf9731461064b57806380d4027e1461066b576102db565b806363b4118f146105dc57806370a082311461060b576102db565b8063252d6a34116102275780633eb8b77a116101db578063540bc5ea116101c0578063540bc5ea146105875780635a16f1351461059c5780635f41a0c4146105bc576102db565b80633eb8b77a1461052a57806350545d2f14610567576102db565b8063313ce5671161020c578063313ce567146104dc57806336bf3325146104f85780633a98ef3914610515576102db565b8063252d6a34146104a7578063291206f6146104bc576102db565b8063169674071161027e5780631864636c116102635780631864636c146104525780631a4a7c611461047257806323b872dd14610487576102db565b8063169674071461040257806318160ddd1461042f576102db565b8063095ea7b3116102af578063095ea7b314610392578063110496e5146103c257806313d86aed146103e2576102db565b806305f63c8a1461030d57806306fdde0314610343576102db565b366102db576102d9600061086f565b005b6040517fae962d4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561031957600080fd5b5061032d61032836600461491c565b6108f3565b60405161033a919061498d565b60405180910390f35b34801561034f57600080fd5b5060408051808201909152600581527f526976657200000000000000000000000000000000000000000000000000000060208201525b60405161033a91906149fd565b34801561039e57600080fd5b506103b26103ad366004614a2c565b610a37565b604051901515815260200161033a565b3480156103ce57600080fd5b506102d96103dd366004614a66565b610ac7565b3480156103ee57600080fd5b506102d96103fd36600461491c565b610b7c565b34801561040e57600080fd5b50610417610d54565b6040516001600160a01b03909116815260200161033a565b34801561043b57600080fd5b50610444610d63565b60405190815260200161033a565b34801561045e57600080fd5b506102d961046d366004614a99565b610d6d565b34801561047e57600080fd5b5061044461119f565b34801561049357600080fd5b506103b26104a2366004614b18565b6111a9565b3480156104b357600080fd5b5061044461137f565b3480156104c857600080fd5b506102d96104d736600461491c565b611389565b3480156104e857600080fd5b506040516012815260200161033a565b34801561050457600080fd5b506104446801bc16d674ec80000081565b34801561052157600080fd5b506104446113f4565b34801561053657600080fd5b5061054a610545366004614b9d565b6113fe565b604080519283526001600160a01b0390911660208301520161033a565b34801561057357600080fd5b506102d9610582366004614bdf565b61149a565b34801561059357600080fd5b50610444606081565b3480156105a857600080fd5b506102d96105b7366004614c33565b61165e565b3480156105c857600080fd5b506102d96105d7366004614c56565b6116f0565b3480156105e857600080fd5b506105fc6105f7366004614c56565b611772565b60405161033a93929190614c78565b34801561061757600080fd5b50610444610626366004614cb0565b61179f565b34801561063757600080fd5b506102d9610646366004614c56565b6117b0565b34801561065757600080fd5b506102d9610666366004614cb0565b611832565b34801561067757600080fd5b506102d9610686366004614ccb565b611876565b34801561069757600080fd5b506104176119c0565b3480156106ac57600080fd5b506104446119ca565b3480156106c157600080fd5b506102d96106d0366004614cf7565b6119d4565b3480156106e157600080fd5b5060408051808201909152600481527f72455448000000000000000000000000000000000000000000000000000000006020820152610385565b34801561072757600080fd5b50610444611a7c565b34801561073c57600080fd5b506103b261074b366004614a2c565b611a86565b34801561075c57600080fd5b506102d961076b366004614d68565b611ba8565b34801561077c57600080fd5b506103b261078b366004614cb0565b611f88565b34801561079c57600080fd5b50610444603081565b3480156107b157600080fd5b5061032d6107c0366004614b9d565b611f93565b3480156107d157600080fd5b506102d96107e036600461491c565b61210e565b3480156107f157600080fd5b50610444610800366004614deb565b612176565b34801561081157600080fd5b50610444620186a081565b6102d961082a366004614cb0565b612189565b34801561083b57600080fd5b5061044461084a366004614cb0565b612192565b34801561085b57600080fd5b506102d961086a366004614e15565b61219d565b346108a6576040517f95b66fe900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108b03334612304565b6040513481526001600160a01b0382169033907f3bc57f469ad6d10d7723ea226cd22bd2b9e527def2b529f6ab44645a166895829060200160405180910390a350565b61093e6040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b61094782612343565b6040805160e08101909152815460ff161515815260018201805491929160208401919061097390614e38565b80601f016020809104026020016040519081016040528092919081815260200182805461099f90614e38565b80156109ec5780601f106109c1576101008083540402835291602001916109ec565b820191906000526020600020905b8154815290600101906020018083116109cf57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a09091015292915050565b600033610a4381611f88565b610a705760405163472511eb60e11b81526001600160a01b03821660048201526024015b60405180910390fd5b610a7b3385856123df565b6040518381526001600160a01b0385169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259060200160405180910390a3600191505b5092915050565b610acf612436565b6001600160a01b0316336001600160a01b031614158015610b095750610af361246a565b6001600160a01b0316336001600160a01b031614155b15610b295760405163472511eb60e11b8152336004820152602401610a67565b610b33828261249a565b816001600160a01b03167f1b4f0c8c88fcaadd952eda5461f779c8707eb21acf10b63097c2388c6ab3849182604051610b70911515815260200190565b60405180910390a25050565b6000610b9a610b946801bc16d674ec80000047614e83565b836124f5565b905080610bd3576040517f81b5ad6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610bdf8361250a565b8151919350915080610c1d576040517f800526b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83811115610c57576040517f5993bd5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8151818114610c92576040517f8b97390c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610c9c61251f565b905080610cd5576040517f9be7315900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83811015610d2f57610d1d868281518110610cf557610cf5614ea5565b6020026020010151868381518110610d0f57610d0f614ea5565b60200260200101518461254f565b610d28600182614ebb565b9050610cd8565b50610d4b83610d3c6129ea565b610d469190614ebb565b612a1a565b50505050505050565b6000610d5e612a4d565b905090565b6000610d5e612a57565b82610d76612a4d565b6001600160a01b0316336001600160a01b03161415610f82576000610d9a85612343565b905082610dba576040516379b348ff60e11b815260040160405180910390fd5b60005b83811015610f3d576000858583818110610dd957610dd9614ea5565b9050602002013590508260040154811015610e075760405163213af80760e21b815260040160405180910390fd5b82600501548110610e2b576040516317df2d8d60e01b815260040160405180910390fd5b600082118015610e7557508585610e43600185614ed3565b818110610e5257610e52614ea5565b90506020020135868684818110610e6b57610e6b614ea5565b9050602002013510155b15610e935760405163c9ee26af60e01b815260040160405180910390fd5b600060018460050154610ea69190614ed3565b9050600080610eb58a84612ac3565b91509150610ec58a858484612c4b565b610f0c8a8460005b6040519080825280601f01601f191660200182016040528015610ef7576020820181803683370190505b50604080516000815260208101909152612c4b565b6001866005016000828254610f219190614ed3565b925050819055505050505080610f3690614f00565b9050610dbd565b50847f3162702bacdcc8640bbae8973e0bfe03af8a527f10b58caaf3695f0b268d7e908260050154604051610f7491815260200190565b60405180910390a250611199565b6000610f8d82612343565b805490915060ff16610fb5576040516301550a7360e41b815260048101839052602401610a67565b60028101546001600160a01b03163314610fe45760405163472511eb60e11b8152336004820152602401610a67565b6000610fef86612343565b90508361100f576040516379b348ff60e11b815260040160405180910390fd5b60005b8481101561115757600086868381811061102e5761102e614ea5565b905060200201359050826004015481101561105c5760405163213af80760e21b815260040160405180910390fd5b82600501548110611080576040516317df2d8d60e01b815260040160405180910390fd5b6000821180156110ca57508686611098600185614ed3565b8181106110a7576110a7614ea5565b905060200201358787848181106110c0576110c0614ea5565b9050602002013510155b156110e85760405163c9ee26af60e01b815260040160405180910390fd5b6000600184600501546110fb9190614ed3565b905060008061110a8b84612ac3565b9150915061111a8b858484612c4b565b6111268b846000610ecd565b600186600501600082825461113b9190614ed3565b92505081905550505050508061115090614f00565b9050611012565b50857f3162702bacdcc8640bbae8973e0bfe03af8a527f10b58caaf3695f0b268d7e90826005015460405161118e91815260200190565b60405180910390a250505b50505050565b6000610d5e612cb0565b6000836111b581611f88565b6111dd5760405163472511eb60e11b81526001600160a01b0382166004820152602401610a67565b836111e781611f88565b61120f5760405163472511eb60e11b81526001600160a01b0382166004820152602401610a67565b8361122d576040516336b216db60e21b815260040160405180910390fd5b6001600160a01b03861633146112ba5760006112498733612ce5565b9050848110156112a4576040517f7b936de30000000000000000000000000000000000000000000000000000000081526001600160a01b03881660048201523360248201526044810182905260648101869052608401610a67565b6112b887336112b38885614ed3565b6123df565b505b836112c487612d3d565b10156112e3576040516351940b3960e11b815260040160405180910390fd5b60006112ee85612d50565b905061130d87826112fe8a612d88565b6113089190614ed3565b612dd6565b611325868261131b89612d88565b6113089190614ebb565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8760405161136a91815260200190565b60405180910390a35060019695505050505050565b6000610d5e612e22565b611391612a4d565b6001600160a01b0316336001600160a01b0316146113c45760405163472511eb60e11b8152336004820152602401610a67565b620186a08111156113e85760405163a9cb9e0d60e01b815260040160405180910390fd5b6113f181612e52565b50565b6000610d5e612e80565b60008061144084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612e8a92505050565b915061148184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612f1a92505050565b6002015491946001600160a01b03909216935090915050565b6114a2612a4d565b6001600160a01b0316336001600160a01b0316146114d55760405163472511eb60e11b8152336004820152602401610a67565b61151483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612f8692505050565b1515600114156115545782826040517f832eebc5000000000000000000000000000000000000000000000000000000008152600401610a67929190614f1b565b60006040518060e0016040528060011515815260200185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b0385166020808401919091526040808401839052606084018390526080840183905260a09093018290528251601f88018290048202810182019093528683529293509161161391908790879081908401838280828437600092019190915250869250612f91915050565b9050807f28febbb5486eda5a1e47ad578f9cb32c8a1983c86c80ab823ea5dc1fc04ede5e8360200151846040015160405161164f929190614f4a565b60405180910390a25050505050565b611666612a4d565b6001600160a01b0316336001600160a01b0316146116995760405163472511eb60e11b8152336004820152602401610a67565b60006116a483612343565b805460ff1916831515908117825560405190815290915083907fe3bc5e5d3b000a1f65d146c40a38d89b1743b5729f4c6fe65f2e4b2dc620f2f2906020015b60405180910390a2505050565b6116f8612a4d565b6001600160a01b0316336001600160a01b03161461172b5760405163472511eb60e11b8152336004820152602401610a67565b600061173683612343565b6006810183905560405183815290915083907f773694db4f98cd263e42d4f798bcf603781d4491e48e8cbe96c219c1f13b777d906020016116e3565b60608060006117818585612ac3565b909350915061178f85612343565b6004015484111590509250925092565b60006117aa82612d3d565b92915050565b6117b8612a4d565b6001600160a01b0316336001600160a01b0316146117eb5760405163472511eb60e11b8152336004820152602401610a67565b60006117f683612343565b6003810183905560405183815290915083907f3adbeb5fbb94c52b64d90b31188c68a740868dde2238e03a04d581cae22cedf0906020016116e3565b61183a612a4d565b6001600160a01b0316336001600160a01b03161461186d5760405163472511eb60e11b8152336004820152602401610a67565b6113f18161318c565b61187e6131ba565b6001600160a01b0316336001600160a01b0316146118b15760405163472511eb60e11b8152336004820152602401610a67565b6118b96129ea565b83111561190457826118c96129ea565b6040517f76179ac500000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610a67565b600061190e612e22565b9050600061191a6131ea565b6119249086614ed3565b905061192f8461321a565b61193885613248565b61194183613276565b838210156119785761197861195f826801bc16d674ec800000614f75565b6119698487614ed3565b6119739190614ed3565b6132a4565b60408051868152602081018690529081018490527f98e488f5118fc11ab540716c2afc4e440c0a892d27a4efef33db94b4f9da65899060600160405180910390a15050505050565b6000610d5e6131ba565b6000610d5e6129ea565b60006119de6134ac565b8114611a2857806119ed6134ac565b6040517fe7e93b3800000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610a67565b611a3b611a36826001614ebb565b6134dc565b611a448661350a565b611a4d84613513565b611a5683612e52565b611a5f82613541565b611a69888861356f565b611a7285613581565b5050505050505050565b6000610d5e6131ea565b600033611a9281611f88565b611aba5760405163472511eb60e11b81526001600160a01b0382166004820152602401610a67565b83611ac481611f88565b611aec5760405163472511eb60e11b81526001600160a01b0382166004820152602401610a67565b83611b0a576040516336b216db60e21b815260040160405180910390fd5b83611b1433612d3d565b1015611b33576040516351940b3960e11b815260040160405180910390fd5b6000611b3e85612d50565b9050611b4e33826112fe33612d88565b611b5c868261131b89612d88565b6040518581526001600160a01b0387169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600195945050505050565b85611bb1612a4d565b6001600160a01b0316336001600160a01b03161415611d805785611be8576040516379b348ff60e11b815260040160405180910390fd5b611bf3603087614f75565b8414611c125760405163287c2be760e21b815260040160405180910390fd5b611c1d606087614f75565b8214611c3c57604051634be6321b60e01b815260040160405180910390fd5b6000611c4788612343565b905060005b87811015611d26576000611ca488888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c9d925060309150869050614f75565b603061358a565b90506000611cf687878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611cef925060609150879050614f75565b606061358a565b9050611d138b848660050154611d0c9190614ebb565b8484612c4b565b505080611d1f90614f00565b9050611c4c565b5086816005016000828254611d3b9190614ebb565b9091555050600581015460405190815288907f5974470818610308ee3a0d809bad2cd13d57a3e9a685d3ae337fdef1d2d1b6539060200160405180910390a250610d4b565b6000611d8b82612343565b805490915060ff16611db3576040516301550a7360e41b815260048101839052602401610a67565b60028101546001600160a01b03163314611de25760405163472511eb60e11b8152336004820152602401610a67565b86611e00576040516379b348ff60e11b815260040160405180910390fd5b611e0b603088614f75565b8514611e2a5760405163287c2be760e21b815260040160405180910390fd5b611e35606088614f75565b8314611e5457604051634be6321b60e01b815260040160405180910390fd5b6000611e5f89612343565b905060005b88811015611f29576000611eb589898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c9d925060309150869050614f75565b90506000611f0088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611cef925060609150879050614f75565b9050611f168c848660050154611d0c9190614ebb565b505080611f2290614f00565b9050611e64565b5087816005016000828254611f3e9190614ebb565b9091555050600581015460405190815289907f5974470818610308ee3a0d809bad2cd13d57a3e9a685d3ae337fdef1d2d1b6539060200160405180910390a2505050505050505050565b60006117aa826136b2565b611fde6040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b61201d83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612f1a92505050565b6040805160e08101909152815460ff161515815260018201805491929160208401919061204990614e38565b80601f016020809104026020016040519081016040528092919081815260200182805461207590614e38565b80156120c25780601f10612097576101008083540402835291602001916120c2565b820191906000526020600020905b8154815290600101906020018083116120a557829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a0909101529392505050565b612116612a4d565b6001600160a01b0316336001600160a01b0316146121495760405163472511eb60e11b8152336004820152602401610a67565b620186a081111561216d5760405163a9cb9e0d60e01b815260040160405180910390fd5b6113f181613541565b60006121828383612ce5565b9392505050565b6113f18161086f565b60006117aa82612d88565b816121a6612a4d565b6001600160a01b0316336001600160a01b031614156122355760006121ca84612343565b60028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915560405190815290915084907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e79060200160405180910390a250505050565b600061224082612343565b805490915060ff16612268576040516301550a7360e41b815260048101839052602401610a67565b60028101546001600160a01b031633146122975760405163472511eb60e11b8152336004820152602401610a67565b60006122a285612343565b60028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03871690811790915560405190815290915085907f08a670ef4110fe90a7d61086d1477cde043a940601bd853a50009ac5a5ba56e79060200161164f565b61230d826136b2565b6123355760405163472511eb60e11b81526001600160a01b0383166004820152602401610a67565b61233f82826136bd565b5050565b60008061237160017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed3565b8054909150819084106123b3576040517fd191a36c00000000000000000000000000000000000000000000000000000000815260048101859052602401610a67565b8060000184815481106123c8576123c8614ea5565b906000526020600020906007020192505050919050565b600061240c60017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847614ed3565b6001600160a01b039485166000908152602091825260408082209590961681529390525091902055565b6000610d5e61246660017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b80614ed3565b5490565b6000610d5e61246660017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113614ed3565b60006124c760017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a4135614ed3565b6001600160a01b03939093166000908152602093909352506040909120805460ff1916911515919091179055565b60008183116125045782612182565b50919050565b60608061251683613726565b91509150915091565b6000610d5e61246660017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42614ed3565b603083511461258a576040517f50cb553000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608251146125c5576040517f408ebd3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6801bc16d674ec80000060006125df633b9aca0083614e83565b9050816125f082633b9aca00614f75565b146125fd576125fd614f94565b6000600261260a8761397d565b6040516126179190614faa565b602060405180830381855afa158015612634573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906126579190614fc6565b9050600060028061266b886000604061358a565b6040516126789190614faa565b602060405180830381855afa158015612695573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906126b89190614fc6565b60026126d86126d38a60406126ce816060614ed3565b61358a565b61397d565b6040516126e59190614faa565b602060405180830381855afa158015612702573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906127259190614fc6565b60408051602081019390935282015260600160408051601f198184030181529082905261275191614faa565b602060405180830381855afa15801561276e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906127919190614fc6565b9050600060028084886040516020016127b4929190918252602082015260400190565b60408051601f19818403018152908290526127ce91614faa565b602060405180830381855afa1580156127eb573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061280e9190614fc6565b600261281987613a06565b604080516020810192909252810186905260600160408051601f198184030181529082905261284791614faa565b602060405180830381855afa158015612864573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906128879190614fc6565b60408051602081019390935282015260600160408051601f19818403018152908290526128b391614faa565b602060405180830381855afa1580156128d0573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906128f39190614fc6565b905060006129018647614ed3565b905061290b613a4c565b6001600160a01b03166322895118878b8a60405160200161292e91815260200190565b6040516020818303038152906040528c876040518663ffffffff1660e01b815260040161295e9493929190614fdf565b6000604051808303818588803b15801561297757600080fd5b505af115801561298b573d6000803e3d6000fd5b50505050508047146129df5760405162461bcd60e51b815260206004820152601b60248201527f455850454354494e475f4445504f5349545f544f5f48415050454e00000000006044820152606401610a67565b505050505050505050565b6000610d5e61246660017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8614ed3565b6113f1612a4860017fc77078e3530c08cdb2440817c81de4836500b4708ea4d15672b7fe98956423a8614ed3565b829055565b6000610d5e61246a565b600080612a626131ea565b90506000612a6e6129ea565b905080821015612aba576801bc16d674ec800000612a8c8383614ed3565b612a969190614f75565b47612a9f612e22565b612aa99190614ebb565b612ab39190614ebb565b9250505090565b47612aa9612e22565b6060806000612af360017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614ed3565b600086815260208281526040808320888452909152902080549192508291612ba7908290612b2090614e38565b80601f0160208091040260200160405190810160405280929190818152602001828054612b4c90614e38565b8015612b995780601f10612b6e57610100808354040283529160200191612b99565b820191906000526020600020905b815481529060010190602001808311612b7c57829003601f168201915b50505050506000603061358a565b9450612c3f818054612bb890614e38565b80601f0160208091040260200160405190810160405280929190818152602001828054612be490614e38565b8015612c315780601f10612c0657610100808354040283529160200191612c31565b820191906000526020600020905b815481529060010190602001808311612c1457829003601f168201915b50505050506030606061358a565b93505050509250929050565b6000612c578383613a7c565b90506000612c8660017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614ed3565b600087815260208281526040808320898452825290912084519293508392611a7292860190614883565b600080612cde60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed3565b5492915050565b600080612d1360017fc852254d5b703a16bb13b3e233a335d6459c5da5db0ca732d7a684ee05407847614ed3565b6001600160a01b039485166000908152602091825260408082209590961681529390525050205490565b60006117aa612d4b83612d88565b613af9565b600080612d5b612a57565b905080612d6b5750600092915050565b80612d74613b1d565b612d7e9085614f75565b6121829190614e83565b600080612db660017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838614ed3565b6001600160a01b0390931660009081526020939093525050604090205490565b6000612e0360017f0fb4a5ac9287f4f508aa7253ee2d57c6a228b1b30e210d73fffd59389d3a8838614ed3565b6001600160a01b03909316600090815260209390935250604090912055565b6000610d5e61246660017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e60900614ed3565b6113f1612a4860017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37614ed3565b6000610d5e613b1d565b600080612eb860017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614ed3565b60405190915081908190612ecd908690614faa565b9081526040519081900360200190205460ff16612eef57506000199392505050565b6040518190612eff908690614faa565b90815260200160405180910390206001015492505050919050565b600080612f4860017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed3565b90506000612f5584613b4d565b82549091508290819083908110612f6e57612f6e614ea5565b90600052602060002090600702019350505050919050565b60006117aa82613bdb565b600080612f9d84613bdb565b90506000612fcc60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed3565b905080826130a85780546001808201835560008381526020908190208851600790940201805460ff191693151593909317835587810151805189949361301793908501920190614883565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c0909101516006909101558451815461309091889161308b90600190614ed3565b613c39565b805461309e90600190614ed3565b93505050506117aa565b60006130b387613b4d565b9050858260000182815481106130cb576130cb614ea5565b6000918252602091829020835160079290920201805460ff1916911515919091178155828201518051919261310892600185019290910190614883565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c09091015160069091015585511515841515146131815761318187876000015183613c39565b93506117aa92505050565b6113f1612a4860017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb614ed3565b6000610d5e61246660017fc8cbea9407c380ae944f052b5a442330057683c5abdbd453493f9750806afecb614ed3565b6000610d5e61246660017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a37614ed3565b6113f1612a4860017f42b27da24a254372d1e7ea692a34d85d9237abb39a65153affece1e2f1e60900614ed3565b6113f1612a4860017f6929b6137e885d965ed089510659a629a29a4a54f85c28286fa5e0d7dcf27a37614ed3565b6113f1612a4860017fd7f2d45e512a86049f7a113657b39731b6b558609584243063a52cd31a8eb529614ed3565b60006132ae613cbd565b905060006132bc8284614f75565b620186a06132c8612a57565b6132d29190614f75565b6132dc9190614ed3565b826132e5612e80565b6132ef9086614f75565b6132f99190614f75565b6133039190614e83565b90506000620186a0613313613ced565b61331d9084614f75565b6133279190614e83565b90506000613333613d1d565b90506000815167ffffffffffffffff81111561335157613351614eea565b60405190808252806020026020018201604052801561337a578160200160208202803683370190505b5090506000805b835181101561340f57600084828151811061339e5761339e614ea5565b602002602001015160c001518583815181106133bc576133bc614ea5565b6020026020010151608001516133d29190614ed3565b90506133de8184614ebb565b9250808483815181106133f3576133f3614ea5565b60209081029190910101525061340881614f00565b9050613381565b5080156134925760006134228286614e83565b905060005b835181101561348b5761347b85828151811061344557613445614ea5565b6020026020010151604001518386848151811061346457613464614ea5565b60200260200101516134769190614f75565b613fdc565b61348481614f00565b9050613427565b5050613497565b600093505b610d4b6134a261404a565b6134768688614ed3565b6000610d5e61246660017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd614ed3565b6113f1612a4860017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd614ed3565b6113f18161407a565b6113f1612a4860017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa3614ed3565b6113f1612a4860017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a8614ed3565b613578826140a8565b61233f816140d6565b6113f181614104565b60608161359881601f614ebb565b10156135e65760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610a67565b6135f08284614ebb565b845110156136405760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610a67565b60608215801561365f57604051915060008252602082016040526136a9565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015613698578051835260209283019201613680565b5050858452601f01601f1916604052505b50949350505050565b60006117aa82614132565b60006136c7612a57565b90506000826136d4612a57565b6136de9190614ed3565b9050806136f4576136ef8483613fdc565b611199565b6000816136ff612e80565b6137099086614f75565b6137139190614e83565b905061371f8582613fdc565b5050505050565b6060806000613733614183565b90508051600014156137a157604080516000808252602082019092529061376a565b60608152602001906001900390816137555790505b506040805160008082526020820190925290613796565b60608152602001906001900390816137815790505b509250925050915091565b600060015b8251811015613805578282815181106137c1576137c1614ea5565b6020026020010151608001518382815181106137df576137df614ea5565b60200260200101516080015110156137f5578091505b6137fe81614f00565b90506137a6565b50600082828151811061381a5761381a614ea5565b60200260200101516080015161386a84848151811061383b5761383b614ea5565b602002602001015160a0015185858151811061385957613859614ea5565b6020026020010151606001516124f5565b6138749190614ed3565b9050600061389e84848151811061388d5761388d614ea5565b602002602001015160200151612f1a565b90508682106138f6576138cf838585815181106138bd576138bd614ea5565b6020026020010151608001518961450a565b8096508197505050868160040160008282546138eb9190614ebb565b909155506139749050565b61391e8385858151811061390c5761390c614ea5565b6020026020010151608001518461450a565b80965081975050508181600401600082825461393a9190614ebb565b909155506000905080613955613950858b614ed3565b613726565b915091506139638883614713565b975061396f8782614713565b965050505b50505050915091565b6060602082511015801561399357506040825111155b61399f5761399f614f94565b8151604014156139ad575090565b604080516020808252818301909252600091602082018180368337019050509050600060208201528251602014156139e9576121828382613a7c565b61218283613a01836000875160406126ce9190614ed3565b613a7c565b600081815b6008811015613a3457600892831b60ff831617929190911c90613a2d81614f00565b9050613a0b565b508015613a4357613a43614f94565b5060c01b919050565b6000610d5e61246660017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260614ed3565b6060806040519050835180825260208201818101602087015b81831015613aad578051835260209283019201613a95565b50855184518101855292509050808201602086015b81831015613ada578051835260209283019201613ac2565b508651929092011591909101601f01601f191660405250905092915050565b600080613b04613b1d565b905080613b145750600092915050565b80612d74612a57565b6000610d5e61246660017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b614ed3565b600080613b7b60017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614ed3565b60405190915081908190613b90908690614faa565b9081526040519081900360200190205460ff16612eef57836040517f34eddfcf000000000000000000000000000000000000000000000000000000008152600401610a6791906149fd565b600080613c0960017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614ed3565b60405190915081908190613c1e908690614faa565b9081526040519081900360200190205460ff16949350505050565b6000613c6660017fb005a38730de558570646e2e51c331893c451361d6a7ba50d9c54b48e05ddd27614ed3565b604080518082018252851515815260208101859052905191925082918290613c8f908890614faa565b908152604051602091819003820190208251815460ff19169015151781559101516001909101555050505050565b6000610d5e61246660017f094efef62d2ce60c14ffacd35a1b50546d3a9d503aff1df040176fffd6c92a37614ed3565b6000610d5e61246660017f8b296ea79529153bb5bae302cb8c44db7ed739099e80c9f19feb68f6a43578a8614ed3565b60606000613d4c60017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed3565b9050806000805b8254811015613dab57826000018181548110613d7157613d71614ea5565b600091825260209091206007909102015460ff16151560011415613d9b57613d9882614f00565b91505b613da481614f00565b9050613d53565b5060008167ffffffffffffffff811115613dc757613dc7614eea565b604051908082528060200260200182016040528015613e4357816020015b613e306040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b815260200190600190039081613de55790505b5090506000805b8454811015613fd157846000018181548110613e6857613e68614ea5565b600091825260209091206007909102015460ff16151560011415613fc157846000018181548110613e9b57613e9b614ea5565b60009182526020918290206040805160e08101909152600790920201805460ff16151582526001810180549293919291840191613ed790614e38565b80601f0160208091040260200160405190810160405280929190818152602001828054613f0390614e38565b8015613f505780601f10613f2557610100808354040283529160200191613f50565b820191906000526020600020905b815481529060010190602001808311613f3357829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a0909101528351849084908110613fa957613fa9614ea5565b602002602001018190525081613fbe90614f00565b91505b613fca81614f00565b9050613e4a565b509095945050505050565b613ff781613fe8613b1d565b613ff29190614ebb565b614826565b614005828261131b85612d88565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000610d5e61246660017faa490d1834c76465b09f09618af9f91fbbd04c30f1f453b24b1e8f907c9e1fa3614ed3565b6113f1612a4860017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113614ed3565b6113f1612a4860017f35efb61d8784060218d9d6aa40eae55904de43779c1afc79c74dfefcfdf91260614ed3565b6113f1612a4860017fb649e50315f962b32d487e696a81b4828631b11f8424daaaa37e9e97766a2c42614ed3565b6113f1612a4860017f3d8762f71ac4675044de4231ebed7df0f8a8819893c6b6278d0461fc4a979b80614ed3565b60008061416060017ff13551d5cf1b23afc8669eb5ef15070e351923179334eb1a5aa569477f4a4135614ed3565b6001600160a01b0390931660009081526020939093525050604090205460ff1690565b606060006141b260017f794c962401f2e1bb68ba8627fb26fd4eea0439023c691c35b68bb144bfe10113614ed3565b9050806000805b82548110156142fa576142d98360000182815481106141da576141da614ea5565b60009182526020918290206040805160e08101909152600790920201805460ff1615158252600181018054929391929184019161421690614e38565b80601f016020809104026020016040519081016040528092919081815260200182805461424290614e38565b801561428f5780601f106142645761010080835404028352916020019161428f565b820191906000526020600020905b81548152906001019060200180831161427257829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a090910152614854565b156142ea576142e782614f00565b91505b6142f381614f00565b90506141b9565b5060008167ffffffffffffffff81111561431657614316614eea565b60405190808252806020026020018201604052801561439257816020015b61437f6040518060e001604052806000151581526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816143345790505b5090506000805b8454811015613fd1576143ba8560000182815481106141da576141da614ea5565b156144fa578460000181815481106143d4576143d4614ea5565b60009182526020918290206040805160e08101909152600790920201805460ff1615158252600181018054929391929184019161441090614e38565b80601f016020809104026020016040519081016040528092919081815260200182805461443c90614e38565b80156144895780601f1061445e57610100808354040283529160200191614489565b820191906000526020600020905b81548152906001019060200180831161446c57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460608201526005820154608082015260069091015460a09091015283518490849081106144e2576144e2614ea5565b6020026020010181905250816144f790614f00565b91505b61450381614f00565b9050614399565b6060808267ffffffffffffffff81111561452657614526614eea565b60405190808252806020026020018201604052801561455957816020015b60608152602001906001900390816145445790505b5091508267ffffffffffffffff81111561457557614575614eea565b6040519080825280602002602001820160405280156145a857816020015b60608152602001906001900390816145935790505b50905060006145d860017f6018b2d18c7378174a403e179ce41a2df430338a150b2bcec4b7a08291285574614ed3565b905080855b6145e78688614ebb565b811015614708576000888152602083815260408083208484529091528120805461461090614e38565b80601f016020809104026020016040519081016040528092919081815260200182805461463c90614e38565b80156146895780601f1061465e57610100808354040283529160200191614689565b820191906000526020600020905b81548152906001019060200180831161466c57829003601f168201915b5050505050905061469d816000603061358a565b866146a88a85614ed3565b815181106146b8576146b8614ea5565b60200260200101819052506146d0816030606061358a565b856146db8a85614ed3565b815181106146eb576146eb614ea5565b6020026020010181905250508061470190614f00565b90506145dd565b505050935093915050565b6060815183516147239190614ebb565b67ffffffffffffffff81111561473b5761473b614eea565b60405190808252806020026020018201604052801561476e57816020015b60608152602001906001900390816147595790505b50905060005b83518110156147c55783818151811061478f5761478f614ea5565b60200260200101518282815181106147a9576147a9614ea5565b6020026020010181905250806147be90614f00565b9050614774565b5060005b8251811015610ac0578281815181106147e4576147e4614ea5565b6020026020010151828551836147fa9190614ebb565b8151811061480a5761480a614ea5565b60200260200101819052508061481f90614f00565b90506147c9565b6113f1612a4860017f6b842b424335d94ccad97e54548dfa02673c1268aba38d3c3c32d28c8988b70b614ed3565b8051600090801561486c575081608001518260a00151115b80156117aa57505060808101516060909101511190565b82805461488f90614e38565b90600052602060002090601f0160209004810192826148b157600085556148f7565b82601f106148ca57805160ff19168380011785556148f7565b828001600101855582156148f7579182015b828111156148f75782518255916020019190600101906148dc565b50614903929150614907565b5090565b5b808211156149035760008155600101614908565b60006020828403121561492e57600080fd5b5035919050565b60005b83811015614950578181015183820152602001614938565b838111156111995750506000910152565b60008151808452614979816020860160208601614935565b601f01601f19169290920160200192915050565b602081528151151560208201526000602083015160e060408401526149b6610100840182614961565b90506001600160a01b03604085015116606084015260608401516080840152608084015160a084015260a084015160c084015260c084015160e08401528091505092915050565b6020815260006121826020830184614961565b80356001600160a01b0381168114614a2757600080fd5b919050565b60008060408385031215614a3f57600080fd5b614a4883614a10565b946020939093013593505050565b80358015158114614a2757600080fd5b60008060408385031215614a7957600080fd5b614a8283614a10565b9150614a9060208401614a56565b90509250929050565b600080600060408486031215614aae57600080fd5b83359250602084013567ffffffffffffffff80821115614acd57600080fd5b818601915086601f830112614ae157600080fd5b813581811115614af057600080fd5b8760208260051b8501011115614b0557600080fd5b6020830194508093505050509250925092565b600080600060608486031215614b2d57600080fd5b614b3684614a10565b9250614b4460208501614a10565b9150604084013590509250925092565b60008083601f840112614b6657600080fd5b50813567ffffffffffffffff811115614b7e57600080fd5b602083019150836020828501011115614b9657600080fd5b9250929050565b60008060208385031215614bb057600080fd5b823567ffffffffffffffff811115614bc757600080fd5b614bd385828601614b54565b90969095509350505050565b600080600060408486031215614bf457600080fd5b833567ffffffffffffffff811115614c0b57600080fd5b614c1786828701614b54565b9094509250614c2a905060208501614a10565b90509250925092565b60008060408385031215614c4657600080fd5b82359150614a9060208401614a56565b60008060408385031215614c6957600080fd5b50508035926020909101359150565b606081526000614c8b6060830186614961565b8281036020840152614c9d8186614961565b9150508215156040830152949350505050565b600060208284031215614cc257600080fd5b61218282614a10565b600080600060608486031215614ce057600080fd5b505081359360208301359350604090920135919050565b600080600080600080600060e0888a031215614d1257600080fd5b614d1b88614a10565b965060208801359550614d3060408901614a10565b9450614d3e60608901614a10565b9350614d4c60808901614a10565b925060a0880135915060c0880135905092959891949750929550565b60008060008060008060808789031215614d8157600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115614da757600080fd5b614db38a838b01614b54565b90965094506060890135915080821115614dcc57600080fd5b50614dd989828a01614b54565b979a9699509497509295939492505050565b60008060408385031215614dfe57600080fd5b614e0783614a10565b9150614a9060208401614a10565b60008060408385031215614e2857600080fd5b82359150614a9060208401614a10565b600181811c90821680614e4c57607f821691505b6020821081141561250457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082614ea057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60008219821115614ece57614ece614e6d565b500190565b600082821015614ee557614ee5614e6d565b500390565b634e487b7160e01b600052604160045260246000fd5b6000600019821415614f1457614f14614e6d565b5060010190565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b604081526000614f5d6040830185614961565b90506001600160a01b03831660208301529392505050565b6000816000190483118215151615614f8f57614f8f614e6d565b500290565b634e487b7160e01b600052600160045260246000fd5b60008251614fbc818460208701614935565b9190910192915050565b600060208284031215614fd857600080fd5b5051919050565b608081526000614ff26080830187614961565b82810360208401526150048187614961565b905082810360408401526150188186614961565b9150508260608301529594505050505056fea2646970667358221220c76dfc42b31c5406bfc123ee5814fed411ace0b129a8fcd425bd9ab052b3b10c64736f6c634300080a0033",
  "devdoc": {
    "author": "SkillZ",
    "kind": "dev",
    "methods": {
      "addOperator(string,address)": {
        "details": "Only callable by the administrator",
        "params": {
          "_name": "The name identifying the operator",
          "_operator": "The address representing the operator, receiving the rewards"
        }
      },
      "addValidators(uint256,uint256,bytes,bytes)": {
        "details": "Only callable by the administrator or the operator address",
        "params": {
          "_index": "The operator index",
          "_keyCount": "The amount of keys provided",
          "_publicKeys": "Public keys of the validator, concatenated",
          "_signatures": "Signatures of the validator keys, concatenated"
        }
      },
      "allow(address,bool)": {
        "params": {
          "_account": "Account status to edit",
          "_status": "Allowlist status"
        }
      },
      "deposit(address)": {
        "params": {
          "_referral": "Referral address, address(0) if none"
        }
      },
      "depositToConsensusLayer(uint256)": {
        "params": {
          "_maxCount": "The maximum amount of validator keys to fund"
        }
      },
      "getOperator(uint256)": {
        "params": {
          "_index": "The index of the operator"
        }
      },
      "getOperatorByName(string)": {
        "params": {
          "_name": "The name identifying the operator"
        }
      },
      "getValidator(uint256,uint256)": {
        "params": {
          "_operatorIndex": "The index of the operator",
          "_validatorIndex": "The index of the validator"
        }
      },
      "initRiverV1(address,bytes32,address,address,address,uint256,uint256)": {
        "params": {
          "_allowerAddress": "Address able to manage the allowlist",
          "_depositContractAddress": "Address to make Consensus Layer deposits",
          "_globalFee": "Amount retained when the eth balance increases, splitted between the treasury and the operators",
          "_operatorRewardsShare": "Share of the global fee used to reward node operators",
          "_systemAdministratorAddress": "Administrator address",
          "_treasuryAddress": "Address receiving the fee minus the operator share",
          "_withdrawalCredentials": "Credentials to use for every validator deposit"
        }
      },
      "removeValidators(uint256,uint256[])": {
        "details": "Only callable by the administrator or the operator addressThe indexes must be provided sorted in decreasing order, otherwise the method will revert",
        "params": {
          "_index": "The operator index",
          "_indexes": "The indexes of the keys to remove"
        }
      },
      "setBeaconData(uint256,uint256,bytes32)": {
        "details": "Can only be called by the oracle address",
        "params": {
          "_roundId": "An identifier for this update",
          "_validatorBalanceSum": "The validator balance sum of the active validators on the consensus layer",
          "_validatorCount": "The number of active validators on the consensus layer"
        }
      },
      "setGlobalFee(uint256)": {
        "params": {
          "newFee": "New fee value"
        }
      },
      "setOperatorAddress(uint256,address)": {
        "details": "Only callable by the administrator or the previous operator address",
        "params": {
          "_index": "The operator index",
          "_newOperatorAddress": "The new address representing the operator"
        }
      },
      "setOperatorLimit(uint256,uint256)": {
        "details": "Only callable by the administrator",
        "params": {
          "_index": "The operator index",
          "_newLimit": "The new staking limit of the operator"
        }
      },
      "setOperatorRewardsShare(uint256)": {
        "params": {
          "newOperatorRewardsShare": "New share value"
        }
      },
      "setOperatorStatus(uint256,bool)": {
        "details": "Only callable by the administrator",
        "params": {
          "_index": "The operator index",
          "_newStatus": "The new status of the operator"
        }
      },
      "setOperatorStoppedValidatorCount(uint256,uint256)": {
        "details": "Only callable by the administrator",
        "params": {
          "_index": "The operator index",
          "_newStoppedValidatorCount": "The new stopped validator count of the operator"
        }
      },
      "setOracle(address)": {
        "params": {
          "_oracleAddress": "Address of the oracle"
        }
      }
    },
    "title": "River (v1)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addOperator(string,address)": {
        "notice": "Adds an operator to the registry"
      },
      "addValidators(uint256,uint256,bytes,bytes)": {
        "notice": "Adds new keys for an operator"
      },
      "allow(address,bool)": {
        "notice": "Sets the allowlisting status for an account"
      },
      "deposit(address)": {
        "notice": "Explicit deposit method"
      },
      "depositToConsensusLayer(uint256)": {
        "notice": "Deposits current balance to the Consensus Layer by batches of 32 ETH"
      },
      "getAdministrator()": {
        "notice": "Retrieve system administrator address"
      },
      "getBeaconValidatorBalanceSum()": {
        "notice": "Get Beacon validator balance sum"
      },
      "getBeaconValidatorCount()": {
        "notice": "Get Beacon validator count (the amount of validator reported by the oracles)"
      },
      "getDepositedValidatorCount()": {
        "notice": "Get the deposited validator count (the count of deposits made by the contract)"
      },
      "getOperator(uint256)": {
        "notice": "Get operator details"
      },
      "getOperatorByName(string)": {
        "notice": "Get operator details by name"
      },
      "getOperatorCount()": {
        "notice": "Get operator count"
      },
      "getOracle()": {
        "notice": "Get Oracle address"
      },
      "getValidator(uint256,uint256)": {
        "notice": "Get the details of a validator"
      },
      "initRiverV1(address,bytes32,address,address,address,uint256,uint256)": {
        "notice": "Initializes the River system"
      },
      "removeValidators(uint256,uint256[])": {
        "notice": "Remove validator keys"
      },
      "setBeaconData(uint256,uint256,bytes32)": {
        "notice": "Sets the validator count and validator balance sum reported by the oracle"
      },
      "setGlobalFee(uint256)": {
        "notice": "Changes the global fee parameter"
      },
      "setOperatorAddress(uint256,address)": {
        "notice": "Changes the operator address of an operator"
      },
      "setOperatorLimit(uint256,uint256)": {
        "notice": "Changes the operator staking limit"
      },
      "setOperatorRewardsShare(uint256)": {
        "notice": "Changes the operator rewards share."
      },
      "setOperatorStatus(uint256,bool)": {
        "notice": "Changes the operator status"
      },
      "setOperatorStoppedValidatorCount(uint256,uint256)": {
        "notice": "Changes the operator stopped validator cound"
      },
      "setOracle(address)": {
        "notice": "Set Oracle address"
      }
    },
    "notice": "This contract merges all the manager contracts and implements all the virtual methods stitching all components together",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}