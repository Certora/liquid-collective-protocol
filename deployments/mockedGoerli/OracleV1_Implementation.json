{
  "address": "0xC43A03195c48CB46C2713359706F748bf5b4997e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        }
      ],
      "name": "AlreadyReported",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_prevTotalEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_postTotalEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relativeLowerBound",
          "type": "uint256"
        }
      ],
      "name": "BeaconBalanceDecreaseOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_prevTotalEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_postTotalEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_annualAprUpperBound",
          "type": "uint256"
        }
      ],
      "name": "BeaconBalanceIncreaseOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_providedEpochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minExpectedEpochId",
          "type": "uint256"
        }
      ],
      "name": "EpochTooOld",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgument",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedVersion",
          "type": "uint256"
        }
      ],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_providedEpochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expectedFrameFirstEpochId",
          "type": "uint256"
        }
      ],
      "name": "NotFrameFirstEpochId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_newBeaconBalance",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_newBeaconValidatorCount",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oracleMember",
          "type": "address"
        }
      ],
      "name": "BeaconReported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        }
      ],
      "name": "ExpectedEpochIdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_postTotalEth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_prevTotalEth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timeElapsed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalShares",
          "type": "uint256"
        }
      ],
      "name": "PostTotalShares",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newQuorum",
          "type": "uint256"
        }
      ],
      "name": "QuorumChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOracleMember",
          "type": "address"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdministrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconBounds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "annualAprUpperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "relativeLowerBound",
              "type": "uint256"
            }
          ],
          "internalType": "struct BeaconReportBounds.BeaconReportBoundsStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeaconSpec",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "epochsPerFrame",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "slotsPerEpoch",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "secondsPerSlot",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "genesisTime",
              "type": "uint64"
            }
          ],
          "internalType": "struct BeaconSpec.BeaconSpecStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentFrame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_startEpochId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExpectedEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        }
      ],
      "name": "getFrameFirstEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGlobalReportStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastCompletedEpochId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleMember",
          "type": "address"
        }
      ],
      "name": "getMemberReportStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracleMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getQuorum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getReportVariant",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "_beaconBalance",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_beaconValidators",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_reportCount",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReportVariantsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_riverContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_administratorAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_epochsPerFrame",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_slotsPerEpoch",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_secondsPerSlot",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_genesisTime",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_annualAprUpperBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relativeLowerBound",
          "type": "uint256"
        }
      ],
      "name": "initOracleV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleMember",
          "type": "address"
        }
      ],
      "name": "removeMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_beaconBalance",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_beaconValidators",
          "type": "uint32"
        }
      ],
      "name": "reportBeacon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_annualAprUpperBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relativeLowerBound",
          "type": "uint256"
        }
      ],
      "name": "setBeaconBounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_epochsPerFrame",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_slotsPerEpoch",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_secondsPerSlot",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_genesisTime",
          "type": "uint64"
        }
      ],
      "name": "setBeaconSpec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newQuorum",
          "type": "uint256"
        }
      ],
      "name": "setQuorum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x971da0de78c856d12a86d00eace00313d31f6bff4cc1cd642d2d1bbf2db6c842",
  "receipt": {
    "to": null,
    "from": "0x92D7d6DADe15fcF369534cEb8CD1A27f97185ab3",
    "contractAddress": "0xC43A03195c48CB46C2713359706F748bf5b4997e",
    "transactionIndex": 4,
    "gasUsed": "1844107",
    "logsBloom": "0x
    "blockHash": "0x4518f9126725066b5fda55685e15b2e7f943e73fb24ee5684cb4e8d27058d01c",
    "transactionHash": "0x971da0de78c856d12a86d00eace00313d31f6bff4cc1cd642d2d1bbf2db6c842",
    "logs": [],
    "blockNumber": 7180619,
    "cumulativeGasUsed": "2312049",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dffe9829564a0f6301b4e81b73aebcc5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"AlreadyReported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prevTotalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_postTotalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relativeLowerBound\",\"type\":\"uint256\"}],\"name\":\"BeaconBalanceDecreaseOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prevTotalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_postTotalEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_annualAprUpperBound\",\"type\":\"uint256\"}],\"name\":\"BeaconBalanceIncreaseOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providedEpochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minExpectedEpochId\",\"type\":\"uint256\"}],\"name\":\"EpochTooOld\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVersion\",\"type\":\"uint256\"}],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providedEpochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedFrameFirstEpochId\",\"type\":\"uint256\"}],\"name\":\"NotFrameFirstEpochId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_newBeaconBalance\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newBeaconValidatorCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oracleMember\",\"type\":\"address\"}],\"name\":\"BeaconReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"ExpectedEpochIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_postTotalEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prevTotalEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeElapsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalShares\",\"type\":\"uint256\"}],\"name\":\"PostTotalShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newQuorum\",\"type\":\"uint256\"}],\"name\":\"QuorumChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracleMember\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdministrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconBounds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"annualAprUpperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relativeLowerBound\",\"type\":\"uint256\"}],\"internalType\":\"struct BeaconReportBounds.BeaconReportBoundsStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeaconSpec\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"epochsPerFrame\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slotsPerEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"secondsPerSlot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"genesisTime\",\"type\":\"uint64\"}],\"internalType\":\"struct BeaconSpec.BeaconSpecStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentFrame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_startEpochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"}],\"name\":\"getFrameFirstEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalReportStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastCompletedEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleMember\",\"type\":\"address\"}],\"name\":\"getMemberReportStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getReportVariant\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"_beaconBalance\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_beaconValidators\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_reportCount\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReportVariantsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_riverContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_administratorAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_epochsPerFrame\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_slotsPerEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_secondsPerSlot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_genesisTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_annualAprUpperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relativeLowerBound\",\"type\":\"uint256\"}],\"name\":\"initOracleV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleMember\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_beaconBalance\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_beaconValidators\",\"type\":\"uint32\"}],\"name\":\"reportBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_annualAprUpperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relativeLowerBound\",\"type\":\"uint256\"}],\"name\":\"setBeaconBounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_epochsPerFrame\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_slotsPerEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_secondsPerSlot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_genesisTime\",\"type\":\"uint64\"}],\"name\":\"setBeaconSpec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newQuorum\",\"type\":\"uint256\"}],\"name\":\"setQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kiln\",\"kind\":\"dev\",\"methods\":{\"addMember(address)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_newOracleMember\":\"Address of the new member\"}},\"getFrameFirstEpochId(uint256)\":{\"params\":{\"_epochId\":\"Epoch id used to get the frame\"}},\"getMemberReportStatus(address)\":{\"params\":{\"_oracleMember\":\"Address of member to check\"}},\"getReportVariant(uint256)\":{\"params\":{\"_idx\":\"Index of report\"}},\"initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)\":{\"params\":{\"_administratorAddress\":\"Address able to call administrative methods\",\"_annualAprUpperBound\":\"Beacon bound parameter. Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\",\"_epochsPerFrame\":\"Beacon spec parameter. Number of epochs in a frame.\",\"_genesisTime\":\"Beacon spec parameter. Timestamp of the genesis slot.\",\"_relativeLowerBound\":\"Beacon bound parameter. Maximum relative balance decrease.\",\"_riverContractAddress\":\"Address of the River contract, able to receive oracle input data after quorum is met\",\"_secondsPerSlot\":\"Beacon spec parameter. Number of seconds between slots.\",\"_slotsPerEpoch\":\"Beacon spec parameter. Number of slots in one epoch.\"}},\"isMember(address)\":{\"details\":\"Performs a naive search, do not call this on-chain, used as an off-chain helper\",\"params\":{\"_memberAddress\":\"Address of the member\"}},\"removeMember(address)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_oracleMember\":\"Address to remove\"}},\"reportBeacon(uint256,uint64,uint32)\":{\"details\":\"Only callable by an oracle member\",\"params\":{\"_beaconBalance\":\"Total balance of River validators\",\"_beaconValidators\":\"Total River validator count\",\"_epochId\":\"Epoch where the balance and validator count has been computed\"}},\"setBeaconBounds(uint256,uint256)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_annualAprUpperBound\":\"Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\",\"_relativeLowerBound\":\"Maximum relative balance decrease.\"}},\"setBeaconSpec(uint64,uint64,uint64,uint64)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_epochsPerFrame\":\"Number of epochs in a frame.\",\"_genesisTime\":\"Timestamp of the genesis slot.\",\"_secondsPerSlot\":\"Number of seconds between slots.\",\"_slotsPerEpoch\":\"Number of slots in one epoch.\"}},\"setQuorum(uint256)\":{\"details\":\"Only callable by the adminstrator\",\"params\":{\"_newQuorum\":\"New quorum parameter\"}}},\"title\":\"Oracle (v1)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMember(address)\":{\"notice\":\"Adds new address as oracle member, giving the ability to push beacon reports.\"},\"getAdministrator()\":{\"notice\":\"Retrieve system administrator address\"},\"getBeaconSpec()\":{\"notice\":\"Retrieve the current beacon spec\"},\"getCurrentEpochId()\":{\"notice\":\"Retrieve the current epoch id based on block timestamp\"},\"getCurrentFrame()\":{\"notice\":\"Retrieve the current frame details\"},\"getExpectedEpochId()\":{\"notice\":\"Retrieve expected epoch id\"},\"getFrameFirstEpochId(uint256)\":{\"notice\":\"Retrieve the first epoch id of the frame of the provided epoch id\"},\"getGlobalReportStatus()\":{\"notice\":\"Retrieve member report status\"},\"getLastCompletedEpochId()\":{\"notice\":\"Retrieve the last completed epoch id\"},\"getMemberReportStatus(address)\":{\"notice\":\"Retrieve member report status\"},\"getQuorum()\":{\"notice\":\"Retrieve the current quorum\"},\"getReportVariant(uint256)\":{\"notice\":\"Retrieve decoded report at provided index\"},\"getReportVariantsCount()\":{\"notice\":\"Retrieve report variants count\"},\"getRiver()\":{\"notice\":\"Retrieve River address\"},\"getTime()\":{\"notice\":\"Retrieve the block timestamp\"},\"initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)\":{\"notice\":\"Initializes the oracle\"},\"isMember(address)\":{\"notice\":\"Returns true if address is member\"},\"removeMember(address)\":{\"notice\":\"Removes an address from the oracle members.\"},\"reportBeacon(uint256,uint64,uint32)\":{\"notice\":\"Report beacon chain data\"},\"setBeaconBounds(uint256,uint256)\":{\"notice\":\"Edits the beacon bounds parameters\"},\"setBeaconSpec(uint64,uint64,uint64,uint64)\":{\"notice\":\"Edits the beacon spec parameters\"},\"setQuorum(uint256)\":{\"notice\":\"Edits the quorum required to forward beacon data to River\"}},\"notice\":\"This contract handles the input from the allowed oracle members. Highly inspired by Lido's implementation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/Oracle.1.sol\":\"OracleV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/src/Initializable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\ncontract Initializable {\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    modifier init(uint256 version) {\\n        if (version != Version.get()) {\\n            revert InvalidInitialization(version, Version.get());\\n        }\\n        Version.set(version + 1); // prevents reentrency on the called method\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc93555f4bd660f91e565f20753e0d3a01e783e673bc0209d0d1e33c7b6941053\",\"license\":\"BUSL-1.1\"},\"contracts/src/Oracle.1.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./libraries/LibOwnable.sol\\\";\\nimport \\\"./interfaces/IRiverOracleInput.sol\\\";\\n\\nimport \\\"./state/shared/AdministratorAddress.sol\\\";\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\nimport \\\"./state/oracle/OracleMembers.sol\\\";\\nimport \\\"./state/oracle/Quorum.sol\\\";\\nimport \\\"./state/oracle/BeaconSpec.sol\\\";\\nimport \\\"./state/oracle/BeaconReportBounds.sol\\\";\\nimport \\\"./state/oracle/ExpectedEpochId.sol\\\";\\nimport \\\"./state/oracle/LastEpochId.sol\\\";\\nimport \\\"./state/oracle/ReportsPositions.sol\\\";\\nimport \\\"./state/oracle/ReportsVariants.sol\\\";\\n\\n/// @title Oracle (v1)\\n/// @author Kiln\\n/// @notice This contract handles the input from the allowed oracle members. Highly inspired by Lido's implementation.\\ncontract OracleV1 is Initializable {\\n    event QuorumChanged(uint256 _newQuorum);\\n    event ExpectedEpochIdUpdated(uint256 _epochId);\\n    event BeaconReported(\\n        uint256 _epochId,\\n        uint128 _newBeaconBalance,\\n        uint32 _newBeaconValidatorCount,\\n        address _oracleMember\\n    );\\n    event PostTotalShares(uint256 _postTotalEth, uint256 _prevTotalEth, uint256 _timeElapsed, uint256 _totalShares);\\n\\n    error EpochTooOld(uint256 _providedEpochId, uint256 _minExpectedEpochId);\\n    error NotFrameFirstEpochId(uint256 _providedEpochId, uint256 _expectedFrameFirstEpochId);\\n    error AlreadyReported(uint256 _epochId, address _member);\\n    error BeaconBalanceIncreaseOutOfBounds(\\n        uint256 _prevTotalEth,\\n        uint256 _postTotalEth,\\n        uint256 _timeElapsed,\\n        uint256 _annualAprUpperBound\\n    );\\n    error BeaconBalanceDecreaseOutOfBounds(\\n        uint256 _prevTotalEth,\\n        uint256 _postTotalEth,\\n        uint256 _timeElapsed,\\n        uint256 _relativeLowerBound\\n    );\\n\\n    /// @notice Received ETH input has only 9 decimals\\n    uint128 internal constant DENOMINATION_OFFSET = 1e9;\\n\\n    /// @notice Initializes the oracle\\n    /// @param _riverContractAddress Address of the River contract, able to receive oracle input data after quorum is met\\n    /// @param _administratorAddress Address able to call administrative methods\\n    /// @param _epochsPerFrame Beacon spec parameter. Number of epochs in a frame.\\n    /// @param _slotsPerEpoch Beacon spec parameter. Number of slots in one epoch.\\n    /// @param _secondsPerSlot Beacon spec parameter. Number of seconds between slots.\\n    /// @param _genesisTime Beacon spec parameter. Timestamp of the genesis slot.\\n    /// @param _annualAprUpperBound Beacon bound parameter. Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\\n    /// @param _relativeLowerBound Beacon bound parameter. Maximum relative balance decrease.\\n    function initOracleV1(\\n        address _riverContractAddress,\\n        address _administratorAddress,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound\\n    ) external init(0) {\\n        LibOwnable._setAdmin(_administratorAddress);\\n        RiverAddress.set(_riverContractAddress);\\n        BeaconSpec.set(\\n            BeaconSpec.BeaconSpecStruct({\\n                epochsPerFrame: _epochsPerFrame,\\n                slotsPerEpoch: _slotsPerEpoch,\\n                secondsPerSlot: _secondsPerSlot,\\n                genesisTime: _genesisTime\\n            })\\n        );\\n        BeaconReportBounds.set(\\n            BeaconReportBounds.BeaconReportBoundsStruct({\\n                annualAprUpperBound: _annualAprUpperBound,\\n                relativeLowerBound: _relativeLowerBound\\n            })\\n        );\\n        Quorum.set(1);\\n    }\\n\\n    /// @notice Retrieve system administrator address\\n    function getAdministrator() external view returns (address) {\\n        return LibOwnable._getAdmin();\\n    }\\n\\n    /// @notice Retrieve River address\\n    function getRiver() external view returns (address) {\\n        return RiverAddress.get();\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() {\\n        if (msg.sender != LibOwnable._getAdmin()) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Retrieve the block timestamp\\n    function getTime() external view returns (uint256) {\\n        return _getTime();\\n    }\\n\\n    /// @notice Retrieve expected epoch id\\n    function getExpectedEpochId() external view returns (uint256) {\\n        return ExpectedEpochId.get();\\n    }\\n\\n    /// @notice Retrieve member report status\\n    /// @param _oracleMember Address of member to check\\n    function getMemberReportStatus(address _oracleMember) external view returns (bool) {\\n        int256 memberIndex = OracleMembers.indexOf(_oracleMember);\\n        return ReportsPositions.get(uint256(memberIndex));\\n    }\\n\\n    /// @notice Retrieve member report status\\n    function getGlobalReportStatus() external view returns (uint256) {\\n        return ReportsPositions.getRaw();\\n    }\\n\\n    /// @notice Retrieve report variants count\\n    function getReportVariantsCount() external view returns (uint256) {\\n        return ReportsVariants.get().length;\\n    }\\n\\n    /// @notice Retrieve decoded report at provided index\\n    /// @param _idx Index of report\\n    function getReportVariant(uint256 _idx)\\n        external\\n        view\\n        returns (\\n            uint64 _beaconBalance,\\n            uint32 _beaconValidators,\\n            uint16 _reportCount\\n        )\\n    {\\n        uint256 report = ReportsVariants.get()[_idx];\\n        (_beaconBalance, _beaconValidators) = _decodeReport(report);\\n        _reportCount = _getReportCount(report);\\n    }\\n\\n    /// @notice Retrieve the last completed epoch id\\n    function getLastCompletedEpochId() external view returns (uint256) {\\n        return LastEpochId.get();\\n    }\\n\\n    /// @notice Retrieve the current epoch id based on block timestamp\\n    function getCurrentEpochId() external view returns (uint256) {\\n        BeaconSpec.BeaconSpecStruct memory beaconSpec = BeaconSpec.get();\\n        return _getCurrentEpochId(beaconSpec);\\n    }\\n\\n    /// @notice Retrieve the current quorum\\n    function getQuorum() external view returns (uint256) {\\n        return Quorum.get();\\n    }\\n\\n    /// @notice Retrieve the current beacon spec\\n    function getBeaconSpec() external view returns (BeaconSpec.BeaconSpecStruct memory) {\\n        return BeaconSpec.get();\\n    }\\n\\n    /// @notice Retrieve the current frame details\\n    function getCurrentFrame()\\n        external\\n        view\\n        returns (\\n            uint256 _startEpochId,\\n            uint256 _startTime,\\n            uint256 _endTime\\n        )\\n    {\\n        BeaconSpec.BeaconSpecStruct memory beaconSpec = BeaconSpec.get();\\n        _startEpochId = _getFrameFirstEpochId(_getCurrentEpochId(beaconSpec), beaconSpec);\\n        _startTime = beaconSpec.genesisTime + _startEpochId * beaconSpec.secondsPerSlot * beaconSpec.slotsPerEpoch;\\n        _endTime = _startTime + beaconSpec.secondsPerSlot * beaconSpec.slotsPerEpoch * beaconSpec.epochsPerFrame - 1;\\n    }\\n\\n    /// @notice Retrieve the first epoch id of the frame of the provided epoch id\\n    /// @param _epochId Epoch id used to get the frame\\n    function getFrameFirstEpochId(uint256 _epochId) external view returns (uint256) {\\n        BeaconSpec.BeaconSpecStruct memory beaconSpec = BeaconSpec.get();\\n        return _getFrameFirstEpochId(_epochId, beaconSpec);\\n    }\\n\\n    function getBeaconBounds() external view returns (BeaconReportBounds.BeaconReportBoundsStruct memory) {\\n        return BeaconReportBounds.get();\\n    }\\n\\n    function getOracleMembers() external view returns (address[] memory) {\\n        return OracleMembers.get();\\n    }\\n\\n    /// @notice Returns true if address is member\\n    /// @dev Performs a naive search, do not call this on-chain, used as an off-chain helper\\n    /// @param _memberAddress Address of the member\\n    function isMember(address _memberAddress) external view returns (bool) {\\n        address[] memory members = OracleMembers.get();\\n        for (uint256 idx = 0; idx < members.length; ++idx) {\\n            if (members[idx] == _memberAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Adds new address as oracle member, giving the ability to push beacon reports.\\n    /// @dev Only callable by the adminstrator\\n    /// @param _newOracleMember Address of the new member\\n    function addMember(address _newOracleMember) external onlyAdmin {\\n        int256 memberIdx = OracleMembers.indexOf(_newOracleMember);\\n        if (memberIdx >= 0) {\\n            revert Errors.InvalidCall();\\n        }\\n        OracleMembers.push(_newOracleMember);\\n    }\\n\\n    /// @notice Removes an address from the oracle members.\\n    /// @dev Only callable by the adminstrator\\n    /// @param _oracleMember Address to remove\\n    function removeMember(address _oracleMember) external onlyAdmin {\\n        int256 memberIdx = OracleMembers.indexOf(_oracleMember);\\n        if (memberIdx < 0) {\\n            revert Errors.InvalidCall();\\n        }\\n        OracleMembers.deleteItem(uint256(memberIdx));\\n    }\\n\\n    /// @notice Edits the beacon spec parameters\\n    /// @dev Only callable by the adminstrator\\n    /// @param _epochsPerFrame Number of epochs in a frame.\\n    /// @param _slotsPerEpoch Number of slots in one epoch.\\n    /// @param _secondsPerSlot Number of seconds between slots.\\n    /// @param _genesisTime Timestamp of the genesis slot.\\n    function setBeaconSpec(\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime\\n    ) external onlyAdmin {\\n        BeaconSpec.set(\\n            BeaconSpec.BeaconSpecStruct({\\n                epochsPerFrame: _epochsPerFrame,\\n                slotsPerEpoch: _slotsPerEpoch,\\n                secondsPerSlot: _secondsPerSlot,\\n                genesisTime: _genesisTime\\n            })\\n        );\\n    }\\n\\n    /// @notice Edits the beacon bounds parameters\\n    /// @dev Only callable by the adminstrator\\n    /// @param _annualAprUpperBound Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\\n    /// @param _relativeLowerBound Maximum relative balance decrease.\\n    function setBeaconBounds(uint256 _annualAprUpperBound, uint256 _relativeLowerBound) external onlyAdmin {\\n        BeaconReportBounds.set(\\n            BeaconReportBounds.BeaconReportBoundsStruct({\\n                annualAprUpperBound: _annualAprUpperBound,\\n                relativeLowerBound: _relativeLowerBound\\n            })\\n        );\\n    }\\n\\n    /// @notice Edits the quorum required to forward beacon data to River\\n    /// @dev Only callable by the adminstrator\\n    /// @param _newQuorum New quorum parameter\\n    function setQuorum(uint256 _newQuorum) external onlyAdmin {\\n        if (_newQuorum == 0) {\\n            revert Errors.InvalidArgument();\\n        }\\n        uint256 previousQuorum = Quorum.get();\\n        if (_newQuorum == previousQuorum) {\\n            revert Errors.InvalidCall();\\n        }\\n        Quorum.set(_newQuorum);\\n        emit QuorumChanged(_newQuorum);\\n        if (previousQuorum > _newQuorum) {\\n            (bool isQuorum, uint256 report) = _getQuorumReport(_newQuorum);\\n            if (isQuorum) {\\n                (uint64 beaconBalance, uint32 beaconValidators) = _decodeReport(report);\\n                _pushToRiver(\\n                    ExpectedEpochId.get(),\\n                    DENOMINATION_OFFSET * uint128(beaconBalance),\\n                    beaconValidators,\\n                    BeaconSpec.get()\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Report beacon chain data\\n    /// @dev Only callable by an oracle member\\n    /// @param _epochId Epoch where the balance and validator count has been computed\\n    /// @param _beaconBalance Total balance of River validators\\n    /// @param _beaconValidators Total River validator count\\n    function reportBeacon(\\n        uint256 _epochId,\\n        uint64 _beaconBalance,\\n        uint32 _beaconValidators\\n    ) external {\\n        BeaconSpec.BeaconSpecStruct memory beaconSpec = BeaconSpec.get();\\n        uint256 expectedEpochId = ExpectedEpochId.get();\\n        if (_epochId < expectedEpochId) {\\n            revert EpochTooOld(_epochId, expectedEpochId);\\n        }\\n\\n        if (_epochId > expectedEpochId) {\\n            uint256 frameFirstEpochId = _getFrameFirstEpochId(_getCurrentEpochId(beaconSpec), beaconSpec);\\n            if (_epochId != frameFirstEpochId) {\\n                revert NotFrameFirstEpochId(_epochId, frameFirstEpochId);\\n            }\\n            _clearReporting(_epochId);\\n        }\\n\\n        uint128 beaconBalanceEth1 = DENOMINATION_OFFSET * uint128(_beaconBalance);\\n        emit BeaconReported(_epochId, beaconBalanceEth1, _beaconValidators, msg.sender);\\n\\n        int256 memberIndex = OracleMembers.indexOf(msg.sender);\\n        if (memberIndex == -1) {\\n            revert Errors.Unauthorized(msg.sender);\\n        }\\n        if (ReportsPositions.get(uint256(memberIndex))) {\\n            revert AlreadyReported(_epochId, msg.sender);\\n        }\\n        ReportsPositions.register(uint256(memberIndex));\\n\\n        uint256 report = _encodeReport(_beaconBalance, _beaconValidators);\\n        int256 reportIndex = ReportsVariants.indexOfReport(report);\\n        uint256 quorum = Quorum.get();\\n\\n        if (reportIndex >= 0) {\\n            uint256 registeredReport = ReportsVariants.get()[uint256(reportIndex)];\\n            if (_getReportCount(registeredReport) + 1 >= quorum) {\\n                _pushToRiver(_epochId, beaconBalanceEth1, _beaconValidators, beaconSpec);\\n            } else {\\n                ReportsVariants.set(uint256(reportIndex), registeredReport + 1);\\n            }\\n        } else {\\n            if (quorum == 1) {\\n                _pushToRiver(_epochId, beaconBalanceEth1, _beaconValidators, beaconSpec);\\n            } else {\\n                ReportsVariants.push(report + 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Retrieve the report that has the highest number of \\\"votes\\\"\\n    /// @param _quorum The quorum used for the query\\n    function _getQuorumReport(uint256 _quorum) internal view returns (bool isQuorum, uint256 report) {\\n        // check most frequent cases first: all reports are the same or no reports yet\\n        uint256[] memory variants = ReportsVariants.get();\\n        if (variants.length == 1) {\\n            return (_getReportCount(variants[0]) >= _quorum, variants[0]);\\n        } else if (variants.length == 0) {\\n            return (false, 0);\\n        }\\n\\n        // if more than 2 kind of reports exist, choose the most frequent\\n        uint256 maxind = 0;\\n        uint256 repeat = 0;\\n        uint16 maxval = 0;\\n        uint16 cur = 0;\\n        for (uint256 i = 0; i < variants.length; ++i) {\\n            cur = _getReportCount(variants[i]);\\n            if (cur >= maxval) {\\n                if (cur == maxval) {\\n                    ++repeat;\\n                } else {\\n                    maxind = i;\\n                    maxval = cur;\\n                    repeat = 0;\\n                }\\n            }\\n        }\\n        return (maxval >= _quorum && repeat == 0, variants[maxind]);\\n    }\\n\\n    /// @notice Retrieve the block timestamp\\n    function _getTime() internal view returns (uint256) {\\n        return block.timestamp; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /// @notice Retrieve the current epoch id based on block timestamp\\n    /// @param _beaconSpec Beacon spec parameters\\n    function _getCurrentEpochId(BeaconSpec.BeaconSpecStruct memory _beaconSpec) internal view returns (uint256) {\\n        return (_getTime() - _beaconSpec.genesisTime) / (_beaconSpec.slotsPerEpoch * _beaconSpec.secondsPerSlot);\\n    }\\n\\n    /// @notice Retrieve the first epoch id of the frame of the provided epoch id\\n    /// @param _epochId Epoch id used to get the frame\\n    /// @param _beaconSpec Beacon spec parameters\\n    function _getFrameFirstEpochId(uint256 _epochId, BeaconSpec.BeaconSpecStruct memory _beaconSpec)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_epochId / _beaconSpec.epochsPerFrame) * _beaconSpec.epochsPerFrame;\\n    }\\n\\n    /// @notice Clear reporting data\\n    /// @param _epochId Next expected epoch id (first epoch of the next frame)\\n    function _clearReporting(uint256 _epochId) internal {\\n        ReportsPositions.clear();\\n        ReportsVariants.clear();\\n        ExpectedEpochId.set(_epochId);\\n        emit ExpectedEpochIdUpdated(_epochId);\\n    }\\n\\n    /// @notice Encode report into one slot. Last 16 bits are free to use for vote counting.\\n    /// @param _beaconBalance Total validator balance\\n    /// @param _beaconValidators Total validator count\\n    function _encodeReport(uint64 _beaconBalance, uint32 _beaconValidators) internal pure returns (uint256) {\\n        return (uint256(_beaconBalance) << 48) | (uint256(_beaconValidators) << 16);\\n    }\\n\\n    /// @notice Decode report from one slot to two variables, ignoring the last 16 bits\\n    /// @param _value Encoded report\\n    function _decodeReport(uint256 _value) internal pure returns (uint64 _beaconBalance, uint32 _beaconValidators) {\\n        _beaconBalance = uint64(_value >> 48);\\n        _beaconValidators = uint32(_value >> 16);\\n    }\\n\\n    /// @notice Retrieve the vote count from the encoded report (last 16 bits)\\n    /// @param _report Encoded report\\n    function _getReportCount(uint256 _report) internal pure returns (uint16) {\\n        return uint16(_report);\\n    }\\n\\n    /// @notice Performs sanity checks to prevent an erroneous update to the River system\\n    /// @param _postTotalEth Total validator balance after update\\n    /// @param _prevTotalEth Total validator balance before update\\n    /// @param _timeElapsed Time since last update\\n    function _sanityChecks(\\n        uint256 _postTotalEth,\\n        uint256 _prevTotalEth,\\n        uint256 _timeElapsed\\n    ) internal view {\\n        if (_postTotalEth >= _prevTotalEth) {\\n            // increase                 = _postTotalPooledEther - _preTotalPooledEther,\\n            // relativeIncrease         = increase / _preTotalPooledEther,\\n            // annualRelativeIncrease   = relativeIncrease / (timeElapsed / 365 days),\\n            // annualRelativeIncreaseBp = annualRelativeIncrease * 10000, in basis points 0.01% (1e-4)\\n            uint256 annualAprUpperBound = BeaconReportBounds.get().annualAprUpperBound;\\n            // check that annualRelativeIncreaseBp <= allowedAnnualRelativeIncreaseBp\\n            if (\\n                uint256(10000 * 365 days) * (_postTotalEth - _prevTotalEth) >\\n                annualAprUpperBound * _prevTotalEth * _timeElapsed\\n            ) {\\n                revert BeaconBalanceIncreaseOutOfBounds(\\n                    _prevTotalEth,\\n                    _postTotalEth,\\n                    _timeElapsed,\\n                    annualAprUpperBound\\n                );\\n            }\\n        } else {\\n            // decrease           = _preTotalPooledEther - _postTotalPooledEther\\n            // relativeDecrease   = decrease / _preTotalPooledEther\\n            // relativeDecreaseBp = relativeDecrease * 10000, in basis points 0.01% (1e-4)\\n            uint256 relativeLowerBound = BeaconReportBounds.get().relativeLowerBound;\\n            // check that relativeDecreaseBp <= allowedRelativeDecreaseBp\\n            if (uint256(10000) * (_prevTotalEth - _postTotalEth) > relativeLowerBound * _prevTotalEth) {\\n                revert BeaconBalanceDecreaseOutOfBounds(_prevTotalEth, _postTotalEth, _timeElapsed, relativeLowerBound);\\n            }\\n        }\\n    }\\n\\n    /// @notice Push the new beacon data to the river system and performs sanity checks\\n    /// @param _epochId Id of the epoch\\n    /// @param _balanceSum Total validator balance\\n    /// @param _validatorCount Total validator count\\n    /// @param _beaconSpec Beacon spec parameters\\n    function _pushToRiver(\\n        uint256 _epochId,\\n        uint128 _balanceSum,\\n        uint32 _validatorCount,\\n        BeaconSpec.BeaconSpecStruct memory _beaconSpec\\n    ) internal {\\n        _clearReporting(_epochId + _beaconSpec.epochsPerFrame);\\n\\n        IRiverOracleInput riverAddress = IRiverOracleInput(RiverAddress.get());\\n        uint256 prevTotalEth = riverAddress.totalSupply();\\n        riverAddress.setBeaconData(_validatorCount, _balanceSum, bytes32(_epochId));\\n        uint256 postTotalEth = riverAddress.totalSupply();\\n\\n        uint256 timeElapsed = (_epochId - LastEpochId.get()) * _beaconSpec.slotsPerEpoch * _beaconSpec.secondsPerSlot;\\n\\n        _sanityChecks(postTotalEth, prevTotalEth, timeElapsed);\\n        LastEpochId.set(_epochId);\\n\\n        emit PostTotalShares(postTotalEth, prevTotalEth, timeElapsed, riverAddress.totalShares());\\n    }\\n}\\n\",\"keccak256\":\"0x27ce9175a0ed887c4b22856dde5c35329fc97c1547cdb3a9980d920b61916ae8\",\"license\":\"BUSL-1.1\"},\"contracts/src/interfaces/IRiverOracleInput.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\ninterface IRiverOracleInput {\\n    function setBeaconData(\\n        uint256 _validatorCount,\\n        uint256 _validatorBalanceSum,\\n        bytes32 _roundId\\n    ) external;\\n\\n    function totalSupply() external returns (uint256);\\n\\n    function totalShares() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x3c81f37602d3f604c7b2809325a49cee466e14cd8d244d91072fcd3c5a503d46\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    error Unauthorized(address caller);\\n    error InvalidCall();\\n    error InvalidArgument();\\n}\\n\",\"keccak256\":\"0xf3d3cec3d3d583aac19da0ace05f7ee067d47fd67e2a1f5f3195d7cbc5329325\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/LibOwnable.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\n\\nlibrary LibOwnable {\\n    function _setAdmin(address newAdmin) internal {\\n        AdministratorAddress.set(newAdmin);\\n    }\\n\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n}\\n\",\"keccak256\":\"0xc189956546f854193e5fea6225b6eb0262ab192a97c4e32575eefe8205549794\",\"license\":\"BUSL-1.1\"},\"contracts/src/libraries/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x52ccf1daa33de9c72831e0d7458928c37ca7b5f8d8f732114095edeb81339920\",\"license\":\"MIT\"},\"contracts/src/state/oracle/BeaconReportBounds.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary BeaconReportBounds {\\n    // Lido Finance beacon spec data structure\\n    struct BeaconReportBoundsStruct {\\n        uint256 annualAprUpperBound;\\n        uint256 relativeLowerBound;\\n    }\\n\\n    uint256 public constant DELTA_BASE = 10_000;\\n\\n    bytes32 internal constant BEACON_REPORT_BOUNDS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.beaconReportBounds\\\")) - 1);\\n\\n    struct Slot {\\n        BeaconReportBoundsStruct value;\\n    }\\n\\n    function get() internal view returns (BeaconReportBoundsStruct memory) {\\n        bytes32 slot = BEACON_REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    function set(BeaconReportBoundsStruct memory newBeaconReportBounds) internal {\\n        bytes32 slot = BEACON_REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = newBeaconReportBounds;\\n    }\\n}\\n\",\"keccak256\":\"0xd04aefe774bf9b5a624d5d069b9a4a28bde347feecf9ca4cb97888a01d94851f\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/BeaconSpec.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary BeaconSpec {\\n    // Lido Finance beacon spec data structure\\n    struct BeaconSpecStruct {\\n        uint64 epochsPerFrame;\\n        uint64 slotsPerEpoch;\\n        uint64 secondsPerSlot;\\n        uint64 genesisTime;\\n    }\\n\\n    bytes32 internal constant BEACON_SPEC_SLOT = bytes32(uint256(keccak256(\\\"river.state.beaconSpec\\\")) - 1);\\n\\n    struct Slot {\\n        BeaconSpecStruct value;\\n    }\\n\\n    function get() internal view returns (BeaconSpecStruct memory) {\\n        bytes32 slot = BEACON_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    function set(BeaconSpecStruct memory newBeaconSpec) internal {\\n        bytes32 slot = BEACON_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = newBeaconSpec;\\n    }\\n}\\n\",\"keccak256\":\"0x7a59133d57b35f8a5792b51ae0e7daeaee6606363f80c56dee278d72619b998e\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/ExpectedEpochId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary ExpectedEpochId {\\n    bytes32 internal constant EXPECTED_EPOCH_ID_SLOT = bytes32(uint256(keccak256(\\\"river.state.expectedEpochId\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(EXPECTED_EPOCH_ID_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(EXPECTED_EPOCH_ID_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xd4c748c6406cfd077856784f4408795d4200509fa0c6e33d0c62d724263f0613\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/LastEpochId.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary LastEpochId {\\n    bytes32 internal constant LAST_EPOCH_ID_SLOT = bytes32(uint256(keccak256(\\\"river.state.lastEpochId\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(LAST_EPOCH_ID_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(LAST_EPOCH_ID_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x359355959fa21f536ffa7853e8bf0071b1cbff424e8e02f92b12d808af82106f\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/OracleMembers.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary OracleMembers {\\n    bytes32 internal constant ORACLE_MEMBERS_SLOT = bytes32(uint256(keccak256(\\\"river.state.oracleMembers\\\")) - 1);\\n\\n    struct Slot {\\n        address[] value;\\n    }\\n\\n    function get() internal view returns (address[] memory) {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    function push(address newOracleMember) internal {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(newOracleMember);\\n    }\\n\\n    function indexOf(address memberAddress) internal view returns (int256) {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (r.value[idx] == memberAddress) {\\n                return int256(idx);\\n            }\\n        }\\n\\n        return int256(-1);\\n    }\\n\\n    function deleteItem(uint256 idx) internal {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 lastIdx = r.value.length - 1;\\n        if (lastIdx != idx) {\\n            r.value[idx] = r.value[lastIdx];\\n        }\\n\\n        r.value.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x9a45f692e5de6fd87942f4db04eb04a56d0a499a8f97970e5a90d2b79f62fe44\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/Quorum.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Quorum {\\n    bytes32 internal constant QUORUM_SLOT = bytes32(uint256(keccak256(\\\"river.state.quorum\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(QUORUM_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        return UnstructuredStorage.setStorageUint256(QUORUM_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x88a2b86b9c94a7ab72553add39998f60d45f85a86b642fe3200adcbdea6e6490\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/ReportsPositions.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary ReportsPositions {\\n    bytes32 internal constant REPORTS_POSITIONS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportsPositions\\\")) - 1);\\n\\n    function get(uint256 idx) internal view returns (bool) {\\n        uint256 mask = 1 << idx;\\n        return UnstructuredStorage.getStorageUint256(REPORTS_POSITIONS_SLOT) & mask == mask;\\n    }\\n\\n    function getRaw() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(REPORTS_POSITIONS_SLOT);\\n    }\\n\\n    function register(uint256 idx) internal {\\n        uint256 mask = 1 << idx;\\n        return\\n            UnstructuredStorage.setStorageUint256(\\n                REPORTS_POSITIONS_SLOT,\\n                UnstructuredStorage.getStorageUint256(REPORTS_POSITIONS_SLOT) | mask\\n            );\\n    }\\n\\n    function clear() internal {\\n        return UnstructuredStorage.setStorageUint256(REPORTS_POSITIONS_SLOT, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x7f6a6d32a0b8ecc22289e9683f8f2939d353740159d319425ea206292b0ec9e6\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/oracle/ReportsVariants.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary ReportsVariants {\\n    uint256 internal constant COUNT_OUTMASK = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000;\\n\\n    bytes32 internal constant REPORTS_VARIANTS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportsVariants\\\")) - 1);\\n\\n    struct Slot {\\n        uint256[] value;\\n    }\\n\\n    function get() internal view returns (uint256[] memory) {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    function set(uint256 idx, uint256 val) internal {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[idx] = val;\\n    }\\n\\n    function push(uint256 variant) internal {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(variant);\\n    }\\n\\n    function indexOfReport(uint256 variant) internal view returns (int256) {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        for (uint256 idx = 0; idx < r.value.length; ++idx) {\\n            if (r.value[idx] & COUNT_OUTMASK == variant) {\\n                return int256(idx);\\n            }\\n        }\\n\\n        return int256(-1);\\n    }\\n\\n    function clear() internal {\\n        bytes32 slot = REPORTS_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        delete r.value;\\n    }\\n}\\n\",\"keccak256\":\"0xeb6f3c8abe0c1c2062232ae187e6abbcef3b264d7f8ab749e77e06a13d521074\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/AdministratorAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary AdministratorAddress {\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x6c103a106ff958994c38f055a316144416df36aeb299ba660e7b8af063931b72\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/RiverAddress.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary RiverAddress {\\n    bytes32 internal constant RIVER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.riverAddress\\\")) - 1);\\n\\n    function get() internal view returns (address) {\\n        return UnstructuredStorage.getStorageAddress(RIVER_ADDRESS_SLOT);\\n    }\\n\\n    function set(address newValue) internal {\\n        UnstructuredStorage.setStorageAddress(RIVER_ADDRESS_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0x2fff0ef976b74cb3ec973968d6ebae2aa1796c8bf6f1c45cb5478bd980785d1c\",\"license\":\"BUSL-1.1\"},\"contracts/src/state/shared/Version.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/UnstructuredStorage.sol\\\";\\n\\nlibrary Version {\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return UnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        UnstructuredStorage.setStorageUint256(VERSION_SLOT, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xf90d1ecf583061aa70dc464ec1fde21da6e9309601bcbba38f47d26257a1c656\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101985760003560e01c806393ef4511116100e3578063c26c12eb1161008c578063e547c77c11610066578063e547c77c14610360578063e90b2da1146103ac578063fad2e86a146103bf57600080fd5b8063c26c12eb14610330578063ca6d56dc14610338578063dabb57571461034b57600080fd5b8063a519f060116100bd578063a519f06014610302578063bc8b8f971461030a578063c1ba4e591461031d57600080fd5b806393ef4511146102c4578063a230c524146102e7578063a29a839f146102fa57600080fd5b80635190dce01161014557806372f79b131161011f57806372f79b131461028657806389896aef146102a957806391f10da0146102b157600080fd5b80635190dce01461024a578063557ed1ba1461026d57806357fa85471461027357600080fd5b80631696740711610176578063169674071461020f57806331f208b31461022f5780634b47b74f1461024257600080fd5b80630b1ca49a1461019d5780631045a966146101b257806314c8cd6a146101f9575b600080fd5b6101b06101ab366004611cf3565b6103c7565b005b6101c56101c0366004611d0e565b610443565b6040805167ffffffffffffffff909416845263ffffffff909216602084015261ffff16908201526060015b60405180910390f35b61020161048c565b6040519081526020016101f0565b61021761049b565b6040516001600160a01b0390911681526020016101f0565b6101b061023d366004611d3f565b6104a5565b610201610754565b61025d610258366004611cf3565b61075e565b60405190151581526020016101f0565b42610201565b610201610281366004611d0e565b61077c565b61028e610793565b604080519384526020840192909252908201526060016101f0565b610201610850565b6101b06102bf366004611d88565b61085a565b6102cc6108b2565b604080518251815260209283015192810192909252016101f0565b61025d6102f5366004611cf3565b6108ce565b61020161093e565b61021761095a565b6101b0610318366004611daa565b610964565b6101b061032b366004611d0e565b610a60565b610201610b9d565b6101b0610346366004611cf3565b610ba7565b610353610c19565b6040516101f09190611e33565b610368610c23565b6040516101f09190815167ffffffffffffffff9081168252602080840151821690830152604080840151821690830152606092830151169181019190915260800190565b6101b06103ba366004611e80565b610c4f565b610201610cdb565b6103cf610ceb565b6001600160a01b0316336001600160a01b0316146104075760405163472511eb60e11b81523360048201526024015b60405180910390fd5b600061041282610cf5565b905060008112156104365760405163574b16a760e11b815260040160405180910390fd5b61043f81610d90565b5050565b600080600080610451610e92565b858151811061046257610462611ed4565b6020026020010151905061047f81603081901c9160109190911c90565b9096909550909350915050565b6000610496610f19565b905090565b6000610496610ceb565b60006104af610f4d565b905060006104bb610ff9565b905080851015610501576040517f09ec8ad200000000000000000000000000000000000000000000000000000000815260048101869052602481018290526044016103fe565b8085111561056d57600061051d61051784611029565b84611079565b9050808614610562576040517f983b675100000000000000000000000000000000000000000000000000000000815260048101879052602481018290526044016103fe565b61056b8661109c565b505b600061058767ffffffffffffffff8616633b9aca00611f00565b604080518881526fffffffffffffffffffffffffffffffff8316602082015263ffffffff87168183015233606082015290519192507ff9088c3664056902a1be808c28981aa5e97da5f1a2b3557233d04eed40a9b42a919081900360800190a160006105f233610cf5565b90508060001914156106195760405163472511eb60e11b81523360048201526024016103fe565b610622816110eb565b15610662576040517ff4d521a2000000000000000000000000000000000000000000000000000000008152600481018890523360248201526044016103fe565b61066b8161112e565b601085901b65ffffffff000016603087901b6dffffffffffffffff0000000000001617600061069982611196565b905060006106a5611222565b90506000821261071b5760006106b9610e92565b83815181106106ca576106ca611ed4565b60200260200101519050816106dc8290565b6106e7906001611f38565b61ffff1610610701576106fc8b878b8b611252565b610715565b61071583610710836001611f5e565b6114f6565b50610748565b8060011415610735576107308a868a8a611252565b610748565b610748610743846001611f5e565b611550565b50505050505050505050565b6000610496610ff9565b60008061076a83610cf5565b9050610775816110eb565b9392505050565b600080610787610f4d565b90506107758382611079565b6000806000806107a1610f4d565b90506107b56107af82611029565b82611079565b9350806020015167ffffffffffffffff16816040015167ffffffffffffffff16856107e09190611f76565b6107ea9190611f76565b816060015167ffffffffffffffff166108039190611f5e565b925060018160000151826020015183604001516108209190611f95565b61082a9190611f95565b61083e9067ffffffffffffffff1685611f5e565b6108489190611fbc565b915050909192565b6000610496611597565b610862610ceb565b6001600160a01b0316336001600160a01b0316146108955760405163472511eb60e11b81523360048201526024016103fe565b61043f6040518060400160405280848152602001838152506115c7565b604080518082019091526000808252602082015261049661160a565b6000806108d961166a565b905060005b815181101561093457836001600160a01b031682828151811061090357610903611ed4565b60200260200101516001600160a01b03161415610924575060019392505050565b61092d81611fd3565b90506108de565b5060009392505050565b600080610949610f4d565b905061095481611029565b91505090565b60006104966116fa565b600061096e61172a565b81146109b8578061097d61172a565b6040517fe7e93b38000000000000000000000000000000000000000000000000000000008152600481019290925260248201526044016103fe565b6109cb6109c6826001611f5e565b61175a565b6109d488611790565b6109dd89611799565b610a2e60405180608001604052808967ffffffffffffffff1681526020018867ffffffffffffffff1681526020018767ffffffffffffffff1681526020018667ffffffffffffffff168152506117c7565b610a4b6040518060400160405280858152602001848152506115c7565b610a5560016118a5565b505050505050505050565b610a68610ceb565b6001600160a01b0316336001600160a01b031614610a9b5760405163472511eb60e11b81523360048201526024016103fe565b80610ad2576040517fa9cb9e0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610adc611222565b905080821415610aff5760405163574b16a760e11b815260040160405180910390fd5b610b08826118a5565b6040518281527f027863d12a407097e086a48e36475bfc859d0b200b7e6f65b5fd3b218e46632e9060200160405180910390a18181111561043f57600080610b4f846118d3565b915091508115610b9757603081901c601082901c610b94610b6e610ff9565b610b8667ffffffffffffffff8516633b9aca00611f00565b83610b8f610f4d565b611252565b50505b50505050565b6000610496611222565b610baf610ceb565b6001600160a01b0316336001600160a01b031614610be25760405163472511eb60e11b81523360048201526024016103fe565b6000610bed82610cf5565b905060008112610c105760405163574b16a760e11b815260040160405180910390fd5b61043f826119f9565b606061049661166a565b604080516080810182526000808252602082018190529181018290526060810191909152610496610f4d565b610c57610ceb565b6001600160a01b0316336001600160a01b031614610c8a5760405163472511eb60e11b81523360048201526024016103fe565b610b9760405180608001604052808667ffffffffffffffff1681526020018567ffffffffffffffff1681526020018467ffffffffffffffff1681526020018367ffffffffffffffff168152506117c7565b6000610ce5610e92565b51905090565b6000610496611a68565b600080610d2360017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611fbc565b90508060005b8154811015610d8457846001600160a01b0316826000018281548110610d5157610d51611ed4565b6000918252602090912001546001600160a01b03161415610d7457949350505050565b610d7d81611fd3565b9050610d29565b50600019949350505050565b6000610dbd60017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611fbc565b80549091508190600090610dd390600190611fbc565b9050838114610e4c57816000018181548110610df157610df1611ed4565b60009182526020909120015482546001600160a01b0390911690839086908110610e1d57610e1d611ed4565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b8154829080610e5d57610e5d611fee565b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff1916905501905550505050565b60606000610ec160017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611fbc565b8054604080516020808402820181019092528281529293508392918391830182828015610f0d57602002820191906000526020600020905b815481526020019060010190808311610ef9575b50505050509250505090565b6000610496610f4960017f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611fbc565b5490565b604080516080810182526000808252602082018190529181018290526060810182905290610f9c60017f910cad6638f0b06b72ead1455bffc33be6e9b1c24417cc3f692aaaf0bef75a16611fbc565b60408051608081018252915467ffffffffffffffff8082168452680100000000000000008204811660208501527001000000000000000000000000000000008204811692840192909252600160c01b900416606082015292915050565b6000610496610f4960017f45d0d54fdd66220435526b0d20a3e002dad71447d5a32fb8efce72e62d4e0228611fbc565b60008160400151826020015161103f9190611f95565b67ffffffffffffffff16826060015167ffffffffffffffff1661105f4290565b6110699190611fbc565b6110739190612004565b92915050565b805160009067ffffffffffffffff166110928185612004565b6107759190611f76565b6110a4611a98565b6110ac611ace565b6110b581611b09565b6040518181527fcdcd275f4d96ed683d684f3610a92beacdebcf1ee4d37e2df526fb9001e1ea639060200160405180910390a150565b6000600180831b908190819061112590610f49907f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611fbc565b16149392505050565b600180821b9061043f90611162907f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611fbc565b82611191610f4960017f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611fbc565b179055565b6000806111c460017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611fbc565b90508060005b8154811015610d8457846dffffffffffffffffffffffff00008360000183815481106111f8576111f8611ed4565b906000526020600020015416141561121257949350505050565b61121b81611fd3565b90506111ca565b6000610496610f4960017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611fbc565b80516112719061126c9067ffffffffffffffff1686611f5e565b61109c565b600061127b6116fa565b90506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156112bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e39190612026565b6040517f80d4027e00000000000000000000000000000000000000000000000000000000815263ffffffff861660048201526fffffffffffffffffffffffffffffffff87166024820152604481018890529091506001600160a01b038316906380d4027e90606401600060405180830381600087803b15801561136557600080fd5b505af1158015611379573d6000803e3d6000fd5b505050506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156113bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e39190612026565b90506000846040015167ffffffffffffffff16856020015167ffffffffffffffff1661140d611597565b611417908b611fbc565b6114219190611f76565b61142b9190611f76565b9050611438828483611b37565b61144188611c49565b7fdafd48d1eba2a416b2aca45e9ead3ad18b84e868fa6d2e1a3048bfd37ed10a32828483876001600160a01b0316633a98ef396040518163ffffffff1660e01b81526004016020604051808303816000875af11580156114a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c99190612026565b60408051948552602085019390935291830152606082015260800160405180910390a15050505050505050565b600061152360017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611fbc565b80549091508190839082908690811061153e5761153e611ed4565b60009182526020909120015550505050565b600061157d60017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611fbc565b805460018101825560009182526020909120019190915550565b6000610496610f4960017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611fbc565b60006115f460017f8a8a043b81dd88a581f2aa1faf076f45266d72ec8307cdf217c10a967969249f611fbc565b8251815560209092015160019092019190915550565b6040805180820190915260008082526020820152600061164b60017f8a8a043b81dd88a581f2aa1faf076f45266d72ec8307cdf217c10a967969249f611fbc565b6040805180820190915281548152600190910154602082015292915050565b6060600061169960017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611fbc565b8054604080516020808402820181019092528281529293508392918391830182828015610f0d57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116d15750505050509250505090565b6000610496610f4960017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611fbc565b6000610496610f4960017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611fbc565b61178d61178860017f82055909238c0f5e63d6f174068ebb8f51bcec9bd37de63bb68f6551feec0cfd611fbc565b829055565b50565b61178d81611c77565b61178d61178860017f1ec4138404500a2a0be2c2f9b103581c2a7fa783a934f91a6cc5cc924404973c611fbc565b60006117f460017f910cad6638f0b06b72ead1455bffc33be6e9b1c24417cc3f692aaaf0bef75a16611fbc565b825181546020850151604086015160609096015167ffffffffffffffff908116600160c01b0277ffffffffffffffffffffffffffffffffffffffffffffffff97821670010000000000000000000000000000000002979097166fffffffffffffffffffffffffffffffff92821668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000000000000000000090941691909416179190911716179290921790915550565b61178d61178860017fffa4a5d927096d2bbb9d71111d7c9929ecbdcbe9bffc8d35f55b642e81698ebb611fbc565b60008060006118e0610e92565b9050805160011415611939578361190e8260008151811061190357611903611ed4565b602002602001015190565b61ffff1610158160008151811061192757611927611ed4565b60200260200101519250925050915091565b805161194b5750600093849350915050565b60008060008060005b85518110156119be5761197286828151811061190357611903611ed4565b91508261ffff168261ffff16106119ae578261ffff168261ffff1614156119a35761199c84611fd3565b93506119ae565b809450819250600093505b6119b781611fd3565b9050611954565b50878261ffff16101580156119d1575082155b8585815181106119e3576119e3611ed4565b6020026020010151965096505050505050915091565b6000611a2660017fc4aba040293e5848600dd7b64a390db880c4a70937c23383e6c5b6619689863b611fbc565b80546001810182556000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03939093169290921790915550565b6000610496610f4960017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611fbc565b611acc611ac660017f50e65b39a6b6b7bb3298d9d19e41cecec530b7916ba516c44f4d79e3a9dcd7a7611fbc565b60009055565b565b6000611afb60017ff1827321f6d023724a23b4e28f3ef67f741d185cff4e224f6dcbb56935784fcd611fbc565b90508061043f816000611ca5565b61178d61178860017f45d0d54fdd66220435526b0d20a3e002dad71447d5a32fb8efce72e62d4e0228611fbc565b818310611bc9576000611b4861160a565b51905081611b568483611f76565b611b609190611f76565b611b6a8486611fbc565b611b799064496cebb800611f76565b1115610b97576040517fd86fb83d000000000000000000000000000000000000000000000000000000008152600481018490526024810185905260448101839052606481018290526084016103fe565b6000611bd361160a565b602001519050611be38382611f76565b611bed8585611fbc565b611bf990612710611f76565b1115610b97576040517f0aa91ae4000000000000000000000000000000000000000000000000000000008152600481018490526024810185905260448101839052606481018290526084016103fe565b61178d61178860017faf3d74d3b4106d19ea8994739c1a66b48922195975ea284f4cd201487a79b9ed611fbc565b61178d61178860017fb5b37715a3e346e996104f0086703f19825def429233930fd9399c38e05fb113611fbc565b508054600082559060005260206000209081019061178d91905b80821115611cd35760008155600101611cbf565b5090565b80356001600160a01b0381168114611cee57600080fd5b919050565b600060208284031215611d0557600080fd5b61077582611cd7565b600060208284031215611d2057600080fd5b5035919050565b803567ffffffffffffffff81168114611cee57600080fd5b600080600060608486031215611d5457600080fd5b83359250611d6460208501611d27565b9150604084013563ffffffff81168114611d7d57600080fd5b809150509250925092565b60008060408385031215611d9b57600080fd5b50508035926020909101359150565b600080600080600080600080610100898b031215611dc757600080fd5b611dd089611cd7565b9750611dde60208a01611cd7565b9650611dec60408a01611d27565b9550611dfa60608a01611d27565b9450611e0860808a01611d27565b9350611e1660a08a01611d27565b925060c0890135915060e089013590509295985092959890939650565b6020808252825182820181905260009190848201906040850190845b81811015611e745783516001600160a01b031683529284019291840191600101611e4f565b50909695505050505050565b60008060008060808587031215611e9657600080fd5b611e9f85611d27565b9350611ead60208601611d27565b9250611ebb60408601611d27565b9150611ec960608601611d27565b905092959194509250565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006fffffffffffffffffffffffffffffffff80831681851681830481118215151615611f2f57611f2f611eea565b02949350505050565b600061ffff808316818516808303821115611f5557611f55611eea565b01949350505050565b60008219821115611f7157611f71611eea565b500190565b6000816000190483118215151615611f9057611f90611eea565b500290565b600067ffffffffffffffff80831681851681830481118215151615611f2f57611f2f611eea565b600082821015611fce57611fce611eea565b500390565b6000600019821415611fe757611fe7611eea565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60008261202157634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561203857600080fd5b505191905056fea264697066735822122053a7b6725e31ba4b34994cf390308a7abead76fee5ce21858c1432f31fec812064736f6c634300080a0033",
  "devdoc": {
    "author": "Kiln",
    "kind": "dev",
    "methods": {
      "addMember(address)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_newOracleMember": "Address of the new member"
        }
      },
      "getFrameFirstEpochId(uint256)": {
        "params": {
          "_epochId": "Epoch id used to get the frame"
        }
      },
      "getMemberReportStatus(address)": {
        "params": {
          "_oracleMember": "Address of member to check"
        }
      },
      "getReportVariant(uint256)": {
        "params": {
          "_idx": "Index of report"
        }
      },
      "initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)": {
        "params": {
          "_administratorAddress": "Address able to call administrative methods",
          "_annualAprUpperBound": "Beacon bound parameter. Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.",
          "_epochsPerFrame": "Beacon spec parameter. Number of epochs in a frame.",
          "_genesisTime": "Beacon spec parameter. Timestamp of the genesis slot.",
          "_relativeLowerBound": "Beacon bound parameter. Maximum relative balance decrease.",
          "_riverContractAddress": "Address of the River contract, able to receive oracle input data after quorum is met",
          "_secondsPerSlot": "Beacon spec parameter. Number of seconds between slots.",
          "_slotsPerEpoch": "Beacon spec parameter. Number of slots in one epoch."
        }
      },
      "isMember(address)": {
        "details": "Performs a naive search, do not call this on-chain, used as an off-chain helper",
        "params": {
          "_memberAddress": "Address of the member"
        }
      },
      "removeMember(address)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_oracleMember": "Address to remove"
        }
      },
      "reportBeacon(uint256,uint64,uint32)": {
        "details": "Only callable by an oracle member",
        "params": {
          "_beaconBalance": "Total balance of River validators",
          "_beaconValidators": "Total River validator count",
          "_epochId": "Epoch where the balance and validator count has been computed"
        }
      },
      "setBeaconBounds(uint256,uint256)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_annualAprUpperBound": "Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.",
          "_relativeLowerBound": "Maximum relative balance decrease."
        }
      },
      "setBeaconSpec(uint64,uint64,uint64,uint64)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_epochsPerFrame": "Number of epochs in a frame.",
          "_genesisTime": "Timestamp of the genesis slot.",
          "_secondsPerSlot": "Number of seconds between slots.",
          "_slotsPerEpoch": "Number of slots in one epoch."
        }
      },
      "setQuorum(uint256)": {
        "details": "Only callable by the adminstrator",
        "params": {
          "_newQuorum": "New quorum parameter"
        }
      }
    },
    "title": "Oracle (v1)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMember(address)": {
        "notice": "Adds new address as oracle member, giving the ability to push beacon reports."
      },
      "getAdministrator()": {
        "notice": "Retrieve system administrator address"
      },
      "getBeaconSpec()": {
        "notice": "Retrieve the current beacon spec"
      },
      "getCurrentEpochId()": {
        "notice": "Retrieve the current epoch id based on block timestamp"
      },
      "getCurrentFrame()": {
        "notice": "Retrieve the current frame details"
      },
      "getExpectedEpochId()": {
        "notice": "Retrieve expected epoch id"
      },
      "getFrameFirstEpochId(uint256)": {
        "notice": "Retrieve the first epoch id of the frame of the provided epoch id"
      },
      "getGlobalReportStatus()": {
        "notice": "Retrieve member report status"
      },
      "getLastCompletedEpochId()": {
        "notice": "Retrieve the last completed epoch id"
      },
      "getMemberReportStatus(address)": {
        "notice": "Retrieve member report status"
      },
      "getQuorum()": {
        "notice": "Retrieve the current quorum"
      },
      "getReportVariant(uint256)": {
        "notice": "Retrieve decoded report at provided index"
      },
      "getReportVariantsCount()": {
        "notice": "Retrieve report variants count"
      },
      "getRiver()": {
        "notice": "Retrieve River address"
      },
      "getTime()": {
        "notice": "Retrieve the block timestamp"
      },
      "initOracleV1(address,address,uint64,uint64,uint64,uint64,uint256,uint256)": {
        "notice": "Initializes the oracle"
      },
      "isMember(address)": {
        "notice": "Returns true if address is member"
      },
      "removeMember(address)": {
        "notice": "Removes an address from the oracle members."
      },
      "reportBeacon(uint256,uint64,uint32)": {
        "notice": "Report beacon chain data"
      },
      "setBeaconBounds(uint256,uint256)": {
        "notice": "Edits the beacon bounds parameters"
      },
      "setBeaconSpec(uint64,uint64,uint64,uint64)": {
        "notice": "Edits the beacon spec parameters"
      },
      "setQuorum(uint256)": {
        "notice": "Edits the quorum required to forward beacon data to River"
      }
    },
    "notice": "This contract handles the input from the allowed oracle members. Highly inspired by Lido's implementation.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}